{
  "summary": "Practice Exercises for DS course taught by Prof. Sharifi.",
  "title": "DS Course",
  "programming_language": "Python",
  "language": "en",
  "course_type": "PyCharm",
  "items": [
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Sorting",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 20,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "global t\n    if k % 2 \u003d\u003d 0:\n        return -1\n    t \u003d k\n    t -\u003d 1\n    a \u003d [i + 1 for i in range(n)]\n\n    def sl(l, r):\n        global t\n        if r - l \u003c 2 or t \u003d\u003d 0:\n            return\n        t -\u003d 2\n        m \u003d (l + r) // 2\n        a[m], a[m - 1] \u003d a[m - 1], a[m]\n        sl(l, m)\n        sl(m, r)\n\n    sl(0, n)\n    if t !\u003d 0:\n        return -1\n    return a",
                  "placeholder_text": "return -1 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  الگوریتم mergeSort یکی از روش های مرتب کردن چند عنصر است.تابعی که عناصر آرایه a را مرتب می کند می تواند به روش زیر پیاده سازی شود:\n  \u003cbr\u003e\n  1-اگر بازه (l , r] به صورت صعودی مرتب شده بود کار تابع تمام می شود\n  \u003cbr\u003e\n  2- در غیر این صورت mid برابر جزء صحیح 2 / (l + r) می شود .\n  \u003cbr\u003e\n  3-تابع (mergeSort(a , l , mid صدا زده می شود\n  \u003cbr\u003e\n  4-تابع (mergeSort(a , mid , r صدا زده می شود\n  \u003cbr\u003e\n  5- در این مرحله بخش های (l , mid] و (mid , r] با هم دیگر merge می شوند\n  \u003cbr\u003e\n  در سوال آرایه a از اندیس 0 شروع می شود\n  \u003cbr\u003e\n  حال یکی از بچه ها این برنامه را طوری پیاده سازی کرده که تعداد دفعاتی که تابع mergeSort صدا زده می شود را می شمارد.مثلا اگر آرایه a برابر با {4 , 3 , 2 , 1} باشد این تابع صرفا یک بار صدا زده می شود(تابع (mergeSort(0 , 4) و چون آرایه به صورت صعودی مرتب است کار تابع تمام می شود. و یا مثلا اگر آرایه a برابر با {3 , 1 , 2} باشد 3 بار این تابع صدا زده می شود(ابتدا (mergeSort(0 , 3 صدا زده می شود و مقدار mid برابر با 1 می شود و بعد به ترتیب تابع های (0 , 1)mergeSort و (mergeSort(1 , 3 صدا زده می شوند  و بعد با عمل merge شدن آرایه مرتب می شود.\n  \u003cbr\u003e\n  این فرد برای تست کردن برنامه اش به شما دو عدد n , k را به ترتیب ورودی می دهد و از شما می خواهد که جایگشتی از اعداد 1 تا n به او خروجی بدهید که هنگام مرتب کردن آن دقیقا k بار تابع mergeSort صدا زده شده باشد و در صورت عدم وجود ، 1- خروجی بدهد\n  اگر هم چندین جواب وجود داشت جوابی که از لحاظ دیکشنری زود تر میاید را خروجی بدهید\n\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 40,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "all \u003d []\n    for i in range(n):\n        pos \u003d bisect.bisect(all, array[i])\n        if pos \u003e\u003d len(all):\n            all.append(array[i])\n        else:\n            all[pos] \u003d array[i]\n    return len(all)",
                  "placeholder_text": "return 0 # Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  یکی از دانش جویان درس DS که از سادگی الگوریتم Bubble Sort خسته شده تصمیم دارد با ساختن گرافی با الگوریتم زیر کمی آن را جذاب تر کند.\n\u003c/p\u003e\nprocedure bubbleSortGraph()\n\u003cbr\u003e\n\u003cpre\u003e\u0026emsp;build a graph G with n vertices and 0 edges\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;repeat\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;swapped \u003d false\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;for i \u003d 1 to n - 1 inclusive do:\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;\u0026emsp;if a[i] \u003e a[i + 1] then\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;add an undirected edge in G between a[i] and a[i + 1]\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;swap( a[i], a[i + 1] )\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;swapped \u003d true\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;\u0026emsp;end if\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;\u0026emsp;end for\u003c/pre\u003e\n\u003cpre\u003e\u0026emsp;until not swapped\u003c/pre\u003e\n\u003cpre\u003e /* repeat the algorithm as long as swapped value is true. */\u003c/pre\u003e\n\u003cpre\u003eend procedure\u003c/pre\u003e\n\u003cbr\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  حالا او می خواهد ببیند که به ازای آرایه های مختلفی که به تابع او داده می شود ، تعداد مولفه های هم بندی گراف او چند تا است . به او کمک کنید تا جواب را پیدا کند.\n  در ورودی ابتدا تعداد عناصر آرایه می آید و بعد خود آرایه خروجی هم یک عدد است که تعداد مولفه های هم بندی را نشان می دهد\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 70,
                  "length": 33,
                  "hints": [],
                  "possible_answer": "#start \u003d timeit.default_timer()\n    if fst \u003e\u003d lst: return\n\n    i, j \u003d fst, lst\n    pivot \u003d arr[random.randint(fst, lst)]\n\n    while i \u003c\u003d j:\n        while arr[i] \u003c pivot: i +\u003d 1\n        while arr[j] \u003e pivot: j -\u003d 1\n        if i \u003c\u003d j:\n            arr[i], arr[j] \u003d arr[j], arr[i]\n            i, j \u003d i + 1, j - 1\n    qSortRandomPivot(arr, fst, j)\n    qSortRandomPivot(arr, i, lst)\n    #end \u003d timeit.default_timer()\n    #print(\u0027qSort Random Pivot Time: \u0027 , end - start)\n    return arr",
                  "placeholder_text": "return arr #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  الگوریتم quickSort را با این تفاوت که در هر مرحله عنصری که به عنوان pivot انتخاب می شود به صورت رندم انتخاب شود پیاده سازی کنید.\n  \u003cbr\u003e\n  سپس با استفاده از زمان سیستم ، به صورت local زمان مرتب کردن را با quickSort معمولی برای ورودی های بزرگ مقایسه کنید.\n\u003c/p\u003e\n\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 24,
                  "length": 33,
                  "hints": [],
                  "possible_answer": "n \u003d len(arr)\n    gap \u003d n // 2\n    while gap \u003e 0:\n\n        for i in range(gap, n):\n            temp \u003d arr[i]\n\n            j \u003d i\n            while j \u003e\u003d gap and arr[j - gap] \u003e temp:\n                arr[j] \u003d arr[j - gap]\n                j -\u003d gap\n\n            arr[j] \u003d temp\n        gap //\u003d 2\n    return arr",
                  "placeholder_text": "return arr #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\nالگوریتم shell Sort یکی از الگوریتم های قدیمی برای مرتب سازی است که به گونه تعمیم الگوریتم insertion Sort می باشد.\n    \u003cbr\u003e\n    این الگوریتم به این صورت عمل می کند که با تعریف عددی به اسم gap در هر مرحله عناصری که با هم دیگر به اندازه gap فاصله دارند را مرتب می کند(با استفاده از مرتب سازی درجی) و بعد مقدار gap را کاهش می دهد با این روش در هر مرحله داده ها به صورت نسبی مرتب می شوند.\n    \u003cbr\u003e\n    \u003cbr\u003e\n    این الگوریتم را پیاده سازی کنید و در رابطه با بهترین اعداد برای انتخاب gap تحقیق کنید .\n    \u003cbr\u003e\n    \u003cbr\u003e\n    همچنین پیچیدگی زمانی این الگوریتم را با الگوریتم مرتب سازی درجی مقایسه کنید.اگر در هر مرحله به جای الگوریتم مرتب سازی درجی از الگوریتم های دیگری مانند مرتب سازی سریع یا ... استفاده شود پیچیدگی زمانی چه تغییری خواهد کرد؟\n\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q5",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 22,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "a \u003d [0] * (n + 1)\n    for i in arr: a[i] \u003d a[i - 1] + 1\n    return n - max(a)",
                  "placeholder_text": "return -1 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  در الگوریتم مرتب سازی ((من)) ! در هر مرحله می توانیم یک عنصر را انتخاب کنیم و آن از جایگاهش حذف کنیم و به آخر و یا اول آرایه انتقال دهیم و با شیفت دادن جایگاه ها را پر کنیم.\n  \u003cbr\u003e\n  حالا با الگوریتمی از مرتبه خطی ، کمترین تعداد مورد نیاز این انتقال را برای مرتب کردن این عناصر به صورت صعودی بیابید.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q6",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 27,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "arr.sort()\n    c \u003d 0\n    d \u003d 0\n    s \u003d sum(arr)\n    for i in range(n):\n        if (arr[i] \u003e d):\n            d +\u003d 1\n    #c +\u003d (arr[n - 1] - d)\n    return s - arr[n - 1] - n + d",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  به شما دو عدد  n , m داده می شود که n تعداد اعضای آرایه و m کران بالایی برای اعضا است.\n  \u003cbr\u003e\n  این n عنصر را به صورت stack کنار هم می چینیم(که ارتفاع stack شماره i برابر با ai است یعنی از ai تا block تشکیل شده)\n  \u003cbr\u003e\n  ماکسیمم تعداد block هایی که می توان برداشت بدون اینکه تصویر از بالا و راست این stack ها تغییر کند چقدر است ؟ (فرض کنید با برداشتن یک بلاک، بلاک های دیگر که روی آن هستند نمی افتند.)\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q7",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 27,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "odd \u003d 0\n    even \u003d 0\n    cuts \u003d []\n    for i in range(n - 1):\n        if (arr[i] % 2 !\u003d 0):\n            odd \u003d odd + 1\n        else:\n            even \u003d even + 1\n        if (odd \u003d\u003d even):\n            cuts.append(abs(arr[i + 1] - arr[i]))\n    cuts.sort()\n    ans \u003d 0\n    sum \u003d 0\n    for i in cuts:\n        if (sum + i \u003c\u003d b):\n            sum \u003d sum + i\n            ans \u003d ans + 1\n    return ans",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "# TODO: type solution here\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  به شما یک آرایه n عضوی داده می شود که تعداد عناصر زوج آن با فرد آن برابر است.\n  \u003cbr\u003e\n    می توانید آرایه را از بین دو عنصر x و y با هزینه قدر مطلق x - y برش بزنید به شرطی که تعداد عناصر زوج و فرد در هر کدام از برش ها با یکدیگر برابر باشند.\n  \u003cbr\u003e\u003cbr\u003e\n  حداکثر تعداد برش هایی را بیابید که هزینه برش ها از مقدار b داده شده بیشتر نباشد.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Comparison of Sorting Algorithms",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 20,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "global t\n    if k % 2 \u003d\u003d 0:\n        return -1\n    t \u003d k\n    t -\u003d 1\n    a \u003d [i + 1 for i in range(n)]\n\n    def sl(l, r):\n        global t\n        if r - l \u003c 2 or t \u003d\u003d 0:\n            return\n        t -\u003d 2\n        m \u003d (l + r) // 2\n        a[m], a[m - 1] \u003d a[m - 1], a[m]\n        sl(l, m)\n        sl(m, r)\n\n    sl(0, n)\n    if t !\u003d 0:\n        return -1\n    return a",
                  "placeholder_text": "return -1 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def func(n, k):\n    return -1 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        (3, 3, [2, 1, 3]),\n        (4, 1, [1, 2, 3, 4]),\n        (5, 6, -1),\n        (100, 100, -1),\n        (10, 17, [3, 1, 4, 6, 2, 8, 5, 9, 7, 10]),\n        (20, 15, [3, 1, 4, 6, 2, 5, 8, 7, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20]),\n        (30, 17,\n         [2, 4, 1, 6, 3, 8, 5, 7, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n          30]),\n        (80, 25,\n         [3, 1, 4, 6, 2, 8, 5, 9, 11, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n          31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n          58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]),\n        (120, 66, -1)\n\n    ]\n    for test in tests:\n        test_function(test[-1], func, test[0], test[1])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  الگوریتم mergeSort یکی از روش های مرتب کردن چند عنصر است.تابعی که عناصر آرایه a را مرتب می کند می تواند به روش زیر پیاده سازی شود:\n  \u003cbr\u003e\n  1-اگر بازه (l , r] به صورت صعودی مرتب شده بود کار تابع تمام می شود\n  \u003cbr\u003e\n  2- در غیر این صورت mid برابر جزء صحیح 2 / (l + r) می شود .\n  \u003cbr\u003e\n  3-تابع (mergeSort(a , l , mid صدا زده می شود\n  \u003cbr\u003e\n  4-تابع (mergeSort(a , mid , r صدا زده می شود\n  \u003cbr\u003e\n  5- در این مرحله بخش های (l , mid] و (mid , r] با هم دیگر merge می شوند\n  \u003cbr\u003e\n  در سوال آرایه a از اندیس 0 شروع می شود\n  \u003cbr\u003e\n  حال یکی از بچه ها این برنامه را طوری پیاده سازی کرده که تعداد دفعاتی که تابع mergeSort صدا زده می شود را می شمارد.مثلا اگر آرایه a برابر با {4 , 3 , 2 , 1} باشد این تابع صرفا یک بار صدا زده می شود(تابع (mergeSort(0 , 4) و چون آرایه به صورت صعودی مرتب است کار تابع تمام می شود. و یا مثلا اگر آرایه a برابر با {3 , 1 , 2} باشد 3 بار این تابع صدا زده می شود(ابتدا (mergeSort(0 , 3 صدا زده می شود و مقدار mid برابر با 1 می شود و بعد به ترتیب تابع های (0 , 1)mergeSort و (mergeSort(1 , 3 صدا زده می شوند  و بعد با عمل merge شدن آرایه مرتب می شود.\n  \u003cbr\u003e\n  این فرد برای تست کردن برنامه اش به شما دو عدد n , k را به ترتیب ورودی می دهد و از شما می خواهد که جایگشتی از اعداد 1 تا n به او خروجی بدهید که هنگام مرتب کردن آن دقیقا k بار تابع mergeSort صدا زده شده باشد و در صورت عدم وجود ، 1- خروجی بدهد\n  اگر هم چندین جواب وجود داشت جوابی که از لحاظ دیکشنری زود تر میاید را خروجی بدهید\n\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 40,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "all \u003d []\n    for i in range(n):\n        pos \u003d bisect.bisect(all, array[i])\n        if pos \u003e\u003d len(all):\n            all.append(array[i])\n        else:\n            all[pos] \u003d array[i]\n    return len(all)",
                  "placeholder_text": "return -1 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "import bisect\n\n\ndef func(n, array):\n    return -1 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        (3, [3, 1, 2], 2),\n        (5, [4, 2, 1, 3, 5], 3),\n        (10, [1, 9, 8, 10, 2, 3, 4, 6, 5, 7], 6),\n        (10, [3, 1, 4, 6, 2, 8, 5, 9, 7, 10], 6),\n        (20, [3, 1, 4, 6, 2, 5, 8, 7, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20], 15),\n        (30, [2, 4, 1, 6, 3, 8, 5, 7, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n              30], 25),\n        (80 , [3, 1, 4, 6, 2, 8, 5, 9, 11, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n          31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n          58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80] , 73)\n    ]\n    for test in tests:\n        test_function(test[-1], func, test[0], test[1])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  یکی از دانش جویان درس DS که از سادگی الگوریتم Bubble Sort خسته شده تصمیم دارد با ساختن گرافی با الگوریتم زیر کمی آن را جذاب تر کند.\n\u003cpre\u003e\n  \u003ccode\u003e\n    procedure bubbleSortGraph()\n      - build a graph G with n vertices and 0 edges\n      - repeat\n      - swapped \u003d false\n      - for i \u003d 1 to n - 1 inclusive do:\n          - if a[i] \u003e a[i + 1] then\n            - add an undirected edge in G between a[i] and a[i + 1]\n            - swap( a[i], a[i + 1] )\n            - swapped \u003d true\n          - end if\n      - end for\n      - until not swapped\n       /* repeat the algorithm as long as swapped value is true. */\n    end procedure\n\u003c/code\u003e\n\u003c/pre\u003e\n  حالا او می خواهد ببیند که به ازای آرایه های مختلفی که به تابع او داده می شود ، تعداد مولفه های هم بندی گراف او چند تا است . به او کمک کنید تا جواب را پیدا کند.\n  در ورودی ابتدا تعداد عناصر آرایه می آید و بعد خود آرایه خروجی هم یک عدد است که تعداد مولفه های هم بندی را نشان می دهد\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 70,
                  "length": 33,
                  "hints": [],
                  "possible_answer": "#start \u003d timeit.default_timer()\n    if fst \u003e\u003d lst: return\n\n    i, j \u003d fst, lst\n    pivot \u003d arr[random.randint(fst, lst)]\n\n    while i \u003c\u003d j:\n        while arr[i] \u003c pivot: i +\u003d 1\n        while arr[j] \u003e pivot: j -\u003d 1\n        if i \u003c\u003d j:\n            arr[i], arr[j] \u003d arr[j], arr[i]\n            i, j \u003d i + 1, j - 1\n    qSortRandomPivot(arr, fst, j)\n    qSortRandomPivot(arr, i, lst)\n    #end \u003d timeit.default_timer()\n    #print(\u0027qSort Random Pivot Time: \u0027 , end - start)\n    return arr",
                  "placeholder_text": "return arr #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "import random\nimport timeit\n\ndef qSortRandomPivot(arr, fst, lst):\n    return arr #Complete the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from task import qSortRandomPivot\nfrom test_helper import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        ([3, 1, 2], 0, 2, [1, 2, 3]),\n        ([3, 1, 4, 6, 2, 8, 5, 9, 11, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n          31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n          58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80] , 0 , 79 , [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])\n    ]\n    for test in tests:\n        test_function(test[-1], qSortRandomPivot, test[0], test[1], test[2])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  الگوریتم quickSort را با این تفاوت که در هر مرحله عنصری که به عنوان pivot انتخاب می شود به صورت رندم انتخاب شود پیاده سازی کنید.\n  \u003cbr\u003e\n  سپس با استفاده از زمان سیستم ، به صورت local زمان مرتب کردن را با quickSort معمولی برای ورودی های بزرگ مقایسه کنید.\n\u003c/p\u003e\n\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 24,
                  "length": 33,
                  "hints": [],
                  "possible_answer": "n \u003d len(arr)\n    gap \u003d n // 2\n    while gap \u003e 0:\n\n        for i in range(gap, n):\n            temp \u003d arr[i]\n\n            j \u003d i\n            while j \u003e\u003d gap and arr[j - gap] \u003e temp:\n                arr[j] \u003d arr[j - gap]\n                j -\u003d gap\n\n            arr[j] \u003d temp\n        gap //\u003d 2\n    return arr",
                  "placeholder_text": "return arr #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def shellSort(arr):\n    return arr #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        ([3, 1, 2],[1, 2, 3]),\n        ([3, 1, 4, 6, 2, 8, 5, 9, 11, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n          31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n          58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80] ,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])\n    ]\n    for test in tests:\n        test_function(test[-1], shellSort, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\nالگوریتم shell Sort یکی از الگوریتم های قدیمی برای مرتب سازی است که به گونه تعمیم الگوریتم insertion Sort می باشد.\n    \u003cbr\u003e\n    این الگوریتم به این صورت عمل می کند که با تعریف عددی به اسم gap در هر مرحله عناصری که با هم دیگر به اندازه gap فاصله دارند را مرتب می کند(با استفاده از مرتب سازی درجی) و بعد مقدار gap را کاهش می دهد با این روش در هر مرحله داده ها به صورت نسبی مرتب می شوند.\n    \u003cbr\u003e\n    \u003cbr\u003e\n    این الگوریتم را پیاده سازی کنید و در رابطه با بهترین اعداد برای انتخاب gap تحقیق کنید .\n    \u003cbr\u003e\n    \u003cbr\u003e\n    همچنین پیچیدگی زمانی این الگوریتم را با الگوریتم مرتب سازی درجی مقایسه کنید.اگر در هر مرحله به جای الگوریتم مرتب سازی درجی از الگوریتم های دیگری مانند مرتب سازی سریع یا ... استفاده شود پیچیدگی زمانی چه تغییری خواهد کرد؟\n\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q5",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 22,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "a \u003d [0] * (n + 1)\n    for i in arr: a[i] \u003d a[i - 1] + 1\n    return n - max(a)",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def func(n, arr):\n    return 0 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        (3, [3, 1, 2], 1),\n        (80, [3, 1, 4, 6, 2, 8, 5, 9, 11, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n          31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n          58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], 40),\n        (5 , [4 ,1 , 2 , 5 , 3] , 2),\n        (4 , [4 , 1 , 3, 2] , 2),\n        (1 , [1] , 0),\n        (2 , [2 , 1] , 1),\n        (6 , [5 ,3 , 6 , 4, 1 ,2]  , 4),\n        (7 , [1 , 2 , 3 , 6, 7 , 4 , 5] , 2),\n        (8 , [6 , 2 , 1 , 8 , 5 ,7 , 3 , 4] , 5),\n        (9 , [1 , 6 , 4 , 5 , 9 ,8 , 7, 3 , 2] , 7),\n        (10 , [5 , 1 ,6 , 2, 8 , 3 , 4 , 10 , 9 , 7] , 6)\n\n    ]\n    for test in tests:\n        test_function(test[-1], func, test[0], test[1])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  در الگوریتم مرتب سازی ((من)) ! در هر مرحله می توانیم یک عنصر را انتخاب کنیم و آن از جایگاهش حذف کنیم و به آخر و یا اول آرایه انتقال دهیم و با شیفت دادن جایگاه ها را پر کنیم.\n  \u003cbr\u003e\n  حالا با الگوریتمی از مرتبه خطی ، کمترین تعداد مورد نیاز این انتقال را برای مرتب کردن این عناصر به صورت صعودی بیابید.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q6",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 27,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "arr.sort()\n    c \u003d 0\n    d \u003d 0\n    s \u003d sum(arr)\n    for i in range(n):\n        if (arr[i] \u003e d):\n            d +\u003d 1\n    #c +\u003d (arr[n - 1] - d)\n    return s - arr[n - 1] - n + d",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def func(n , m , arr):\n    return 0 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        (5, 6, [3, 3, 3, 3, 3], 10),\n        (3, 5, [1, 2, 4], 3),\n        (10, 17, [12, 16, 6, 9, 12, 6, 12, 1, 12, 13], 83),\n        (24, 1, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0),\n        (21, 19, [19, 13, 2, 16, 8, 15, 14, 15, 7, 8, 3, 17, 11, 6, 1, 18, 16, 6, 2, 15, 5], 196),\n        (6, 6, [2, 2, 4, 4, 6, 6], 18),\n        (2, 1000, [1, 1000], 1)\n    ]\n    for test in tests:\n        test_function(test[-1], func, test[0], test[1], test[2])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  به شما دو عدد  n , m داده می شود که n تعداد اعضای آرایه و m کران بالایی برای اعضا است.\n  \u003cbr\u003e\n  این n عنصر را به صورت stack کنار هم می چینیم(که ارتفاع stack شماره i برابر با ai است یعنی از ai تا block تشکیل شده)\n  \u003cbr\u003e\n  ماکسیمم تعداد block هایی که می توان برداشت بدون اینکه تصویر از بالا و راست این stack ها تغییر کند چقدر است ؟ (فرض کنید با برداشتن یک بلاک، بلاک های دیگر که روی آن هستند نمی افتند.)\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q7",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 27,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "odd \u003d 0\n    even \u003d 0\n    cuts \u003d []\n    for i in range(n - 1):\n        if (arr[i] % 2 !\u003d 0):\n            odd \u003d odd + 1\n        else:\n            even \u003d even + 1\n        if (odd \u003d\u003d even):\n            cuts.append(abs(arr[i + 1] - arr[i]))\n    cuts.sort()\n    ans \u003d 0\n    sum \u003d 0\n    for i in cuts:\n        if (sum + i \u003c\u003d b):\n            sum \u003d sum + i\n            ans \u003d ans + 1\n    return ans",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def func(n , b , arr):\n    return 0 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        (5, 6, [1, 2, 5, 10, 15, 20], 1),\n        (4, 10, [1, 3, 2, 4], 0),\n        (10, 100, [94, 65, 24, 47, 29, 98, 20, 65, 6, 17], 2)\n    ]\n    for test in tests:\n        test_function(test[-1], func, test[0], test[1], test[2])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp style\u003d\"direction : rtl;\"\u003e\n  به شما یک آرایه n عضوی داده می شود که تعداد عناصر زوج آن با فرد آن برابر است.\n  \u003cbr\u003e\n    می توانید آرایه را از بین دو عنصر x و y با هزینه قدر مطلق x - y برش بزنید به شرطی که تعداد عناصر زوج و فرد در هر کدام از برش ها با یکدیگر برابر باشند.\n  \u003cbr\u003e\u003cbr\u003e\n  حداکثر تعداد برش هایی را بیابید که هزینه برش ها از مقدار b داده شده بیشتر نباشد.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Basic Data Structures",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 40,
                  "length": 35,
                  "hints": [],
                  "possible_answer": "stack \u003d []\n    output_queue_needed_height \u003d 1\n    while len(input_queue) \u003e 0 or len(stack) \u003e 0:\n        if len(stack) \u003d\u003d 0 or (len(input_queue) \u003e 0 and input_queue[0] \u003c stack[-1]):\n            stack.append(input_queue.pop(0))\n        elif stack[-1] \u003d\u003d output_queue_needed_height:\n            stack.pop()\n            output_queue_needed_height +\u003d 1\n        else:\n            return False\n    return True",
                  "placeholder_text": "return False #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def can_sort_by_stack(input_queue):\n    return False #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\r\nfrom task import *\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    tests \u003d [\r\n        ([1, 2, 3], True),\r\n        ([3, 2, 1], True),\r\n        ([2, 3, 1], False),\r\n        ([3, 1, 2], True),\r\n        ([1, 10, 5, 6, 4, 9, 8, 7, 3, 2], False),\r\n        ([6, 5, 1, 2, 4, 3], True)\r\n    ]\r\n    for test in tests:\r\n        test_function(test[-1], can_sort_by_stack, test[0])\r\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\nپیش‌نیاز: \u003cbr\u003e\nآشنایی با داده‌ساختار پشته\n\u003cbr\u003e\n\u003cbr\u003e\nتعدادی انسان با قدهای گوناگون در یک صف ایستاده‌اند. می‌خواهیم ببینیم آیا می‌توانیم به کمک یک پشته آنها را به یک صف دیگر منتقل کنیم به طوری که به ترتیب صعودی قد بایستند.\n\u003cbr\u003e\nعملیات ممکن عبارتند از: 1- قرار دادن نفر اول صف اول در بالای پشته 2- قرار دادن نفر بالای پشته در انتهای صف دوم.\n\u003cbr\u003e\nدر ابتدا پشته و صف دوم خالی هستند.\n\u003cbr\u003e\nاگر تعداد افراد صف اول n باشد، قد آنها جایگشتی از 1 تا n است.\n\u003cbr\u003e\nانتظار  می‌رود پیچیدگی تابع شما از (O(n باشد.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cb\u003eورودی\u003c/b\u003e\n\u003cbr\u003e\nصف اول در قالب یک لیست\n\u003cbr\u003e\n\u003cb\u003eخروجی\u003c/b\u003e\n\u003cbr\u003e\nامکان مرتب‌سازی افراد صف اول در صف دوم به صورت True یا False.\n\u003cbr\u003e\n\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 31,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "queue \u003d []\n    ans \u003d []\n    for i in range(len(A)):\n        if A[i] \u003c 0:\n            queue.append(i)\n        if i \u003e\u003d k-1:\n            if len(queue) and i - queue[0] \u003e\u003d k:\n                queue.pop(0)\n            ans.append(A[queue[0]] if len(queue) else 0)\n    return ans",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def first_negatives(A, k):\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        ([5, -4, -6, 3, -2, 4, 8, 12], 3, [-4, -4, -6, -2, -2, 0]),\n        ([-1, -2, 4, -5, -1, -3], 6, [-1]),\n        ([-1, -2, -3, -5, -1, -3], 1, [-1, -2, -3, -5, -1, -3]),\n        ([2, -9, 8, 1, 0, 0, 1, -2, 5, 5, 4, -7, 10, -1, -2, -1, -7, -7, -3, 5, 5, 2, 2, 2, -8, 5, -7, -5, -1, 3, 8, 7,\n          -7, 4, -9, 0, 9, 5, -2, 7, -9, 4, 6, 5, 9, 9, 1, 6, -2, -5, 4, 10, 4, 2, 2, 10, 8, 10, 6, -3, -4, -4, -4, -5,\n          -2, -5, 2, -1, -7, 4, -4, 5, -10, 8, -7, 0, -4, 2, -7, 10, 7, 2, -3, 8, -1, 4, 1, 4, -9, 10, 8, 6, 5, 5, 3,\n          -6, 5, 8, -6, 4], 4,\n         [-9, -9, 0, 0, -2, -2, -2, -2, -7, -7, -7, -7, -1, -1, -2, -1, -7, -7, -3, 0, 0, -8, -8, -8, -8, -7, -7, -5,\n          -1, -7, -7, -7, -7, -9, -9, -2, -2, -2, -2, -9, -9, 0, 0, 0, 0, -2, -2, -2, -2, -5, 0, 0, 0, 0, 0, 0, -3, -3,\n          -3, -3, -4, -4, -4, -5, -2, -5, -1, -1, -7, -4, -4, -10, -10, -7, -7, -4, -4, -7, -7, -3, -3, -3, -3, -1, -1,\n          -9, -9, -9, -9, 0, 0, 0, -6, -6, -6, -6, -6])\n\n    ]\n    for test in tests:\n        test_function(test[-1], first_negatives, test[0], test[1])\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\nپیش‌نیاز: \u003cbr\u003e\nآشنایی با داده‌ساختار صف\n\u003cbr\u003e\n\u003cbr\u003e\nاولین عدد منفی در هر k عضو متوالی آرایه A را بیابید.\n\u003cbr\u003e\nانتظار  می‌رود پیچیدگی تابع شما از (O(n باشد و و فقط یکبار از روی اعضای A گذر کنید.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cb\u003eورودی\u003c/b\u003e\n\u003cbr\u003e\nآرایه A و عدد k\n\u003cbr\u003e\n\u003cb\u003eخروجی\u003c/b\u003e\n\u003cbr\u003e\nیک آرایه به اندازه len(A)-k+1 که عضو iام آن، اولین عدد منفی در بازه بین عضو i ام و عضو i+k-1 آرایه A است (اگر عدد منفی در این بازه نبود عضو iام برابر 0 است).\n\u003cbr\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n اندیس اعداد منفی در k عضو پیشین را در یک صف نگهداری کنید.\n\u003c/div\u003e\n\u003c/html\u003e",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 40,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "if node1.prev \u003d\u003d node2:\n        node1, node2 \u003d node2, node1\n    if node1.prev:\n        node1.prev.next \u003d node2\n    if node1.next and node1.next !\u003d node2:\n        node1.next.prev \u003d node2\n    if node2.next:\n        node2.next.prev \u003d node1\n    if node2.prev and node2.prev !\u003d node1:\n        node2.prev.next \u003d node1\n    node1.next, node2.next \u003d node2.next, (node1.next if node1.next !\u003d node2 else node1)\n    node1.prev, node2.prev \u003d (node2.prev if node2.prev !\u003d node1 else node2), node1.prev",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def linked_list_swap(node1, node2):\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\r\nfrom task import *\r\nimport random\r\n\r\n\r\nclass Node:\r\n    def __init__(self, data, next_node\u003dNone, prev_node\u003dNone):\r\n        self.data \u003d data\r\n        self.next \u003d next_node\r\n        self.prev \u003d prev_node\r\n\r\n\r\ndef check_swap(array_list, i, j):\r\n    print(i, j)\r\n    linked_list_swap(array_list[i], array_list[j])\r\n    array_list[i], array_list[j] \u003d array_list[j], array_list[i]\r\n    error \u003d False\r\n    for k in range(0, len(array_list) - 1):\r\n        if array_list[k].next !\u003d array_list[k + 1] or array_list[-k - 1].prev !\u003d array_list[-k - 2]:\r\n            error \u003d True\r\n    if array_list[0].prev !\u003d None or array_list[-1].next !\u003d None or error:\r\n        if abs(i - j) \u003d\u003d 1:\r\n            failed(\"Wrong linked list. Input is adjacent nodes.\")\r\n        elif i \u003d\u003d 0 or j \u003d\u003d 0 or i \u003d\u003d len(array_list) - 1 or j \u003d\u003d len(array_list) - 1:\r\n            failed(\"Wrong linked list. Input contains head or tail nodes.\")\r\n        else:\r\n            failed(\"Wrong linked list. Input isn\u0027t adjacent or head or tail nodes.\")\r\n\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    prev \u003d Node(random.random())\r\n    array_list \u003d [prev]\r\n    for i in range(1, 100):\r\n        new \u003d Node(random.random())\r\n        new.prev \u003d prev\r\n        prev.next \u003d new\r\n        prev \u003d new\r\n        array_list.append(new)\r\n\r\n    check_swap(array_list, 44, 88)\r\n    check_swap(array_list, 0, 10)\r\n    check_swap(array_list, 99, 5)\r\n    check_swap(array_list, 0, 99)\r\n    check_swap(array_list, 64, 65)\r\n    check_swap(array_list, 9, 8)\r\n    check_swap(array_list, 98, 99)\r\n    check_swap(array_list, 1, 0)\r\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\nپیش‌نیاز: \u003cbr\u003e\nآشنایی با داده‌ساختار لیست پیوندی\n\u003cbr\u003e\n\u003cbr\u003e\nدو node متمایز در یک لیست پیوندی دوسویه را با هم جابه‌جا کنید. توجه داشته باشید که این دو node ممکن است پشت سر هم باشند.\n\u003cbr\u003e\nانتظار می‌رود پیچیدگی تابع شما از (O(1 باشد.\n\u003cbr\u003e\nnodeها به شکل زیر تعریف شده‌اند:\n\u003cpre dir\u003d\"ltr\"\u003e\n\u003ccode\u003e\nclass Node:\n  def __init__(self, data, next_node\u003dNone, prev_node\u003dNone):\n    self.data \u003d data\n    self.next \u003d next_node\n    self.prev \u003d prev_node\n\u003c/code\u003e\n\u003c/pre\u003e\nself.prev برای node ابتدایی و self.next برای node انتهایی برابر None هستند.\n\u003cbr\u003e\n\u003cb\u003eتوجه داشته باشید که برای قبول شدن تابعتان، نباید در آن node جدیدی تعریف کنید یا مقادیر nodeها را تغییر دهید.\u003c/b\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cb\u003eورودی\u003c/b\u003e\n\u003cbr\u003e\nnodeهایی که باید با هم جابه‌جا شوند.\n\u003cbr\u003e\n\u003cb\u003eخروجی\u003c/b\u003e\n\u003cbr\u003e\nندارد.\n\u003cbr\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Tree Storage - Traversal",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 123,
                  "length": 41,
                  "hints": [],
                  "possible_answer": "def mirror(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if root1 is not None and root2 is not None:\n        if root1.value \u003d\u003d root2.value:\n            return (mirror(root1.left, root2.right) and\n                    mirror(root1.right, root2.left))\n    return False",
                  "placeholder_text": "# Maybe want to write another function ?!"
                },
                {
                  "offset": 193,
                  "length": 25,
                  "hints": [],
                  "possible_answer": "return mirror(root, root)",
                  "placeholder_text": "return False #Do the task"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, value):\n        self.value \u003d value\n        self.left \u003d None\n        self.right \u003d None\n\n\n# Maybe want to write another function ?!\n\ndef isSymmetric(root):\n    return False #Do the task\n\n\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    root1 \u003d Node(1)\n    root1.left \u003d Node(2)\n    root1.right \u003d Node(2)\n    root1.left.left \u003d Node(3)\n    root1.left.right \u003d Node(4)\n    root1.right.left \u003d Node(4)\n    root1.right.right \u003d Node(3)\n\n    root2 \u003d Node(3)\n    root2.left \u003d Node(1)\n    root2.right \u003d Node(1)\n    root2.left.left \u003d Node(0)\n    root2.left.right \u003d Node(2)\n    root2.right.left \u003d Node(0)\n    root2.right.right \u003d Node(2)\n\n    root3 \u003d Node(1)\n    root3.left \u003d Node(2)\n    root3.right \u003d Node(2)\n    root3.left.left \u003d Node(3)\n    root3.left.right \u003d Node(4)\n    root3.right.left \u003d Node(4)\n    root3.right.right \u003d Node(3)\n    root3.left.left.left \u003d Node(5)\n    root3.left.left.right \u003d Node(6)\n    root3.left.right.left \u003d Node(7)\n    root3.left.right.right \u003d Node(8)\n    root3.right.left.left \u003d Node(8)\n    root3.right.left.right \u003d Node(7)\n    root3.right.right.left \u003d Node(6)\n    root3.right.right.right \u003d Node(5)\n\n    root4 \u003d Node(1)\n    root4.left \u003d Node(2)\n    root4.right \u003d Node(2)\n    root4.left.left \u003d Node(3)\n    root4.left.right \u003d Node(4)\n    root4.right.left \u003d Node(4)\n    root4.right.right \u003d Node(3)\n    root4.left.left.left \u003d Node(5)\n    root4.left.left.right \u003d Node(6)\n    root4.left.right.left \u003d Node(7)\n    root4.left.right.right \u003d Node(8)\n    root4.right.left.left \u003d Node(8)\n    root4.right.left.right \u003d Node(7)\n    root4.right.right.left \u003d Node(5)\n    root4.right.right.right \u003d Node(6)\n    tests \u003d [\n        (root1, True),\n        (root2, False),\n        (root3, True),\n        (root4, False)\n    ]\n    for test in tests:\n        test_function(test[-1], isSymmetric, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه پیمایش و ذخیره سازی درخت\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    وظیفه اول:\n    \u003cbr\u003e\n    انواع روش‌های ذخیره‌سازی درخت و چند داستان دیگر!\n    \u003cbr\u003e\n    سوال:\n    \u003cbr\u003e\n    تشخیص دهید که برای یک درخت دودویی ورودی که ریشه آن به شما داده شده است، آیا آن درخت ، یک درخت قرینه هست یا نه.\n    \u003cbr\u003e\n    درخت قرینه درختی است که نسبت به خود آیینه است. مثلا درخت زیر یک درخت قرینه است.\n\u003c/p\u003e\n\n\u003cpre\u003e     1\n   /   \\\n  2     2\n / \\   / \\\n3   4 4   3\u003c/pre\u003e\n\n\u003cp dir\u003d\"rtl\"\u003e\n    توضیحات: یک روش ذخیره‌سازی درخت را در دفترچه مربوطه دیدید.(leftchild, rightsibling)\n    .\n\n    حال سعی کنید روش دیگری برای ذخیره‌سازی درخت اتخاذ کنید که در حل سوال انعطاف بیشتری به شما بدهد.(کلا به چند روش میتوان درخت را ذخیره کرد ؟ )\n    \u003cbr\u003e\n    \u003cbr\u003e\n\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\n        یکی از روشهای پر کاربرد ذخیره سازی درخت ها ، استفاده از شی برای هر راس است که آن شی دارای اشاره گر به فرزند چپ و راست خود(در درخت دودویی) می باشد. نقطه قوت این نوع ذخیره سازی، ایجاد امکان فکر کردن به صورت بازگشتی به مسئله می‌ باشد!\n    \u003c/p\u003e\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 123,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "minimum \u003d 0\nmaximum \u003d 0\n\n\ndef find_left_right(node, distance):\n    global minimum, maximum\n    if node is None:\n        return\n    if distance \u003c minimum:\n        minimum \u003d distance\n    elif distance \u003e maximum:\n        maximum \u003d distance\n    find_left_right(node.left, distance - 1)\n    find_left_right(node.right, distance + 1)\n\n\ndef vertical(node, column, distance, list):\n    if node is None:\n        return\n\n    if distance \u003d\u003d column:\n        list[-1].append(node.value)\n\n    vertical(node.left, column, distance - 1, list)\n    vertical(node.right, column, distance + 1, list)\n",
                  "placeholder_text": ""
                },
                {
                  "offset": 154,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "list \u003d []\n    global minimum, maximum\n    find_left_right(root, 0)\n    for column in range(minimum, maximum + 1):\n        list.append([])\n        vertical(root, column, 0, list)\n    return list",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, value):\n        self.value \u003d value\n        self.left \u003d None\n        self.right \u003d None\n\n\n\n\ndef verticalOrder(root):\n    return #Complete the function\n\n\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    root1 \u003d Node(1)\n    root1.left \u003d Node(2)\n    root1.right \u003d Node(3)\n    root1.left.left \u003d Node(4)\n    root1.left.right \u003d Node(5)\n    root1.right.left \u003d Node(6)\n    root1.right.right \u003d Node(7)\n    root1.right.left.right \u003d Node(8)\n    root1.right.right.right \u003d Node(9)\n\n    root2 \u003d Node(3)\n    root2.left \u003d Node(1)\n    root2.right \u003d Node(1)\n    root2.left.left \u003d Node(0)\n    root2.left.right \u003d Node(2)\n    root2.right.left \u003d Node(0)\n    root2.right.right \u003d Node(2)\n\n    root3 \u003d Node(1)\n    root3.left \u003d Node(2)\n    root3.right \u003d Node(2)\n    root3.left.left \u003d Node(3)\n    root3.left.right \u003d Node(4)\n    root3.right.left \u003d Node(4)\n    root3.right.right \u003d Node(3)\n    root3.left.left.left \u003d Node(5)\n    root3.left.left.right \u003d Node(6)\n    root3.left.right.left \u003d Node(7)\n    root3.left.right.right \u003d Node(8)\n    root3.right.left.left \u003d Node(8)\n    root3.right.left.right \u003d Node(7)\n    root3.right.right.left \u003d Node(6)\n    root3.right.right.right \u003d Node(5)\n\n    root4 \u003d Node(1)\n    root4.left \u003d Node(2)\n    root4.right \u003d Node(3)\n    root4.left.left \u003d Node(4)\n    root4.right.right \u003d Node(5)\n    root4.left.left.left \u003d Node(6)\n    root4.right.right.right \u003d Node(7)\n    root4.right.right.right.left \u003d Node(8)\n    root4.right.right.right.left.left \u003d Node(9)\n    root4.right.right.right.left.left.left \u003d Node(10)\n\n    tests \u003d [\n        (root1, [[4], [2], [1, 5, 6], [3, 8], [7], [9]]),\n        (root2, [[0], [1], [3, 2, 0], [1], [2]]),\n        (root3, [[5], [3], [2, 6, 7, 8], [1, 4, 4], [8, 2, 7, 6], [3], [5]]),\n        (root4, [[6], [4], [2], [1, 10], [3, 9], [5, 8], [7]])\n    ]\n    for test in tests:\n        test_function(test[-1], verticalOrder, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه پیمایش و ذخیره سازی درخت\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    وظیفه دوم:\n    \u003cbr\u003e\nپیمایش عمودی درخت !\n    \u003cbr\u003e\n    سوال:\n    \u003cbr\u003e\nبرای یک درخت دودویی که ریشه آن به شما داده شده است، آنرا به صورت عمودی پیمایش کنید.(خروجی به صورت لیستی از لیستها می بایست باشد)\n    \u003cbr\u003e\nبه عنوان مثال برای درخت زیر داریم:\n\u003c/p\u003e\n\u003cpre\u003e           1\n        /    \\\n       2      3\n      / \\    / \\\n     4   5  6   7\n             \\   \\\n              8   9\u003c/pre\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n  که پیمایش عمودی آن به صورت زیر است:\n\u003c/p\u003e\n\u003cpre\u003e[[4], [2], [1, 5, 6], [3, 8], [7], [9]]\n\u003c/pre\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n  توضیحات:\n  \u003cbr\u003e\n  علاوه بر روش های پیمایش معروف و پرکاربردی که دیده اید، روش های پیمایش مختلف و زیادی دیگری برای درخت وجود دارد . تعدادی از معروف ترین آنها عبارتد از: level, spiral, specific, ... که در صورت علاقه می توانید درباره آنها مطالعه کنید.\n\u003c/p\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nعددهایی که در یک ستون قرار می گیرند دارای چه ویژگی مشترکی هستند ؟\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 123,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def buildTree(preorder, inorder):\n    if len(preorder) \u003d\u003d 0:\n        return\n    if len(preorder) \u003d\u003d 1:\n        return Node(preorder[0])\n    root \u003d Node(preorder[0])\n    div \u003d inorder.index(preorder[0])\n    root.left \u003d buildTree(preorder[1:(div + 1)], inorder[0:div])\n    root.right \u003d buildTree(preorder[(div + 1):], inorder[(div + 1):])\n    return root\n\n\ndef postorder_traversal(root, list):\n    if root:\n        if root.left:\n            postorder_traversal(root.left, list)\n        if root.right:\n            postorder_traversal(root.right, list)\n        list.append(root.value)\n        return list",
                  "placeholder_text": ""
                },
                {
                  "offset": 170,
                  "length": 35,
                  "hints": [],
                  "possible_answer": "root \u003d buildTree(preorder, inorder)\n    root_postorder \u003d postorder_traversal(root, [])\n    if postorder \u003d\u003d root_postorder:\n        return True\n    return False",
                  "placeholder_text": "return False #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, value):\n        self.value \u003d value\n        self.left \u003d None\n        self.right \u003d None\n\n\n\n\ndef check(preorder, inorder, postorder):\n    return False #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n\n    tests \u003d [\n        ([1, 2, 4, 5, 3], [4, 2, 5, 1, 3], [4, 5, 2, 3, 1], True),\n        ([25,15,10,4,12,22,18,24,50,35,31,44,70,66,90], [4,10,12,15,18,22,24,25,31,35,44,50,66,70,90], [4,12,10,18,24,22,15,31,44,35,66,90,70,50,25], True),\n        ([2,7,3,6,8,11,5,9,4], [3,7,8,6,11,2,5,4,9], [3,8,11,7,6,4,9,5,2], False),\n        ([8,5,9,7,1,12,2,4,11,3], [9,5,1,7,2,12,8,4,3,11], [9,1,2,12,7,5,11,3,4,8], False)\n    ]\n    for test in tests:\n        test_function(test[-1], check, test[0], test[1], test[2])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه پیمایش و ذخیره سازی درخت\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    وظیفه سوم:\n    \u003cbr\u003e\nیکی بودن یا نبودن، مسئله این است!\n    \u003cbr\u003e\n    سوال:\n    \u003cbr\u003e\nبه شما ۳ آرایه از اعداد داده شده است که نشان دهنده پیمایش های پیش ترتیب ، میان ترتیب و پس ترتیب می باشند. بررسی کنید که آیا این ۳ پیمایش ، پیمایش مربوط به یک درخت یکسان بوده اند یا نه! (درخت ها دودویی هستند)\n    \u003c/p\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 177,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def postorder_traversal(root, list):\n    if root:\n        if root.city1:\n            postorder_traversal(root.city1, list)\n        if root.city2:\n            postorder_traversal(root.city2, list)\n        if root.city1 and root.city2:\n            root.max_depth \u003d max(root.city1.max_depth, root.city2.max_depth) + 1\n            root.answer \u003d root.city1.max_depth + root.city2.max_depth + 1\n        elif root.city1:\n            root.max_depth \u003d root.city1.max_depth + 1\n            root.answer \u003d root.city1.max_depth + 1\n        elif root.city2:\n            root.max_depth \u003d root.city2.max_depth + 1\n            root.answer \u003d root.city2.max_depth + 1\n        else:\n            pass\n        list.append(root.answer)\n        return list\n",
                  "placeholder_text": ""
                },
                {
                  "offset": 200,
                  "length": 31,
                  "hints": [],
                  "possible_answer": "temp \u003d postorder_traversal(root, [])\n    return max(temp)",
                  "placeholder_text": "return 0 #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, name):\n        self.city_name \u003d name\n        self.city1 \u003d None\n        self.city2 \u003d None\n        self.max_depth \u003d 1\n        self.answer \u003d 0\n\n\n\n\ndef solve(root):\n    return 0 #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    root1 \u003d Node(1)\n    root1.city1 \u003d Node(2)\n    root1.city2 \u003d Node(3)\n    root1.city1.city1 \u003d Node(4)\n    root1.city1.city2 \u003d Node(5)\n    root1.city2.city1 \u003d Node(6)\n    root1.city2.city2 \u003d Node(7)\n    root1.city2.city1.city2 \u003d Node(8)\n    root1.city2.city2.city2 \u003d Node(9)\n\n    root2 \u003d Node(3)\n    root2.city1 \u003d Node(1)\n    root2.city2 \u003d Node(1)\n    root2.city1.city1 \u003d Node(0)\n    root2.city1.city2 \u003d Node(2)\n    root2.city2.city1 \u003d Node(0)\n    root2.city2.city2 \u003d Node(2)\n\n    root3 \u003d Node(1)\n    root3.city1 \u003d Node(2)\n    root3.city2 \u003d Node(2)\n    root3.city1.city1 \u003d Node(3)\n    root3.city1.city2 \u003d Node(4)\n    root3.city2.city1 \u003d Node(4)\n    root3.city2.city2 \u003d Node(3)\n    root3.city1.city1.city1 \u003d Node(5)\n    root3.city1.city1.city2 \u003d Node(6)\n    root3.city1.city2.city1 \u003d Node(7)\n    root3.city1.city2.city2 \u003d Node(8)\n    root3.city2.city1.city1 \u003d Node(8)\n    root3.city2.city1.city2 \u003d Node(7)\n    root3.city2.city2.city1 \u003d Node(6)\n    root3.city2.city2.city2 \u003d Node(5)\n\n    root4 \u003d Node(1)\n    root4.city1 \u003d Node(2)\n    root4.city2 \u003d Node(3)\n    root4.city1.city1 \u003d Node(4)\n    root4.city2.city2 \u003d Node(5)\n    root4.city1.city1.city1 \u003d Node(6)\n    root4.city2.city2.city2 \u003d Node(7)\n    root4.city2.city2.city2.city1 \u003d Node(8)\n    root4.city2.city2.city2.city1.city1 \u003d Node(9)\n    root4.city2.city2.city2.city1.city1.city1 \u003d Node(10)\n\n    root5 \u003d Node(1)\n    root5.city1 \u003d Node(2)\n    root5.city2 \u003d Node(3)\n    root5.city1.city1 \u003d Node(4)\n    root5.city1.city2 \u003d Node(5)\n    root5.city1.city1.city1 \u003d Node(6)\n    root5.city1.city1.city1.city1 \u003d Node(8)\n    root5.city1.city2.city1 \u003d Node(7)\n    root5.city1.city2.city1.city1 \u003d Node(9)\n\n    tests \u003d [\n        (root1, 6),\n        (root2, 5),\n        (root3, 7),\n        (root4, 10),\n        (root5, 7)\n    ]\n    for test in tests:\n        test_function(test[-1], solve, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه پیمایش و ذخیره سازی درخت\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    وظیفه چهارم:\n    \u003cbr\u003e\n\u003cstrong\u003eاز جدایی ها حکایت می کند!\u003c/strong\u003e\n    \u003cbr\u003e\n    سوال:\n    \u003cbr\u003e\n  اکبر دو دوست با نام های مستعار اصغر و احمد دارد که همگی در شهر پشمکستان زندگی می کنند.شهر پشمکستان ، به علت مشکلات عدیده تنها دو جاده به شهرهای دیگر دارد. هر یک از شهرهای دیگر نیز علاوه بر جاده به شهر قبلی، نهایتا ۲ جاده به شهرهای دیگر می توانند داشته باشد.\n  \u003cbr\u003e\n  بعد از برگزاری فینال اخیر جام باشگاه های اروپا و خطای جنجالی سرخیو راموس روی محمد صلاح، دعوای شدیدی میان اصغر و احمد رخ داده است و هر لحظه ممکن است کار به مراحل باریک تری برسد!\n  \u003cbr\u003e\n  حال اکبر به عنوان یک دوست خوب می خواهد برای مدتی اصغر و احمد را از یکدیگر دور کند تا دوستی آنها پابرجا بماند.\n  \u003cbr\u003e\n  به اکبر کمک کنید که فاصله دورترین دو شهر را در زمان\n  \u003cstrong\u003eخطی\u003c/strong\u003e\n    \u003cspan dir\u003d\"ltr\"\u003eO(n)\u003c/span\u003e\n   پیدا کند. فاصله دو شهر بر اساس تعداد شهرهای میان آن دو شهر(به علاوه خودشان) تعریف می شود.\n\u003c/p\u003e\n\n\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nیک راه حل در زمان خطی خواسته شده است. پس احتمالا حق نداریم بیشتر از یکبار هر شهر را نگاه کنیم. نه ؟\n    \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nبازگشتی فکر کنید!\n    \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nسوال در مبحث پیمایش درخت است. به انواع پیمایش ها فکر کنید و اینکه اینجا کدام یک گره از مشکل ما باز می کند .\n    \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nدر حل سوال پیمایشی بدرد بخور است که از ریشه شروع به حل مسئله می کند یا از برگ ها ؟\n    \u003c/p\u003e\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "BST",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 150,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "if data \u003e root.value:\n        if root.right:\n            insert(root.right, data)\n        else:\n            root.right \u003d Node(data)\n    if data \u003c root.value:\n        if root.left:\n            insert(root.left, data)\n        else:\n            root.left \u003d Node(data)",
                  "placeholder_text": "#Complete the function"
                },
                {
                  "offset": 288,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "if root:\n        # First call on left child\n        inordertraversal(root.left, inorder)\n\n        # then print the data of node\n        inorder.append(root.value)\n\n        # now recur on right child\n        inordertraversal(root.right, inorder)",
                  "placeholder_text": "#Complete the function"
                }
              ],
              "is_visible": true,
              "text": "\nclass Node:\n    def __init__(self, value):\n        self.left \u003d None\n        self.right \u003d None\n        self.value \u003d value\n\ndef insert(root,data):\n    #Complete the function\n\n#inorder is an array which we want to store the inorder traversal in it.\ndef inordertraversal(root, inorder):\n    #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\n\n#intersection in O(m + n)\n# m is size of arr1, n is size of array2\nfinalarray \u003d []\ndef printIntersection(arr1, arr2, m, n):\n    i, j \u003d 0, 0\n    while i \u003c m and j \u003c n:\n        i, j \u003d 0, 0\n        while i \u003c m and j \u003c n:\n            if arr1[i] \u003c arr2[j]:\n                i +\u003d 1\n            elif arr2[j] \u003c arr1[i]:\n                j +\u003d 1\n            else:\n                # common element.\n                finalarray.append(arr2[j])\n                j +\u003d 1\n                i +\u003d 1\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    mainroot \u003d Node(5)\n    insert(mainroot,1)\n    insert(mainroot,3)\n    insert(mainroot,6)\n    insert(mainroot,8)\n    insert(mainroot,7)\n    insert(mainroot, 4)\n\n    mainroot2 \u003d Node(10)\n    insert(mainroot2, 11)\n    insert(mainroot2, 4)\n    insert(mainroot2, 6)\n    insert(mainroot2, 7)\n    insert(mainroot2, 14)\n    insert(mainroot2, 9)\n\n    inorder1 \u003d []\n    inorder2 \u003d []\n    inordertraversal(mainroot, inorder1)\n    inordertraversal(mainroot2, inorder2)\n\n    m \u003d len(inorder1)\n    n \u003d len(inorder2)\n    printIntersection(inorder1, inorder2, m, n)\n\n    for i in [4,6,7]:\n        if i not in finalarray:\n            failed(\"try again\")\n\n\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه BST را مطالعه کنید.\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\nدو درخت جست و جوی دودویی  به عنوان ورودی داده شده اند.\nعناصر مشترک این دو درخت را با الگوریتمی در زمان خطی چاپ کنید.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 36,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "nextDiff \u003d 0\n    #next node in preorder - next next node\n    lastDiff \u003d 0\n    #next node in preorder - last node in preorder.\n\n\n    for i in range(size - 1):\n        nextDiff \u003d pre[i] - pre[i + 1]\n        lastDiff \u003d pre[i] - pre[size - 1]\n        if nextDiff * lastDiff \u003c 0:\n            return False\n    return True",
                  "placeholder_text": "#Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def hasOnlyOneChild(pre, size):\n    #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import*\n\n\nif __name__ \u003d\u003d \"__main__\":\n\n    pre \u003d [8, 3, 5, 7, 6]\n    size \u003d len(pre)\n\n    if (hasOnlyOneChild(pre, size) \u003d\u003d False):\n        failed(\"please try again\")\n\n\n\n    pre \u003d [11, 10, 6, 8, 3]\n    size \u003d len(pre)\n    if (hasOnlyOneChild(pre, size) \u003d\u003d True):\n        failed(\"please try again\")\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir \u003d\"rtl\"\u003e\nپیمایش پیشوندی یک درخت جست و جوی دودویی داده شده است. بررسی کنید که آیا هر راس داخلی دقیقا یک فرزند دارد یا خیر.\n\u003cbr\u003e\n\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 123,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "prev \u003d None",
                  "placeholder_text": ""
                },
                {
                  "offset": 146,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "global prev\n    prev \u003d None\n    return isbst_mainfunc(root)",
                  "placeholder_text": "#Complete the function"
                },
                {
                  "offset": 170,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def isbst_mainfunc(root):\n    #using inorder travers\n    global prev\n\n    if root is None:\n        return True\n\n    if isbst_mainfunc(root.left) is False:\n        return False\n\n    if prev is not None and prev.value \u003e root.value:\n        return False\n\n    prev \u003d root\n    return isbst_mainfunc(root.right)\n",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, value):\n        self.value \u003d value\n        self.left \u003d None\n        self.right \u003d None\n\n\n\n\ndef isbst(root):\n    #Complete the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n\n    root \u003d Node(10)\n    root.left \u003d Node(6)\n    root.right \u003d Node(14)\n    root.left.left \u003d Node(3)\n    root.left.right \u003d Node(8)\n    root.right.left \u003d Node(12)\n    root.right.right \u003d Node(1)\n\n    if isbst(root):\n        failed(\"please try again. 1\")\n\n    root \u003d Node(10)\n    root.left \u003d Node(6)\n    root.right \u003d Node(14)\n    root.left.left \u003d Node(3)\n    root.left.right \u003d Node(8)\n    root.right.left \u003d Node(12)\n    root.right.right \u003d Node(16)\n    if  isbst(root) is False:\n        failed(\"please try again. 2\")\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir \u003d\"rtl\"\u003e\nیک درخت به عنوان ورودی داده شده است. بررسی کنید که آیا این یک درخت جست و جوی دودویی است یا خیر.\n\u003cbr\u003e\n    پیچیدگی زمانی:\n\u003c/p\u003e\nO(n)\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Trie",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 128,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def insert(root, a):\n    current_node \u003d root\n    b \u003d []\n    i \u003d 64\n    while i \u003e 0:\n        b.append(a%2)\n        a \u003d a//2\n        i -\u003d 1\n\n    b.reverse()\n    for bit in b:\n        if bit \u003d\u003d 0:\n            if current_node.zero \u003d\u003d None:\n                current_node.zero \u003d Node(0)\n                current_node \u003d current_node.zero\n            else:\n                current_node \u003d current_node.zero\n        else:\n            if current_node.one \u003d\u003d None:\n                current_node.one \u003d Node(0)\n                current_node \u003d current_node.one\n            else:\n                current_node \u003d current_node.one\n    current_node.cnt +\u003d 1",
                  "placeholder_text": ""
                },
                {
                  "offset": 130,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def find_max_xor(root, a):\n    current_node \u003d root\n    b \u003d []\n    i \u003d 64\n    while i \u003e 0:\n        b.append(a%2)\n        a //\u003d 2\n        i -\u003d 1\n    b.reverse()\n    ans \u003d 0\n    for bit in b:\n        if bit \u003d\u003d 0:\n            if current_node.one \u003d\u003d None:\n                current_node \u003d current_node.zero\n                ans \u003d ans*2\n            else:\n                current_node \u003d current_node.one\n                ans \u003d ans*2 + 1\n        else:\n            if current_node.zero \u003d\u003d None:\n                current_node \u003d current_node.one\n                ans \u003d ans*2\n            else:\n                current_node \u003d current_node.zero\n                ans \u003d ans*2 + 1\n\n    return  ans",
                  "placeholder_text": ""
                },
                {
                  "offset": 152,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "root \u003d Node(0)\n    partial_xor \u003d []\n\n    insert(root, 0)\n\n    partial_xor.append(a[0])\n    insert(root, a[0])\n\n    max_xor \u003d a[0]\n    for i in range(n - 1):\n        #print(i, \" \" , max_xor)\n        n_xor \u003d a[i+1] ^ partial_xor[i]\n        partial_xor.append(n_xor)\n        insert(root, n_xor)\n        max_xor \u003d max(max_xor, find_max_xor(root, n_xor))\n    return max_xor",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "import random\nclass Node:\n    def __init__(self, cnt):\n        self.cnt \u003d cnt\n        self.zero \u003d None\n        self.one \u003d None\n\n\n\n\n\ndef main(n, a):\n    return #Complete the function\n\n\n\n\n\n\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\r\nfrom test_helper import *\r\nfrom task import *\r\n\r\ndef test_answer_placeholders():\r\n    placeholders \u003d get_answer_placeholders()\r\n    placeholder \u003d placeholders[0]\r\n    if placeholder \u003d\u003d \"7\":       # TODO: your condition here\r\n        passed()\r\n    else:\r\n        failed()\r\n\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    tests \u003d [\r\n        (5, [3, 7, 7, 7, 0], 7),\r\n        (5, [3, 8, 2, 6, 4], 15),\r\n        (100, [760931312,\r\n961953649,\r\n429596411,\r\n182330388,\r\n16335298,\r\n76880608,\r\n346788756,\r\n355556955,\r\n334080582,\r\n350409683,\r\n937057391,\r\n969259835,\r\n174707619,\r\n113291960,\r\n360805778,\r\n71938466,\r\n438765547,\r\n603511580,\r\n10787845,\r\n938312989,\r\n359609538,\r\n940176361,\r\n210359121,\r\n550234627,\r\n742633517,\r\n555718375,\r\n734223942,\r\n1442635,\r\n981887833,\r\n898263064,\r\n619239874,\r\n742819137,\r\n860216705,\r\n48836277,\r\n777665890,\r\n876552003,\r\n978233257,\r\n124454638,\r\n84625316,\r\n312313832,\r\n327380686,\r\n21682699,\r\n134090025,\r\n354604670,\r\n987491032,\r\n494895802,\r\n279059501,\r\n278772937,\r\n950923748,\r\n289847346,\r\n69602285,\r\n310533278,\r\n82540065,\r\n279961405,\r\n860767904,\r\n825173581,\r\n688196145,\r\n447508205,\r\n679132582,\r\n670083970,\r\n345771261,\r\n298372448,\r\n265419465,\r\n58504325,\r\n199725090,\r\n43085347,\r\n787572693,\r\n30474706,\r\n20056350,\r\n872198008,\r\n342788537,\r\n199953402,\r\n746397073,\r\n476878561,\r\n554558071,\r\n586404463,\r\n824290729,\r\n833617572,\r\n865177399,\r\n775214469,\r\n975981283,\r\n934779683,\r\n938264112,\r\n58521340,\r\n67257446,\r\n651548374,\r\n736211286,\r\n755453591,\r\n99056571,\r\n267860226,\r\n278053919,\r\n297344198,\r\n566232673,\r\n395989750,\r\n355848522,\r\n618474129,\r\n291591462,\r\n143421207,\r\n648948834,\r\n164164178], 1073354569)\r\n    ]\r\n    for test in tests:\r\n        test_function(test[-1], main, test[0], test[1])\r\n\r\n\r\n"
          },
          "description_text": "\u003chtml\u003e\r\n\u003cp dir\u003d\"rtl\"\u003e\r\n    پیشنیاز:\r\n    \u003cbr\u003e\r\nدفترچه Trie را مطالعه کنید.\r\n    \u003cbr\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cbody dir\u003d\"rtl\"\u003e\r\n\u003cp \u003e\r\n    در این task، آرابه A از n عدد به شما داده میشود. فرض کنید تابعی مانند XOR_ARRAY داریم به طوریکه دو اندیس L و R به عنوان وروری میگیرد و در خروجی XOR عناصر A از اندیس L تا R (با احتساب خودِ L و R) میدهد.\r\n    شما باید تابع main را طوری تکمیل کنید که ماکسیموم تابع\r\n\u003c/p\u003e\r\n    \u003cp dir\u003d\"ltr\"\u003e\r\n        XOR_Array(L,R)\r\n    \u003c/p\u003e\r\n به ازای تمامی\r\n    \u003cp dir\u003d\"ltr\"\u003e\r\n        \\(L \\le R\\)\r\n    \u003c/p\u003e\r\n    را return کند.\u003chr\u003e\r\n\r\nمحدودیت ها:\r\n\u003cp dir\u003d\"ltr\"\u003e\r\n    \\(n \u003c 3 \\times 10^3 \\) \u003cbr\u003e\r\n    \\(A[i] \u003c 10^9 \\)\r\n\u003c/p\u003e\r\n\u003chr\u003e\r\nورودی نمونه:\r\n\u003cp dir\u003d\"ltr\"\u003e\r\nn \u003d 5\u003cbr\u003e\r\nA \u003d [3, 7, 7, 7, 0]\r\n\u003c/p\u003e\r\nخروجی نمونه:\r\n\u003cp dir\u003d\"ltr\"\u003e\r\n7\r\n\u003c/p\u003e\r\n\u003cbr\u003e\r\n\u003cdiv class\u003d\"hint\"\u003e\r\n    توجه کنید که میتوان XOR_ARRAY را به صورت زیر حساب کرد:\r\n    \u003cp dir\u003d\"ltr\"\u003e\r\n        XOR_ARRAY(L , R) \u003d XOR( XOR_ARRAY(1, R) , XOR_ARRAY(1, L-1))\r\n    \u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 89,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "root \u003d Node()\ndigit \u003d [None]*26\n\ndef trieInsert(string):\n    current \u003d root\n    for c in string:\n        tmp_char \u003d ord(c) - ord(\u0027a\u0027)\n        tmp_digit \u003d digit[tmp_char]\n        if current.next[tmp_digit] \u003d\u003d None:\n            current.next[tmp_digit] \u003d Node()\n            current \u003d current.next[tmp_digit]\n        else:\n            current \u003d current.next[tmp_digit]\n    current.cnt \u003d current.cnt + 1",
                  "placeholder_text": ""
                },
                {
                  "offset": 133,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "for i in range(len(numpad)):\n        chars \u003d numpad[i]\n        for char in chars:\n            tmp_char \u003d ord(char) - ord(\u0027a\u0027)\n            digit[tmp_char] \u003d i\n    for word in dictionary:\n        trieInsert(word)\n    dp \u003d [0]*(len(keyset)+1)\n    for i in range(len(keyset)):\n        j \u003d len(keyset) - i - 1\n        current \u003d root\n        k \u003d j\n        dp[j] \u003d 999999\n        while k \u003c len(keyset) and current is not None:\n            current \u003d current.next[keyset[k]]\n            if current is None:\n                break\n            if current.cnt \u003e 0 and dp[k+1] !\u003d -1:\n                dp[j] \u003d min(dp[j], 1 + dp[k+1])\n            k \u003d k + 1\n        if dp[j] \u003d\u003d 999999:\n            dp[j] \u003d -1\n    return dp[0]",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "\nclass Node:\n    def __init__(self):\n        self.cnt \u003d 0\n        self.next \u003d [None]*10\n\n\n\ndef main(dictionary, numpad, keyset):\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    dic \u003d [\"am\",\"axe\",\"exam\"\n    ,\"boy\",\"colour\",\"dam\",\"dot\",\"donkey\",\n    \"fox\",\"new\",\"prim\",\"prime\",\"primeval\",\"pry\",\n       \"the\",\"this\",\"theory\",\"van\"]\n    numpad \u003d [[\u0027a\u0027,\u0027b\u0027,\u0027c\u0027],[\u0027d\u0027,\u0027e\u0027,\u0027f\u0027],[\u0027g\u0027,\u0027h\u0027],[\u0027i\u0027,\u0027j\u0027,\u0027y\u0027],\n          [\u0027l\u0027,\u0027m\u0027,\u0027n\u0027],[\u0027o\u0027,\u0027p\u0027,\u0027q\u0027],[\u0027r\u0027,\u0027s\u0027],[\u0027t\u0027,\u0027u\u0027],\n          [\u0027v\u0027,\u0027w\u0027,\u0027x\u0027],[\u0027k\u0027,\u0027z\u0027]]\n    keyset \u003d [7,2,1,5,6,3,4,1,8,0,4]\n\n    dic2 \u003d [\"am\", \"ant\", \"axe\", \"boy\", \"colour\", \"dam\", \"dot\",\n            \"donkey\", \"exam\", \"exact\", \"fox\", \"new\", \"prim\",\n            \"prime\", \"primeval\", \"pry\", \"the\", \"this\", \"theory\", \"van\"]\n    numpad2 \u003d [[\u0027a\u0027,\u0027b\u0027,\u0027c\u0027],[\u0027d\u0027,\u0027e\u0027,\u0027f\u0027],[\u0027g\u0027,\u0027h\u0027],[\u0027i\u0027,\u0027j\u0027,\u0027y\u0027],\n          [\u0027l\u0027,\u0027m\u0027,\u0027n\u0027],[\u0027o\u0027,\u0027p\u0027,\u0027q\u0027],[\u0027r\u0027,\u0027s\u0027],[\u0027t\u0027,\u0027u\u0027],\n          [\u0027v\u0027,\u0027w\u0027,\u0027x\u0027],[\u0027k\u0027,\u0027z\u0027]]\n    keyset2 \u003d [2,4,3,0,2]\n\n\n    tests \u003d [ (dic, numpad, keyset, 2),\n          (dic2, numpad2, keyset2, -1)]\n    for test in tests:\n        test_function(test[-1], main, test[0], test[1], test[2])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cbody dir\u003d\"rtl\"\u003e\n\u003cp\u003e\nشما یک Numpad دارید که میتوانید از آن برای نوشتن کلمات کمک بگیرید. numpad شما کلید های 0 تا 9 ای دارد که به هرکدام حروفی از \u0027a\u0027 تا \u0027z\u0027 نسبت داده شده. هیچ حرفی به دو کلید نسبت داده نشده است.\nیک نمونه از numpad آمده است:\n\u003c/p\u003e\n\u003cp dir\u003d\"ltr\" \u003e\n    \u003ctable dir\u003d\"ltr\" align\u003d\"center\" cellpadding\u003d\"10\"\u003e\n    \u003ctr\u003e \u003ctd\u003e0: a e u\u003c/td\u003e \u003ctd\u003e1: b l v\u003c/td\u003e \u003ctd\u003e2: c m w\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e \u003ctd\u003e3: d n x\u003c/td\u003e \u003ctd\u003e4: i o y\u003c/td\u003e \u003ctd\u003e5: f p z\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e \u003ctd\u003e6: g q\u003c/td\u003e \u003ctd\u003e7: h r \u003c/td\u003e \u003ctd\u003e8: k s \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003e9: j t\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n    \u003c/table\u003e\n    از طرفی، یک دیکشنری از کلمات هم به شما داده شده. شما میتوانید از keypad برای نوشتن کلمات استفاده کنید. مثلا برای جمله \"Hello World\" باید کلید ها به شکلِ\n\u003cp dir\u003d\"ltr\"\u003e\"7 0 1 1 4 2 4 7 1 3\"\u003c/p\u003e\nوارد شوند. ممکن است یک دنباله از کلید ها بتواند نمایانگر چند عبارت از دیکشنری باشد یا حتی نمایانگر عبارتی از دیکشنری نباشد. میگوییم یک مجموعه از کلمات، یک دنباله از کلیدها را پوشش میدهد، اگر بتوان یک عبارت از آن کلمات ساخت که دنباله کلیدها نشان دهنده آن عبارت باشد. یک عبارت از به هم چسباندنِ چند کلمه ساخته میشود. حالا شما باید با گرفتنِ یک دیکشنری، یک numpad و یک دنباله از کلید ها، اندازه کوچکترین مجموعه ای از کلمات که دنباله کلیدها را پوشش میدهد، خروجی دهید.\n\u003chr/\u003e\nورودی: \u003cbr/\u003e\nپارامترهای تابع main که باید آن را کامل کنید.\u003cbr/\u003e\nDictionary, Numpad, Keyset \u003cbr/\u003e\nتوضیح بیشتر:\u003cbr/\u003e\n\u003cp dir\u003d\"ltr\"\u003e\n    dictionary \u003d [\u0027worda\u0027,\u0027wordb\u0027, \u0027wordc\u0027] \u003cbr/\u003e\n    numpad[i] \u003d array of chars corresponding to i : [[\u0027a\u0027,\u0027b\u0027,\u0027c\u0027] , [\u0027e\u0027,\u0027f\u0027,\u0027g\u0027] , ...] \u003cbr/\u003e\n    Keyset \u003d array of keys \u003d [0,1,2,3,4,5,...] \u003cbr/\u003e\n\u003c/p\u003e\n\u003chr/\u003e\nمحدودیت ها:\u003cbr\u003e\n\u003cp dir\u003d\"ltr\"\u003e\n    dictionary_size \\(\\le 10^4\\) \u003cbr\u003e\n    Keyset_size \\(\\le 10^3\\)\n\u003c/p\u003e\n\u003chr/\u003e\nخروجی تابع باید اندازه کوچکترین مجموعه ای باشد که دنباله کلیدهای داده شده را پوشش میدهد.\n\u003chr/\u003e\nورودی و خروجی نمونه:\n\u003cp dir\u003d\"ltr\"\u003e\n    input: \u003cbr\u003e\n    dictionary \u003d [\"am\",\"axe\",\"exam\",\"boy\",\"colour\",\"dam\",\"dot\",\"donkey\",\"fox\",\"new\",\"prim\",\"prime\",\"primeval\",\"pry\",\"the\",\"this\",\"theory\",\"van\"]\u003cbr\u003e\n    numpad \u003d [[\u0027a\u0027,\u0027b\u0027,\u0027c\u0027],[\u0027d\u0027,\u0027e\u0027,\u0027f\u0027],[\u0027g\u0027,\u0027h\u0027],[\u0027i\u0027,\u0027j\u0027,\u0027y\u0027], [\u0027l\u0027,\u0027m\u0027,\u0027n\u0027],[\u0027o\u0027,\u0027p\u0027,\u0027q\u0027],[\u0027r\u0027,\u0027s\u0027],[\u0027t\u0027,\u0027u\u0027], [\u0027v\u0027,\u0027w\u0027,\u0027x\u0027],[\u0027k\u0027,\u0027z\u0027]]\u003cbr\u003e\n    keyset \u003d [7,2,1,5,6,3,4,1,8,0,4]\u003cbr\u003e\n    output:\u003cbr\u003e\n    2\n\u003c/p\u003e\n\u003c/body\u003e\n\u003cdiv class\u003d\"hint\" dir\u003d\"ltr\"\u003e\n    dynamic programming. \u003cbr\u003e\n    f[0] \u003d 0;\n    \u003cbr\u003e\n    f[i] \u003d min{ f[j] + 1 };  for all 0 \u003c\u003d j \u003c i and S[j+1 .. i] is a word.\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Heap",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 0,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "from heapq import heappush,heappop",
                  "placeholder_text": ""
                },
                {
                  "offset": 195,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "heap \u003d []\n    heapSize \u003d 0\n    arr1 \u003d list(map(int, arr1.split()))\n    arr2 \u003d list(map(int, arr2.split()))\n\n    for i in range(n-1):\n        if(arr1[i] \u003d\u003d 0):\n            heappush(heap,arr2[i])\n            heapSize +\u003d 1\n        else:\n            while(heapSize \u003e\u003d arr2[i]):\n                heapSize -\u003d 1\n                heappop(heap)\n\n    return sum(heap)",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "\n\n# Sample Input:\n# n \u003d 10\n# arr1 \u003d \"0 0 0 0 1 0 1 0 1\"  0 is for a course, 1 is for a prof.\n# arr2 \u003d \"5 10 17 6 2 1 3 2 4\" course units or h_index of the prof.\n\ndef maxVahed(n, arr1, arr2):\n    #Implement the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    n \u003d 10\n    arr1 \u003d \"0 0 0 0 1 0 1 0 1\"\n    arr2 \u003d \"5 10 17 6 2 1 3 2 4\"\n    if maxVahed(n,arr1,arr2) !\u003d 20:\n        failed(\"Wrong Answer\")\n\n    n \u003d 6\n    arr1 \u003d \"0 0 1 0 1\"\n    arr2 \u003d \"10 12 2 1 3\"\n\n    if maxVahed(n,arr1,arr2) !\u003d 13:\n        failed(\"Wrong Answer\")\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه Heap را مطالعه کنید.\n  \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n  یک مسیر طولانی به صورت یک ردیف ‌nتایی که از ۱ تا n و از چپ به راست شماره‌گذاری شده‌است.\n  \u003cbr\u003e\n  ما در خانه 1 می باشیم و می خواهیم به خانه n برسیم. در طول مسیر باید از تمام خانه ها عبور کنیم و حق نداریم به خانه ای برگردیم.\n  \u003cbr\u003e\n  هر خانه به جز خانه‌‌ی اول شامل یک استاد یا یک درس است. درس خانه‌ی iام مقدار u_i تا واحد دارد.\n  \u003cbr\u003e\n  هر بار پویا وارد یک خانه شامل درس می‌شود می‌تواند درس را پاس کند و در نتیجه u_i تا به واحدهای پاس شده‌ی خود اضافه کند- یا از آن بگذرد. از آن جایی که پویا خیلی بااستعداد است حتما می‌تواند درسی که می‌خواهد را پاس کند.\n  \u003cbr\u003e\n  اگر پویا وارد خانه‌ای شود که توسط استاد اشغال شده‌است، استاد از او می‌پرسد که چند درس (نه چند واحد) پاس کرده‌است و اگر تعداد درس‌های پاس کرده‌ی پویا از h_index استاد بیشتر یا مساوی باشد استاد او را مجبور می‌کند در آزمایشگاهش کار کند و انقدر کار به او می‌دهد که نتواند دیگر مسیر را ادامه دهد و لیسانس بگیرد. از آن جایی که پویا خیلی مودب است نمی‌تواند درخواست استاد را رد کند.\n  \u003cbr\u003e\u003cbr\u003e\n\n  اما از آن جایی که پویا مصمم است که لیسانسش را بگیرد می‌خواهد حتما به خانه‌ی آخر برسد و هم‌چنین در طول راه بیشترین تعداد واحد را پاس کند. به پویا در رسیدن به هدفش کمک کنید.\n\u003c/p\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 51,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "max \u003d 0; min \u003d 0\n\n    min_heap \u003d heapq.heapify(arr)\n    temp \u003d arr.copy()\n    for i in range(len(temp)):\n        temp[i] \u003d -1*temp[i]\n    max_heap \u003d heapq.heapify(temp)\n    for i in range(m):\n        max +\u003d heapq.heappop(list(max_heap))\n        min +\u003d heapq.heappop(min_heap)\n\n    return - max - min",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "import heapq\n\n\ndef find_difference(arr, n, m):\n    #Implement the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, test_function\nfrom task import find_difference\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    tests \u003d [\n        (0, [20, 8, 22, 4, 12, 10, 14], 7, 7),\n        (9, [1, 2, 3, 4, 5, 6], 5, 4),\n        (57, [-6, -55, 2], 3, 1)\n    ]\n    for test in tests:\n        test_function(test[0], find_difference, test[1], test[2], test[3])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir \u003d \"rtl\"\u003e\nبه هر یک از زیر مجوعه های m عضوی از arr عدد x (برابر با مجموع اعضای آن مجموعه) نسبت میدهیم.\n\u003cbr\u003e\nبا به کارگیری max Heap و min Heap الگوریتمی طراحی کنید که در O(2*n + 2*m*lg n) ماکسیمم مقدار اختلاف xها را در خروجی قرار دهد.\n\u003cbr\u003e\n\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 102,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def heapfiy_min(heap, i, size):\n\n    while True:\n        left \u003d 2 * i + 1\n        right \u003d 2 * i + 2\n        min_ele \u003d i\n        if left \u003c size and heap[min_ele].data \u003e heap[left].data:\n            min_ele \u003d left\n        if right \u003c size and heap[min_ele].data \u003e heap[right].data:\n            min_ele \u003d right\n\n        if min_ele \u003d\u003d i:\n            break\n        else:\n            heap[i], heap[min_ele] \u003d heap[min_ele], heap[i]\n        i \u003d min_ele",
                  "placeholder_text": ""
                },
                {
                  "offset": 149,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "row \u003d k\n    col \u003d n\n    bubble \u003d [0] * row\n    heap \u003d [None] * row\n    ans \u003d [None] * (row * col)\n    n \u003d row * col\n    for i in range(0, row):\n        heap[i] \u003d HeapNode(matrix[i][0], i)\n    for i in range(row - 1, -1, -1):\n        heapfiy_min(heap, i, row)\n    for i in range(0, n):\n        ans[i] \u003d heap[0].data\n        # print \"ans::iter\", ans\n        mat_row \u003d heap[0].row\n        if bubble[mat_row] \u003e\u003d col - 1:\n            heap[0] \u003d heap[row - 1]\n            row \u003d row - 1\n        else:\n            bubble[mat_row] +\u003d 1\n            mat_col \u003d bubble[mat_row]\n            heap[0] \u003d HeapNode(matrix[mat_row][mat_col], mat_row)\n        heapfiy_min(heap, 0, row)\n    return ans",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "class HeapNode:\n    def __init__(self, data, row,):\n        self.data \u003d data\n        self.row \u003d row\n\n\n\n\ndef merge_k_sorted_arrays(matrix, k, n):\n    #Implement the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    mat \u003d [ [1, 3, 5, 7],\n            [2, 4, 6, 8],\n            [0, 9, 10, 11] ]\n    arr \u003d merge_k_sorted_arrays(mat, 3, 4)\n    if not all(arr[i] \u003c\u003d arr[i+1] for i in range(len(arr)-1)):\n        failed(\"Wrong Answer!\")\n\n    mat \u003d [ [-2, 3, 5, 10, 11, 100],\n            [1, 3, 5, 6, 7, 8],\n            [-3, -2, -1, 101, 102, 103],\n            [0, 0, 0, 0, 0, 105]]\n    arr \u003d merge_k_sorted_arrays(mat, 4, 6)\n    if not all(arr[i] \u003c\u003d arr[i+1] for i in range(len(arr)-1)):\n        failed(\"Wrong Answer!\")\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n  k تا آرایه مرتب شده داریم.\n  \u003cbr\u003e\n  می خواهیم با ترکیب این آرایه ها که طول هر یک n می باشد به یک ارایه مرتب شده برسیم.\n  \u003cbr\u003e\n  تابع merge_k_sorted_arrays را طوری کامل کنید که این کار را انجام دهد.\n  \u003cbr\u003e\u003cbr\u003e\n  ورودی های این تابع یک لیست k عضوی از لیست هایی به طول n می باشند که هریک مرتب شده هستند.\n  \u003cbr\u003e\n  می توانید از کلاس Heap که قرار داده شده نیز استفاده کنید.\n  \u003cbr\u003e\n  پیچیدگی زمانی:\n\u003c/p\u003e\nO(nk Log k)\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Binary Search",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 24,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "a \u003d sorted(a)\n\n    # First Let\u0027s find smallest possible maximum for k days\n    def is_max_ok(mx):\n        tmp \u003d 0\n        for val in a:\n            if val \u003e mx:\n                tmp +\u003d val - mx\n        return tmp \u003c\u003d k\n\n    max_lo \u003d a[0]\n    max_hi \u003d a[-1]\n\n    while max_hi - max_lo \u003e 1:\n        mid \u003d int((max_hi + max_lo) / 2)\n        if is_max_ok(mid):\n            max_hi \u003d mid\n        else:\n            max_lo \u003d mid\n\n    if is_max_ok(max_lo):\n        ans_max \u003d max_lo\n    else:\n        ans_max \u003d max_hi\n\n    # Now, Let\u0027s find greatest possible minimum for k days\n\n    def is_min_ok(mn):\n        tmp \u003d 0\n        for val in a:\n            if val \u003c mn:\n                tmp +\u003d mn - val\n        return tmp \u003c\u003d k\n\n    min_lo \u003d a[0]\n    min_hi \u003d a[-1]\n\n    while min_hi - min_lo \u003e 1:\n        mid \u003d int((min_hi + min_lo) / 2)\n        if is_min_ok(mid):\n            min_lo \u003d mid\n        else:\n            min_hi \u003d mid\n\n    if is_min_ok(min_hi):\n        ans_min \u003d min_hi\n    else:\n        ans_min \u003d min_lo\n\n    if ans_min \u003e\u003d ans_max:\n        if sum(a) % n !\u003d 0:  # We can only achieve it iff sum is divisible by 0\n            return 1\n        else:\n            return 0\n    else:\n        return ans_max - ans_min",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "def solve(n, k, a):\n    #Implement the function\n"
            },
            "testcases.py": {
              "name": "testcases.py",
              "placeholders": [],
              "is_visible": false,
              "text": "tests \u003d [\n    [0, 3, 1, [2, 2, 2]],\n    [1, 4, 100, [1, 1, 10, 10]],\n    [1, 10, 20, [6, 4, 7, 10, 4, 5, 5, 3, 7, 10]],\n    [7, 100, 20, [2, 5, 3, 3, 2, 7, 6, 2, 2, 2, 6, 7, 2, 1, 8, 10, 2, 4, 10, 6, 10, 2, 1, 1, 4, 7, 1, 2, 9, 7, 5, 3, 7, 4, 6, 3, 10, 10, 3, 7, 6, 8, 2, 2, 10, 3, 1, 2, 1, 3, 1, 6, 3, 1, 4, 10, 3, 10, 9, 5, 10, 4, 3, 10, 3, 3, 5, 3, 10, 2, 1, 5, 10, 7, 8, 7, 7, 2, 4, 2, 1, 3, 3, 8, 8, 5, 7, 3, 1, 1, 8, 10, 5, 7, 4, 4, 7, 7, 1, 9]],\n    [80333, 10, 1000000, [307196, 650096, 355966, 710719, 99165, 959865, 500346, 677478, 614586, 6538]],\n    [909357107, 5, 1000000, [145119584, 42061308, 953418415, 717474449, 57984109]],\n    [8, 111, 10, [2, 8, 6, 1, 3, 5, 8, 3, 8, 2, 9, 9, 6, 9, 8, 8, 5, 2, 3, 8, 8, 3, 8, 3, 7, 9, 4, 3, 9, 7, 1, 8, 3, 1, 5, 5, 5, 8, 2, 4, 2, 7, 9, 1, 4, 4, 3, 1, 6, 7, 7, 4, 1, 3, 5, 3, 9, 4, 4, 4, 8, 8, 7, 3, 5, 6, 3, 3, 8, 2, 8, 4, 5, 8, 1, 8, 4, 1, 7, 1, 4, 9, 8, 9, 7, 6, 5, 6, 3, 7, 4, 8, 9, 3, 8, 9, 9, 3, 5, 9, 1, 3, 6, 8, 9, 1, 1, 3, 8, 7, 6]],\n    [9838, 10000, 4000, [9583, 3539, 1944, 6975, 68, 1663, 2856, 1523, 9764, 2388, 5845, 6161, 9947, 7737, 609, 8541, 6533, 6477, 9750, 2946, 3192, 816, 5459, 7052, 5991, 7544, 2246, 6190, 8988, 323, 3079, 4171, 2677, 505, 9729, 7056, 1608, 5489, 1460, 9178, 8323, 5383, 7731, 4880, 6313, 1910, 4400, 81, 3225, 4713, 35, 1456, 5004, 4806, 6253, 7227, 4328, 471, 2294, 4916, 7174, 8191, 1737, 9194, 6612, 7303, 2014, 5436, 2869, 8915, 5763, 9779, 3634, 6070, 8269, 3411, 3575, 7594, 3633, 7031, 4627, 3468, 3328, 7067, 5356, 4106, 1887, 7700, 7062, 2114, 5174, 8297, 4160, 3830, 3049, 5925, 9136, 9135, 2183, 6870, 5513, 6186, 2308, 8389, 4427, 1411, 9113, 3199, 8343, 2853, 9971, 1827, 4772, 8112, 867, 2378, 1155, 845, 5140, 4403, 1817, 6355, 8072, 3490, 2, 7538, 4273, 4721, 7056, 2983, 6884, 8683, 1623, 1876, 2084, 9908, 3259, 3617, 1999, 6437, 5239, 5292, 2823, 9761, 8978, 7536, 8082, 6058, 3494, 9589, 2028, 4289, 8632, 3831, 4237, 5376, 3330, 9607, 2926, 525, 9103, 995, 3673, 8808, 7655, 4925, 2285, 2938, 3206, 9146, 4935, 9273, 9153, 5771, 309, 4743, 9936, 4491, 3030, 6206, 1825, 4133, 6394, 1435, 2311, 544, 567, 7898, 2966, 1938, 2074, 3904, 1385, 6947, 3433, 1640, 1508, 7035, 7553, 8877, 2469, 5891, 230, 5690, 4726, 6255, 2349, 1685, 351, 6609, 3637, 739, 7747, 3552, 2036, 6818, 5372, 1168, 9460, 1500, 8779, 5332, 884, 9959, 4819, 8183, 1309, 6197, 3038, 6022, 5819, 3054, 3732, 6934, 4116, 8330, 979, 5519, 3063, 3129, 221, 9740, 5137, 5859, 6334, 1125, 5650, 2915, 66, 5456, 9628, 8285, 4427, 9223, 9169, 3363, 1853, 1245, 32, 4336, 1795, 7811, 7444, 3668, 9210, 9423, 9054, 1397, 5147, 3868, 4752, 2407, 6679, 7867, 1719, 981, 8210, 4603, 7189, 8824, 9982, 2405, 680, 2701, 3276, 2777, 7595, 652, 1285, 6730, 2084, 476, 4635, 1116, 5380, 2000, 6404, 4137, 1683, 8227, 3946, 1580, 5224, 9800, 581, 9787, 2484, 3176, 515, 4456, 597, 4573, 7117, 5034, 1289, 4991, 3456, 8617, 810, 7805, 4149, 8545, 9284, 5065, 5410, 625, 8996, 5708, 3677, 8961, 7319, 4542, 3066, 9630, 8786, 6533, 6767, 8163, 6117, 855, 1387, 2140, 7080, 6458, 6727, 9457, 5020, 1163, 7258, 7175, 7311, 2359, 7651, 182, 2985, 5981, 2116, 8400, 4234, 750, 4354, 8312, 9354, 4086, 7629, 2190, 9885, 6698, 1953, 1407, 6901, 1488, 2491, 846, 2145, 7646, 9967, 5936, 2755, 6146, 7336, 1265, 6589, 6547, 5350, 2297, 3871, 7619, 7043, 8831, 2603, 2342, 997, 3183, 1485, 4788, 1417, 4252, 6951, 4104, 2741, 1769, 7116, 1472, 3156, 556, 1186, 9881, 9382, 8190, 7545, 8404, 1434, 5169, 8802, 8939, 926, 1891, 2542, 6586, 2393, 1765, 9808, 868, 5552, 4104, 4555, 2795, 6647, 9864, 4695, 5445, 1826, 5629, 6446, 1825, 272, 7056, 6839, 7604, 2429, 6673, 614, 2565, 8973, 6541, 1764, 2662, 1147, 897, 928, 7227, 3396, 9461, 9499, 3574, 7183, 7641, 6485, 8099, 2465, 9510, 1968, 7927, 2434, 5053, 9030, 1387, 1646, 687, 8938, 6875, 5612, 4561, 5385, 3616, 4232, 5397, 1409, 2502, 963, 9651, 5234, 9627, 786, 9022, 630, 2281, 204, 8495, 3051, 2502, 9917, 764, 6669, 2558, 7222, 9441, 8989, 9696, 3287, 8433, 8919, 779, 1177, 6297, 4529, 3953, 4536, 5572, 204, 1462, 3409, 334, 4725, 3348, 6480, 4635, 328, 6682, 8470, 5816, 6696, 3574, 7331, 1575, 7753, 5274, 4004, 3186, 9528, 2719, 232, 5063, 9179, 5275, 7000, 6283, 775, 4793, 3637, 2321, 8847, 8726, 3018, 3889, 505, 6974, 5206, 2500, 1740, 5456, 9335, 9068, 433, 9192, 7409, 4792, 4986, 9197, 5343, 9707, 4661, 1120, 2249, 6599, 5137, 7447, 9644, 8261, 8627, 4618, 6216, 4536, 4408, 414, 9147, 9932, 3021, 2913, 50, 6022, 4201, 6371, 957, 117, 7495, 8667, 8458, 3595, 1194, 8184, 2545, 2194, 7418, 3615, 6823, 2467, 3219, 5282, 4993, 3529, 650, 4247, 6789, 271, 9087, 6200, 4606, 3067, 2178, 9719, 7753, 8228, 5314, 3186, 9516, 7247, 8676, 7276, 1679, 6116, 3051, 7335, 9414, 7217, 5965, 2957, 4786, 1465, 6529, 5654, 4420, 1579, 9184, 9311, 3989, 1901, 4719, 2670, 9655, 2687, 88, 573, 1053, 5562, 2272, 9944, 897, 8708, 7407, 7260, 1296, 5180, 7462, 9914, 5590, 3179, 1592, 7328, 4598, 1071, 5356, 2733, 7941, 117, 2409, 9057, 2405, 6555, 2683, 4483, 8169, 985, 3010, 1101, 5659, 7573, 5737, 853, 8530, 8862, 3876, 6427, 3281, 9872, 6197, 5858, 9797, 3120, 5704, 8774, 779, 9504, 3019, 5416, 5779, 4209, 4330, 3796, 4666, 1169, 8039, 5545, 2368, 6480, 1833, 8631, 4174, 9895, 6353, 9064, 8091, 1253, 3674, 3640, 6445, 9578, 5978, 7959, 2727, 6641, 5223, 3942, 9151, 4691, 1259, 6654, 1299, 6979, 5343, 5079, 5472, 8665, 5110, 187, 2719, 1963, 1492, 5388, 5309, 3991, 6568, 450, 9855, 5368, 5912, 6122, 5854, 7078, 865, 9591, 1663, 7802, 978, 1662, 2611, 2939, 3252, 4976, 3447, 3233, 9868, 2057, 8930, 6913, 6932, 899, 714, 7049, 4997, 8202, 5564, 6317, 5669, 6689, 4574, 6910, 3758, 7435, 428, 9902, 7200, 531, 381, 7196, 6965, 5555, 2448, 6182, 4026, 850, 2530, 9908, 4757, 1157, 4259, 4648, 8479, 4136, 8111, 5561, 7090, 2952, 2286, 1517, 7953, 8559, 7472, 5576, 4897, 7765, 9541, 5238, 4963, 8525, 3815, 7232, 6956, 4979, 9033, 3576, 5520, 4211, 3107, 1774, 2188, 1057, 3743, 9979, 3054, 9410, 9862, 7568, 5391, 8437, 9941, 344, 4022, 4946, 278, 368, 7023, 3831, 8794, 3656, 5516, 1906, 7773, 8334, 2066, 5510, 8299, 236, 2601, 6560, 2257, 7818, 7614, 4879, 6436, 5026, 7976, 4790, 4950, 5156, 9221, 5167, 5520, 6593, 1699, 921, 9170, 7824, 5161, 2818, 5095, 3549, 2120, 8154, 3935, 7277, 7998, 8360, 8721, 9460, 8003, 5328, 9114, 7225, 5548, 1040, 4077, 8192, 5634, 2177, 1079, 9651, 5100, 3184, 2673, 5476, 4712, 3267, 4305, 6651, 325, 5173, 298, 6716, 4750, 8876, 4614, 6620, 8581, 2386, 6515, 2916, 326, 4743, 3276, 1451, 5133, 2767, 5454, 9047, 6513, 6962, 1070, 2652, 36, 7992, 8078, 9808, 809, 7113, 1826, 6599, 105, 7432, 666, 1064, 8123, 4993, 9362, 857, 6989, 695, 3771, 5083, 1156, 5620, 4525, 2268, 3173, 4826, 8374, 1008, 8653, 532, 4473, 2793, 2486, 4114, 1241, 9046, 7734, 138, 6513, 806, 5153, 4718, 299, 30, 5255, 8817, 8320, 4726, 1496, 3409, 2548, 5210, 9622, 1341, 767, 210, 3410, 9147, 4949, 1432, 7072, 8687, 8856, 6732, 2414, 9280, 4812, 4555, 2620, 6233, 9297, 8103, 7027, 9317, 5964, 4598, 6722, 4183, 7748, 1834, 8646, 7135, 7817, 3349, 4865, 3689, 8947, 6291, 8303, 811, 906, 8635, 8783, 1936, 2582, 3842, 1519, 2418, 7797, 9766, 5052, 1246, 225, 6112, 9381, 434, 7721, 5277, 5538, 7900, 9441, 6130, 1236, 1896, 7940, 554, 8937, 3496, 2810, 7770, 7220, 6986, 5500, 6688, 3787, 3445, 7023, 2732, 9500, 5200, 3281, 7573, 1472, 442, 4371, 1163, 1947, 7832, 4519, 5232, 3181, 8572, 7799, 1417, 3085, 8329, 9064, 4913, 8210, 6490, 8629, 2857, 5867, 7955, 6706, 945, 7376, 6258, 2666, 5580, 949, 8769, 8876, 2959, 9929, 5634, 9434, 1233, 9512, 8284, 7842, 1638, 3458, 7121, 8774, 6379, 6837, 8121, 8152, 3359, 2658, 3363, 5453, 157, 1495, 6735, 4510, 2049, 6386, 2416, 8730, 3625, 1619, 4488, 1, 428, 4873, 3013, 6776, 3395, 4541, 6518, 2371, 7778, 1916, 8345, 1255, 3185, 2993, 9161, 9036, 8330, 2219, 8601, 1845, 6193, 4188, 7774, 8339, 2962, 6327, 8656, 1358, 3403, 9091, 3304, 5452, 6157, 4441, 3751, 3602, 7538, 3804, 4965, 9362, 8936, 6417, 3722, 2229, 529, 435, 717, 5833, 2277, 3527, 4633, 6062, 9091, 823, 5085, 7764, 2460, 987, 9904, 5727, 7041, 8141, 3520, 868, 8882, 1088, 8411, 5452, 8177, 9697, 9973, 9226, 1135, 1480, 800, 2826, 2137, 7738, 8816, 5587, 9014, 881, 315, 293, 8759, 1555, 4240, 3812, 6174, 6996, 1597, 7610, 8560, 6641, 9214, 1708, 8318, 8583, 8288, 8809, 7265, 4943, 8360, 457, 5018, 4384, 2052, 7154, 9131, 5102, 7651, 1790, 678, 5667, 7387, 146, 3773, 1300, 8892, 3260, 4682, 9019, 6677, 1441, 179, 2049, 3051, 1631, 1064, 3329, 8257, 7414, 4231, 6915, 5166, 2799, 175, 3312, 1599, 4121, 561, 6449, 1059, 9564, 4684, 1601, 1012, 4072, 347, 924, 1861, 8564, 4311, 9900, 6531, 5917, 8332, 925, 9123, 5733, 1631, 9048, 6956, 8113, 9751, 7325, 8537, 5487, 2835, 9240, 5877, 3411, 9545, 8627, 6487, 9660, 3512, 6390, 1230, 1405, 7433, 1429, 4646, 3823, 4434, 5657, 3291, 6424, 9037, 2521, 4505, 5458, 9294, 3370, 941, 3946, 7022, 7556, 9228, 8006, 2455, 1040, 5880, 654, 7658, 5799, 4484, 5787, 365, 4842, 5660, 3619, 1175, 871, 866, 3269, 5246, 6837, 512, 6065, 414, 7835, 9317, 253, 1074, 9602, 9472, 5790, 7011, 8855, 9641, 6416, 4170, 6592, 4445, 612, 9481, 4563, 3929, 498, 5679, 5085, 2182, 3191, 942, 9927, 1545, 5775, 672, 1993, 4836, 3371, 6897, 9218, 1578, 9478, 9701, 8024, 5849, 820, 7045, 3762, 6815, 1689, 1066, 4262, 6936, 1231, 1994, 7088, 9692, 360, 939, 327, 9666, 9486, 5019, 3510, 9532, 6774, 6331, 2314, 9663, 3750, 4987, 9819, 3443, 4252, 3110, 125, 5974, 4491, 9855, 7605, 8835, 742, 3962, 4083, 975, 9561, 8442, 2245, 3837, 3509, 7483, 4738, 7818, 7646, 2746, 3226, 3135, 6470, 8510, 5148, 2542, 6934, 1455, 7173, 8391, 2544, 3907, 914, 4709, 6349, 3856, 3989, 1652, 1204, 2772, 5537, 6547, 7094, 6988, 973, 9124, 4408, 9427, 9663, 6749, 1239, 4145, 2709, 974, 501, 5609, 6554, 745, 7016, 5918, 8822, 4800, 9475, 5181, 8245, 7108, 7413, 630, 122, 685, 6083, 3868, 7760, 9909, 9335, 3904, 4405, 9333, 3544, 3656, 3239, 7, 681, 1750, 7823, 6031, 6383, 5917, 2679, 9482, 6490, 5883, 7327, 7131, 1862, 7104, 3619, 2336, 1332, 1494, 9019, 6572, 11, 5179, 2418, 9849, 2072, 3018, 1388, 3202, 5606, 4206, 4360, 5196, 1216, 4105, 1180, 4122, 558, 704, 5731, 3338, 2409, 9756, 4852, 3413, 8247, 1628, 3825, 6690, 2575, 4668, 149, 9567, 2399, 9201, 827, 6818, 6225, 9813, 3824, 3365, 1085, 1120, 8451, 8180, 1446, 3649, 4565, 9463, 9542, 5393, 4968, 1117, 59, 7077, 7631, 6843, 396, 1470, 9753, 1206, 8082, 9717, 6228, 6816, 9584, 3145, 5255, 1246, 9514, 2132, 1798, 7197, 5416, 2858, 3226, 3972, 1103, 387, 7309, 3279, 8857, 605, 597, 4298, 188, 6929, 1624, 2219, 4048, 3903, 47, 4221, 8829, 8045, 8598, 3057, 6308, 2624, 4752, 6587, 6799, 4173, 30, 6424, 7108, 1999, 230, 3796, 4469, 5431, 3090, 3093, 1642, 1760, 250, 6707, 9601, 7341, 3651, 2492, 1379, 9522, 3695, 8600, 5977, 1219, 6503, 6629, 5993, 8214, 9159, 1854, 3822, 9434, 8542, 9997, 2046, 6943, 8590, 6705, 3216, 6385, 5718, 5571, 3770, 6163, 6267, 8748, 4973, 2889, 7439, 7000, 4570, 5552, 8586, 2787, 1518, 7213, 1256, 5184, 6972, 4194, 7331, 2010, 4458, 9686, 5984, 7398, 8991, 3192, 8187, 49, 9679, 9760, 5949, 3492, 7407, 8028, 7008, 7304, 1732, 7203, 3091, 3742, 8616, 8909, 6452, 9174, 4384, 3611, 2783, 4298, 5516, 7060, 8159, 3119, 2884, 9289, 1387, 7910, 9390, 1938, 5482, 5418, 7470, 6276, 2465, 2892, 5030, 606, 1486, 8554, 8589, 3493, 1195, 4354, 5200, 7224, 5843, 2731, 3507, 268, 9023, 8019, 8340, 6125, 1987, 4155, 4299, 4627, 2368, 619, 455, 1182, 8437, 8070, 5513, 823, 256, 7976, 1534, 5641, 2303, 2215, 9716, 9371, 7091, 7669, 7358, 5535, 8704, 5964, 1349, 3136, 9112, 9284, 3453, 7862, 2279, 8287, 2454, 2274, 7477, 494, 7304, 9778, 6293, 2715, 9745, 4972, 3360, 3, 2983, 653, 3403, 8355, 5185, 4981, 9946, 7902, 6114, 86, 7988, 9961, 4163, 8474, 9493, 4070, 1646, 2124, 3836, 4442, 2142, 9344, 8282, 8936, 8820, 7076, 9455, 4274, 8945, 9377, 929, 4039, 5449, 8471, 8021, 4327, 7014, 5737, 8836, 1337, 163, 8603, 513, 8958, 9319, 7628, 5691, 4968, 6098, 5558, 3326, 3244, 4177, 1494, 8775, 2877, 5986, 8504, 6427, 1857, 6888, 8073, 2310, 8079, 6960, 5976, 3479, 4981, 8082, 1100, 3598, 6500, 5319, 8473, 6998, 6330, 2934, 7186, 3040, 195, 5904, 3310, 2846, 4215, 2211, 869, 4145, 8128, 759, 238, 1645, 6309, 8914, 4124, 4765, 6870, 729, 3771, 547, 95, 987, 996, 6154, 4825, 7666, 4595, 5754, 8007, 2223, 4740, 469, 6482, 90, 1298, 3882, 4093, 710, 7549, 8149, 8354, 7296, 6425, 4929, 3725, 2373, 8387, 5887, 1503, 5451, 2109, 9623, 8779, 496, 9659, 1480, 4952, 585, 8688, 521, 8953, 7306, 5161, 2278, 3141, 5228, 9353, 8521, 761, 2999, 1235, 65, 3926, 5977, 9587, 4064, 1115, 3024, 4953, 8968, 7187, 3566, 6283, 8409, 9041, 8081, 4275, 5157, 9942, 3669, 4889, 3993, 4560, 3743, 1763, 9067, 175, 9815, 8674, 2554, 721, 4683, 756, 5173, 6651, 3870, 693, 9735, 1717, 8865, 2342, 5436, 1930, 2073, 8580, 1505, 5716, 8169, 5397, 1945, 8562, 9969, 2878, 871, 645, 5871, 5499, 9114, 148, 7744, 1164, 4345, 8026, 3072, 382, 8628, 9862, 4936, 7512, 7133, 1379, 414, 3955, 5144, 9884, 1992, 4050, 8901, 487, 9992, 4867, 6142, 1332, 241, 9779, 2473, 6518, 7423, 5203, 3345, 6588, 258, 14, 4560, 1118, 3173, 2734, 2719, 961, 5998, 8680, 7073, 3042, 2889, 3283, 9082, 1635, 7602, 633, 2305, 2141, 4422, 1296, 1034, 5901, 6482, 5023, 9649, 7296, 5024, 9470, 507, 9759, 7553, 1365, 8828, 8011, 3397, 2583, 4455, 3769, 5071, 9444, 1043, 9034, 6693, 4990, 7998, 5738, 5136, 5246, 4659, 8121, 9529, 6643, 1003, 501, 2436, 4184, 5853, 1226, 2838, 7990, 7851, 171, 6905, 4566, 3935, 3873, 915, 3110, 6746, 6633, 8248, 6267, 6204, 6808, 1759, 3287, 5956, 5181, 9436, 2828, 9094, 8261, 1142, 1651, 2522, 1464, 1861, 8622, 2437, 9520, 9996, 3664, 2113, 7856, 4527, 9655, 227, 7078, 7419, 9456, 1817, 7863, 2834, 7843, 3873, 4471, 4576, 2530, 5205, 6790, 949, 1647, 2650, 9169, 2557, 2316, 7496, 7088, 4826, 2897, 452, 8338, 9324, 5361, 9404, 1444, 2876, 8938, 8235, 203, 6716, 9285, 3788, 7919, 2250, 8498, 4137, 6402, 9639, 3875, 104, 2497, 237, 1876, 2208, 508, 6182, 3222, 7972, 4882, 6478, 5550, 6548, 5256, 6461, 1312, 5914, 4255, 9354, 6107, 6390, 4297, 9641, 4700, 6222, 2443, 6453, 7251, 8109, 7733, 7814, 7815, 3593, 8834, 6365, 3928, 5550, 4041, 1095, 7772, 1825, 4609, 7593, 7032, 3535, 3516, 8769, 9626, 800, 7431, 440, 9528, 4357, 9635, 8706, 3237, 2735, 8235, 175, 9839, 6000, 534, 3584, 5976, 8373, 2833, 753, 7062, 7187, 5346, 9432, 4989, 8769, 4504, 3498, 8404, 8066, 4238, 1928, 5741, 7460, 8622, 1300, 6930, 7677, 3462, 2780, 8210, 7047, 7060, 3325, 4995, 526, 6665, 3196, 5020, 5670, 4281, 3472, 9723, 2967, 190, 6085, 2805, 5179, 3968, 8615, 4919, 9057, 6971, 5348, 6516, 3076, 1407, 1013, 2046, 1715, 317, 8551, 2442, 4420, 3065, 1772, 8907, 1095, 35, 3654, 9715, 1421, 4476, 2782, 7482, 2324, 1870, 2757, 6746, 7908, 3679, 4275, 1186, 7285, 4022, 9223, 2199, 8470, 6030, 9655, 8015, 3315, 3390, 8750, 5150, 4833, 3485, 9048, 6989, 3007, 4494, 8976, 7907, 5148, 2133, 8450, 8496, 9233, 6925, 5789, 9458, 7639, 8657, 4470, 5773, 4639, 9383, 7080, 8822, 8100, 6530, 9289, 4731, 4817, 351, 7523, 7641, 9860, 2060, 2156, 6145, 8996, 1128, 9672, 3135, 7807, 5450, 185, 2605, 4671, 138, 7623, 2582, 9694, 1359, 3278, 3586, 7079, 9592, 353, 8814, 3435, 5896, 598, 4533, 8924, 9316, 8970, 1047, 7073, 3633, 6698, 4190, 1784, 2480, 4940, 8617, 5929, 9882, 4794, 3218, 7882, 3536, 5739, 9781, 1381, 8338, 9792, 9092, 1470, 4576, 291, 9944, 3549, 2172, 6354, 4196, 9479, 4670, 7464, 3072, 4098, 6877, 3544, 6822, 9293, 6187, 8457, 7668, 3770, 7780, 2051, 5979, 6628, 4908, 986, 2861, 2259, 4523, 5629, 5168, 6063, 7987, 6263, 3232, 1070, 6280, 5456, 514, 260, 2642, 8203, 3329, 4575, 2431, 3420, 9191, 7889, 9835, 1374, 8227, 1745, 8747, 2890, 3568, 9099, 4453, 9002, 5040, 6068, 7152, 5827, 6121, 7402, 7616, 7424, 1950, 7549, 222, 1724, 5418, 6624, 6005, 2175, 7686, 6569, 9993, 8668, 1960, 2164, 1550, 7897, 1036, 7326, 1241, 3940, 3374, 4497, 500, 6374, 9858, 6836, 7502, 6403, 6535, 7062, 2997, 6713, 4735, 6258, 211, 5998, 132, 7710, 2782, 8374, 8055, 7553, 5889, 9979, 214, 7722, 8620, 1082, 9786, 8162, 7605, 2438, 611, 4008, 7238, 8824, 3658, 1720, 4088, 2810, 8064, 3941, 903, 7158, 5965, 4697, 6056, 8640, 7724, 9303, 9856, 3019, 5448, 3145, 9072, 9093, 7021, 7435, 3529, 2560, 6363, 2571, 1511, 3363, 2550, 1539, 3909, 6884, 2146, 2578, 6305, 2502, 3493, 2469, 1210, 7921, 1953, 6473, 615, 3196, 2540, 7812, 2528, 6158, 7284, 1272, 4259, 6993, 4448, 3089, 4545, 3898, 2295, 4994, 2730, 1653, 748, 2029, 7771, 5239, 2932, 3655, 8567, 9477, 9998, 3004, 6401, 9672, 2104, 5669, 997, 6715, 2407, 9859, 2239, 9752, 9315, 8898, 663, 5139, 4836, 8572, 859, 8685, 6090, 1339, 3458, 8377, 8378, 315, 3470, 8986, 8426, 6780, 2302, 1083, 9257, 206, 8973, 9911, 9611, 5504, 4398, 2931, 590, 3577, 4277, 1551, 7494, 5727, 2917, 416, 3367, 2941, 5731, 3803, 5693, 8437, 3201, 3681, 4172, 8238, 1297, 7718, 7054, 2166, 8493, 2866, 7229, 5399, 6494, 5384, 8523, 6950, 2172, 3699, 2582, 4732, 3730, 462, 295, 4082, 76, 6829, 1287, 7807, 929, 9766, 3043, 8485, 4217, 8802, 5386, 916, 9505, 8586, 6298, 7949, 235, 3276, 3903, 8987, 5566, 7645, 3516, 2068, 9409, 3525, 8209, 41, 425, 1037, 5351, 6767, 1624, 7507, 5289, 9893, 6459, 5607, 7912, 1224, 863, 412, 8648, 9681, 6225, 6070, 293, 8816, 372, 7877, 5076, 4715, 4423, 6985, 9637, 9511, 7361, 5117, 8745, 5336, 5276, 427, 179, 7927, 3876, 5737, 4908, 2345, 1269, 8723, 6486, 5222, 3728, 3600, 2969, 6010, 3058, 3226, 2766, 8932, 54, 1383, 8646, 6753, 6637, 1656, 2694, 6266, 829, 9828, 7545, 7918, 9637, 4928, 2219, 4735, 1864, 6794, 839, 5509, 3553, 5274, 9182, 573, 7317, 7088, 5586, 6209, 7170, 1166, 1258, 853, 2063, 4274, 6227, 7192, 9743, 948, 1520, 3664, 9797, 1317, 5220, 6568, 9065, 79, 5215, 6111, 5330, 4283, 2561, 725, 4967, 1986, 4198, 5013, 5668, 4290, 9885, 6647, 4628, 3552, 4962, 7761, 3339, 5433, 3653, 346, 3693, 1948, 9372, 6108, 3033, 4454, 5497, 7242, 2910, 9871, 5848, 2941, 9777, 8433, 6985, 3628, 4726, 5901, 4987, 7042, 6237, 7122, 252, 7686, 8208, 2281, 1129, 9888, 1147, 7294, 8739, 6176, 4449, 3898, 3153, 1919, 3514, 8425, 5353, 7081, 9290, 2732, 8312, 1368, 4327, 6809, 1167, 7151, 2682, 8947, 9040, 8802, 88, 9301, 5389, 9972, 966, 7134, 5230, 9092, 387, 8789, 8435, 1555, 9298, 7529, 8856, 6829, 8065, 5142, 8257, 1468, 9344, 1587, 5974, 4189, 367, 5667, 93, 6580, 4982, 9511, 4466, 4706, 7743, 7124, 9789, 3476, 4147, 9796, 810, 2371, 5474, 2782, 7533, 2735, 5985, 8948, 2331, 180, 6659, 9291, 27, 9962, 2104, 6781, 6085, 9873, 1975, 6247, 9547, 7578, 5478, 7790, 4302, 6288, 7178, 9597, 3381, 5574, 300, 1958, 8362, 1962, 1171, 3154, 4329, 4617, 4258, 4339, 2369, 9142, 7628, 7533, 5564, 2420, 1797, 1204, 3108, 1397, 541, 8450, 720, 2134, 5555, 8429, 3599, 77, 4343, 1155, 6572, 9239, 4257, 2266, 9223, 993, 396, 6998, 2263, 1455, 2021, 478, 7754, 1596, 1384, 4377, 8974, 7697, 4455, 1749, 2442, 8628, 9214, 1739, 3011, 7151, 4347, 8046, 340, 6995, 2895, 7759, 3475, 4823, 8512, 4688, 6572, 6307, 6676, 6005, 4665, 7877, 4963, 9315, 4397, 646, 7962, 128, 5928, 6329, 862, 9813, 2195, 3186, 2229, 7719, 4124, 8377, 248, 1144, 9350, 7648, 25, 1455, 8861, 2409, 6536, 8427, 3326, 831, 9281, 7782, 7419, 1520, 6275, 8126, 9935, 6967, 4664, 4041, 9702, 9627, 6666, 7795, 6942, 2809, 6134, 1141, 6957, 7603, 7636, 8181, 3502, 9660, 7827, 2832, 4461, 5556, 4287, 2224, 2779, 9052, 4443, 7900, 5365, 3057, 7849, 9148, 4424, 3959, 4094, 5885, 7230, 8032, 1456, 2909, 1659, 1945, 2322, 9858, 2695, 8789, 7504, 8215, 3610, 8269, 7241, 7297, 104, 7563, 4989, 6871, 3491, 6003, 8880, 739, 5109, 794, 3716, 7057, 802, 9813, 4643, 8455, 9194, 1082, 6307, 2360, 9363, 9332, 3798, 5186, 3003, 7590, 4024, 7547, 2187, 8718, 8553, 4986, 818, 3058, 3069, 1901, 5033, 4517, 2661, 1376, 9896, 4262, 7143, 1338, 5088, 1849, 7301, 7112, 6717, 5306, 9130, 3608, 2982, 9782, 6994, 6897, 9604, 1076, 6109, 4044, 2796, 2832, 1665, 1287, 7337, 2455, 870, 4977, 3530, 3084, 9475, 7252, 4601, 2009, 9212, 9156, 2042, 5711, 3909, 2113, 8222, 6288, 383, 3526, 2587, 2232, 5496, 4132, 6179, 3702, 423, 9905, 5235, 9633, 1972, 8953, 9786, 5604, 7608, 8367, 2862, 9651, 8933, 8596, 4631, 6266, 9700, 9842, 7474, 8884, 5199, 9937, 5137, 3071, 3626, 5272, 9999, 7654, 9351, 8080, 6672, 4100, 8810, 8290, 5102, 1860, 1330, 111, 692, 931, 3929, 6445, 3380, 2688, 1524, 6431, 1408, 8964, 3075, 2307, 1948, 2126, 4304, 5662, 3008, 4675, 3575, 8908, 6711, 8021, 155, 3051, 1908, 9075, 4757, 3615, 2056, 5263, 3650, 1730, 6905, 6859, 8517, 250, 5797, 5875, 9901, 1977, 2571, 9581, 240, 8343, 4584, 4836, 4175, 3454, 4585, 1279, 5954, 7899, 857, 9077, 4595, 1718, 5255, 1767, 2985, 7335, 7088, 6796, 1826, 7077, 5521, 8635, 421, 5581, 3688, 5577, 679, 3228, 3104, 1988, 7383, 2709, 4628, 6156, 7811, 8824, 7794, 1755, 1234, 1921, 2845, 5775, 8595, 4528, 3289, 2123, 6538, 6268, 4664, 1607, 251, 2592, 9771, 3318, 5072, 7899, 9427, 8560, 3849, 5847, 3066, 9760, 1079, 3317, 4582, 4400, 2978, 1509, 2401, 902, 4978, 9617, 2767, 1590, 7550, 696, 586, 6127, 6815, 4842, 9056, 3927, 4723, 9735, 9996, 7642, 5931, 1204, 6264, 8069, 9945, 2653, 8455, 2896, 4057, 100, 5969, 3896, 5711, 2971, 4678, 3843, 8938, 3802, 8264, 3409, 7789, 4106, 9221, 9835, 2698, 4063, 8685, 7591, 9670, 5745, 3412, 6877, 3141, 8987, 7094, 9720, 8536, 8835, 528, 9437, 2136, 5992, 1835, 8432, 9301, 6137, 2008, 2209, 2491, 9135, 8488, 8420, 9478, 8274, 8534, 5995, 425, 779, 8721, 444, 5506, 578, 4181, 8377, 6376, 7133, 2835, 1114, 3099, 7336, 3924, 6902, 2164, 6301, 8218, 873, 5619, 7228, 6450, 4823, 8693, 1560, 3596, 6679, 2855, 5038, 2764, 7639, 8101, 5153, 7025, 5381, 1284, 9467, 7658, 1448, 4243, 8673, 16, 6838, 21, 1338, 3661, 8914, 7693, 1249, 5506, 2878, 2690, 2758, 4751, 2376, 2034, 6277, 8561, 3895, 5086, 2491, 8684, 6940, 9786, 9459, 9811, 7295, 5069, 5336, 6286, 6454, 1145, 8722, 9519, 3986, 2277, 4445, 7012, 2686, 3914, 9108, 2863, 1491, 8844, 179, 5621, 9374, 8563, 2408, 3472, 7758, 4785, 2180, 2442, 5178, 1305, 9705, 3111, 3237, 1483, 3772, 3077, 141, 6807, 5101, 618, 9497, 7912, 4374, 9510, 2926, 8804, 3011, 1315, 6407, 9828, 5505, 7140, 3599, 2699, 471, 507, 496, 9265, 3888, 8858, 2209, 9936, 6422, 5530, 9692, 3532, 4185, 3280, 5824, 5371, 8786, 5987, 75, 7738, 6620, 2614, 2856, 2367, 4540, 6764, 3403, 5629, 7520, 2659, 3421, 1937, 4293, 1902, 4236, 9940, 3750, 1728, 7660, 4172, 7543, 1559, 3964, 2115, 2060, 5886, 2259, 1692, 3032, 570, 6044, 2995, 6491, 2947, 7685, 349, 9079, 9493, 656, 9128, 5690, 9698, 1513, 3885, 7346, 542, 106, 6698, 5905, 779, 2877, 1548, 821, 9388, 6375, 6271, 6869, 122, 465, 7395, 6235, 9326, 9882, 5902, 9600, 6995, 9712, 2828, 5355, 7096, 3550, 553, 1689, 5052, 6681, 5842, 3756, 7014, 1845, 5867, 5138, 6976, 9278, 9503, 505, 1111, 4750, 6481, 7992, 5806, 7553, 9222, 5178, 7863, 3264, 817, 766, 7813, 1032, 621, 3729, 251, 9398, 7279, 5096, 8011, 8996, 7253, 8782, 7837, 2424, 2447, 2575, 9266, 2597, 6063, 7393, 8244, 8384, 2650, 5076, 2968, 5571, 5126, 2128, 1687, 7131, 3753, 8138, 5081, 8067, 3650, 4499, 5333, 2253, 1682, 9776, 7437, 2577, 1242, 7240, 2442, 8181, 9446, 9328, 2236, 9654, 5040, 6232, 1800, 7531, 9806, 5287, 7060, 3010, 5405, 5964, 7340, 6846, 7378, 5487, 8520, 8056, 3390, 3, 6105, 978, 5068, 3636, 6674, 7157, 443, 7127, 7639, 44, 3828, 2245, 3848, 1644, 1750, 8258, 4972, 3551, 3875, 4898, 5417, 2278, 2124, 6492, 848, 439, 2231, 4215, 7212, 1568, 383, 8556, 3129, 3928, 9661, 1455, 5415, 8333, 8172, 3958, 425, 4584, 9576, 5991, 1316, 1307, 6784, 8233, 5092, 8511, 9045, 8546, 4828, 5901, 4934, 7141, 4696, 669, 7511, 9195, 6011, 5926, 9326, 8554, 9707, 7314, 1619, 2231, 1734, 4048, 1420, 9944, 601, 9181, 1040, 8203, 5263, 7558, 1375, 7446, 6908, 4948, 8492, 5576, 3785, 641, 4746, 2339, 1557, 3454, 6057, 9595, 5913, 1938, 3058, 5765, 8820, 8618, 7747, 385, 7244, 8948, 2330, 2377, 4928, 3168, 6841, 4669, 6199, 5482, 8733, 115, 6183, 2758, 4732, 4611, 4427, 8695, 472, 2489, 33, 4486, 8609, 1650, 2019, 3845, 2516, 6648, 8882, 6437, 1106, 6500, 6794, 9992, 2211, 5237, 6672, 5012, 9822, 7931, 6631, 7058, 1570, 3225, 6209, 3362, 1593, 6626, 2034, 7702, 874, 9963, 2940, 2189, 3015, 3261, 6049, 3761, 3676, 3814, 3679, 8672, 4668, 4708, 6055, 2183, 6546, 4386, 1183, 3063, 1785, 765, 6979, 7424, 6875, 9686, 7436, 2617, 4870, 3344, 3900, 413, 2266, 9787, 1564, 3023, 7381, 6328, 541, 8187, 3280, 1719, 8732, 3515, 4679, 5709, 1665, 3594, 9745, 4568, 8779, 3499, 7702, 2552, 4438, 8719, 3339, 6530, 4345, 6890, 5113, 1763, 9447, 2130, 6769, 8520, 6506, 2268, 4631, 5805, 4817, 1378, 6581, 6366, 4065, 7537, 629, 7331, 5185, 7481, 4955, 5430, 4677, 5453, 3952, 1701, 7296, 4165, 6754, 3586, 8620, 8932, 2402, 5042, 2773, 1550, 3759, 1035, 5923, 4699, 9985, 302, 6014, 2988, 4204, 3202, 1297, 1852, 7261, 5941, 5648, 2096, 5121, 6893, 2899, 3416, 9202, 2591, 452, 3049, 5479, 5653, 6615, 6429, 6996, 5694, 3014, 2988, 2528, 4796, 3931, 2915, 3216, 4059, 101, 8520, 3880, 870, 4425, 2810, 9300, 4233, 9139, 1225, 5646, 235, 4036, 3119, 4522, 237, 4229, 2389, 9149, 9214, 6755, 2776, 758, 3925, 5184, 4096, 9268, 2267, 9971, 70, 9588, 3709, 825, 6584, 8955, 4779, 8337, 7928, 5956, 689, 2953, 9668, 4688, 9369, 4661, 9697, 9252, 5369, 5871, 6020, 1524, 470, 1097, 1179, 477, 7842, 1473, 179, 8079, 7512, 7157, 6484, 5028, 4257, 8412, 2808, 34, 2520, 8901, 7340, 2247, 9844, 1931, 4841, 8584, 3659, 6983, 3562, 9264, 6415, 278, 6070, 9219, 1396, 7741, 7589, 9870, 4633, 5477, 8953, 5242, 7169, 2866, 1277, 9434, 8782, 4260, 857, 2779, 3414, 4536, 7595, 6031, 9756, 5157, 2369, 4193, 9890, 7597, 888, 1486, 4051, 8792, 4828, 7366, 211, 1259, 2881, 1288, 432, 3448, 5734, 8115, 1880, 3696, 625, 8897, 295, 6669, 4295, 4788, 5208, 2506, 5432, 9976, 7503, 7849, 5508, 3334, 3889, 6064, 5577, 9045, 4471, 6504, 8241, 2104, 3664, 396, 8314, 6868, 1798, 856, 423, 6707, 4170, 5550, 7776, 6748, 7076, 8341, 695, 6801, 5678, 308, 720, 3149, 180, 4489, 9088, 9003, 7941, 1705, 3582, 4759, 8072, 4623, 9506, 3137, 9416, 7921, 8749, 9293, 7427, 6646, 4236, 77, 9369, 5244, 2410, 9781, 5389, 3510, 4329, 6722, 2915, 4821, 2755, 823, 8091, 6188, 5694, 4403, 7342, 562, 8289, 9428, 1757, 5985, 8772, 3694, 7542, 4598, 9471, 6028, 2603, 181, 9966, 5358, 4248, 7136, 5988, 6218, 1362, 4585, 2334, 1079, 2846, 551, 3996, 5899, 5721, 6841, 7445, 1331, 8327, 9461, 8259, 5341, 7374, 2393, 8124, 1731, 1798, 52, 5279, 7366, 5298, 9990, 7900, 4696, 9271, 311, 7068, 3234, 2203, 2081, 2450, 2290, 1173, 2221, 8404, 424, 6243, 4248, 1697, 8060, 755, 7726, 8331, 3096, 6554, 8330, 2081, 7564, 5596, 1657, 8664, 2542, 9957, 3507, 4213, 8015, 1507, 3792, 650, 2507, 9524, 505, 8269, 8059, 3806, 5561, 9811, 4066, 4499, 3341, 3052, 7374, 5752, 4803, 1688, 420, 8612, 3809, 8242, 1450, 6363, 3194, 737, 23, 740, 1247, 3423, 3397, 8695, 7131, 1595, 1275, 595, 3308, 3014, 8381, 6295, 5990, 3996, 3774, 4332, 9452, 9828, 7598, 1779, 9071, 1995, 8481, 4137, 9359, 4081, 1097, 849, 3275, 5583, 567, 1245, 2784, 9333, 9253, 9671, 3617, 5310, 6101, 3080, 4410, 15, 3609, 7131, 9051, 3179, 8340, 4093, 2433, 4801, 1196, 9106, 523, 7349, 2059, 2353, 4210, 7402, 4121, 2607, 4573, 3692, 9671, 5333, 8564, 3336, 3750, 6033, 6070, 1381, 8454, 8109, 5080, 7894, 5071, 3776, 8758, 5164, 1569, 710, 2739, 4794, 704, 2213, 9815, 6609, 3634, 3300, 8955, 2203, 9980, 2642, 2767, 8914, 7824, 3611, 2392, 9011, 2851, 3587, 3926, 6788, 2759, 7388, 7588, 9409, 7277, 9975, 8350, 5259, 3980, 2019, 7952, 189, 9613, 1553, 4444, 4026, 5308, 5570, 7557, 7095, 5722, 1297, 415, 7520, 9031, 6784, 2001, 583, 7563, 9079, 9393, 80, 5526, 1569, 6352, 2416, 6102, 762, 6306, 3335, 1522, 2395, 8908, 6726, 8618, 6836, 6257, 3898, 9404, 9073, 2651, 2352, 9093, 3483, 9673, 4606, 7032, 9817, 1369, 2287, 9059, 2140, 3041, 3878, 6774, 3171, 1365, 8182, 4599, 3719, 9329, 5247, 2233, 1684, 8207, 950, 1965, 8137, 7508, 3775, 7123, 9920, 8198, 6359, 3442, 1021, 7128, 9111, 6322, 1867, 3962, 2557, 5047, 1450, 9016, 3201, 148, 1902, 5841, 3559, 8515, 1005, 236, 5986, 3849, 2019, 808, 3832, 1633, 3105, 2784, 4682, 6012, 475, 2307, 8384, 1312, 4972, 9227, 3188, 161, 1084, 5625, 8185, 9947, 8538, 6712, 1630, 6938, 9888, 1601, 4654, 5892, 9748, 10, 5660, 7129, 8907, 420, 9522, 6051, 6549, 8011, 2889, 6115, 8634, 4235, 8371, 7478, 9160, 1971, 2897, 4802, 475, 8281, 236, 9037, 2925, 633, 5936, 5378, 4207, 9664, 2081, 1232, 489, 9480, 2144, 1617, 7868, 3644, 4657, 2110, 7520, 3314, 7393, 3054, 9408, 1176, 3064, 3764, 562, 7335, 4989, 1382, 191, 2935, 6082, 2225, 8675, 614, 152, 6754, 6385, 3398, 7155, 9053, 2602, 6616, 7802, 9264, 7443, 248, 2410, 4056, 3542, 58, 5155, 9111, 2911, 1684, 1302, 1195, 6352, 9003, 4602, 1360, 8381, 1542, 4152, 3215, 7084, 8689, 9379, 4001, 237, 4788, 7971, 3078, 9262, 8993, 8277, 4211, 1462, 7794, 6276, 1357, 5520, 7989, 3878, 1091, 2295, 9145, 8260, 6898, 6268, 7704, 3388, 2115, 8203, 6733, 8988, 7308, 2303, 6269, 2270, 7123, 5046, 618, 6473, 4106, 2, 60, 8411, 7741, 7606, 9317, 5518, 3788, 176, 4551, 5906, 4561, 5068, 1543, 7559, 9945, 3276, 2128, 2548, 4086, 7814, 984, 3075, 7378, 5358, 7368, 9080, 1431, 703, 5896, 4280, 3953, 3889, 3245, 2688, 2256, 7751, 8896, 1058, 6214, 2274, 7315, 1330, 6933, 6308, 9037, 3097, 8371, 2778, 5378, 9416, 1138, 4440, 4130, 9823, 7498, 4394, 7293, 8414, 815, 3007, 1580, 9001, 5923, 2258, 4518, 2428, 2900, 8973, 4599, 3064, 6797, 5727, 280, 1512, 9786, 9815, 2581, 8938, 3858, 7936, 9131, 7791, 591, 8837, 5614, 4448, 6539, 6877, 6034, 6840, 4708, 974, 144, 6421, 1160, 2587, 2541, 266, 5846, 6406, 5643, 1351, 954, 3532, 9958, 8719, 5034, 2637, 3219, 6616, 5152, 3622, 8628, 5187, 1172, 7939, 436, 932, 1888, 6258, 6208, 4759, 1576, 550, 2814, 5640, 6496, 826, 8782, 214, 5707, 1327, 2141, 1433, 6566, 3714, 5891, 3799, 4029, 146, 9881, 2591, 8936, 903, 1885, 1026, 6145, 2607, 6924, 823, 3779, 9733, 8341, 27, 8613, 4029, 8076, 977, 8527, 2542, 8440, 3145, 4467, 1064, 8621, 6907, 3941, 312, 6451, 2372, 2359, 4116, 5095, 3621, 3889, 1312, 5727, 6063, 6479, 6465, 8644, 7522, 6175, 5418, 4455, 2004, 4145, 951, 6954, 7730, 5131, 4071, 3293, 3716, 729, 1545, 6261, 2571, 5445, 7710, 6087, 4160, 4299, 6835, 1622, 4403, 4317, 2731, 1186, 4122, 5890, 5044, 2556, 1106, 4565, 89, 9007, 8518, 796, 3533, 7810, 8040, 8759, 5401, 5421, 5788, 3, 9439, 7113, 3239, 3029, 2277, 6045, 2934, 781, 2318, 4112, 1861, 441, 7300, 3253, 5930, 347, 1974, 6103, 6782, 8181, 74, 1040, 1465, 8538, 2707, 3950, 6766, 1828, 2588, 383, 172, 405, 5768, 5523, 6904, 9983, 2728, 5922, 1360, 8799, 2736, 5137, 4492, 6479, 3039, 4540, 1629, 4141, 4921, 607, 4733, 8937, 8106, 8824, 4745, 1719, 8965, 7710, 1257, 4629, 5622, 406, 4525, 1135, 3482, 3555, 2862, 1774, 8465, 1996, 4485, 6540, 7704, 4974, 2903, 8328, 8986, 8756, 8615, 9511, 9762, 4139, 7008, 4072, 5055, 9837, 9535, 8839, 9106, 229, 6172, 1666, 3236, 1071, 4689, 5791, 587, 4111, 4627, 4968, 6790, 1432, 5184, 5348, 6126, 4259, 8326, 5115, 953, 5580, 3654, 9570, 3074, 6208, 8653, 96, 7861, 13, 9369, 2198, 5024, 5528, 5319, 2647, 1397, 5653, 6668, 5605, 7325, 9222, 9710, 4662, 1551, 8262, 6527, 8982, 9073, 3913, 1816, 1870, 816, 503, 5473, 1679, 1313, 4949, 8473, 154, 5498, 2346, 5161, 6874, 2835, 3225, 4687, 6195, 5095, 1309, 7918, 6301, 8789, 8004, 2215, 4018, 5987, 6956, 9951, 3970, 1353, 2714, 3024, 9068, 5471, 1026, 1587, 9691, 6493, 4130, 2637, 7, 6857, 4873, 3125, 7871, 3187, 1642, 1902, 3917, 9204, 3449, 3086, 7281, 7949, 9402, 1217, 365, 3693, 2097, 9919, 3833, 9209, 4470, 1884, 863, 1831, 5854, 2658, 4829, 7465, 1249, 7244, 9359, 1779, 4347, 2514, 4095, 7352, 5703, 2422, 3307, 1074, 1548, 49, 8682, 2969, 1796, 1226, 1884, 1312, 3134, 461, 9766, 8654, 9255, 8367, 2846, 3579, 4611, 7526, 1675, 5554, 8754, 7018, 2521, 9643, 3337, 5480, 5218, 2225, 6429, 8627, 2106, 3575, 3541, 9395, 9770, 6297, 2237, 3088, 1105, 5388, 2608, 2813, 9926, 5048, 5842, 5672, 9064, 3213, 3054, 1238, 9970, 9701, 7617, 11, 1667, 2739, 7701, 2011, 7150, 4500, 2218, 8580, 3623, 9106, 1266, 4032, 6802, 1861, 4884, 1493, 9336, 660, 7019, 5377, 3660, 4767, 8163, 5494, 4514, 2050, 8159, 6355, 4822, 5661, 3344, 4564, 9768, 413, 237, 5372, 6174, 614, 7633, 7929, 5373, 3025, 3402, 1286, 9943, 7388, 4170, 3424, 2914, 594, 7221, 6818, 4192, 9026, 1335, 7374, 9754, 6232, 8948, 2133, 718, 1141, 6087, 367, 4125, 5557, 7338, 7890, 51, 2529, 8165, 2630, 1064, 6678, 6092, 7180, 2785, 1291, 9341, 3679, 1858, 7567, 4509, 4176, 9190, 743, 9018, 7606, 764, 2180, 1859, 5013, 9666, 8670, 9041, 943, 1160, 2150, 9399, 7313, 6926, 6253, 5974, 8263, 616, 5416, 9167, 1084, 1710, 2909, 1434, 9835, 7609, 3887, 6533, 3495, 6395, 9872, 6179, 6422, 8546, 9031, 2424, 4925, 1739, 7241, 3519, 5542, 2546, 3615, 4464, 2971, 9342, 259, 3877, 7686, 7375, 9512, 3942, 3237, 5539, 8814, 235, 5661, 655, 6648, 1958, 121, 2620, 3683, 8240, 9276, 6041, 4740, 7370, 4350, 2242, 4886, 5477, 9520, 6997, 7777, 12, 4979, 2073, 6346, 4, 805, 1039, 2525, 7574, 7909, 6412, 7725, 5003, 7960, 8119, 8840, 1969, 5458, 5022, 4498, 5760, 2503, 2810, 23, 4351, 7067, 2038, 4894, 5976, 7878, 1532, 9375, 4467, 3646, 7052, 9850, 7952, 4437, 8779, 5726, 8485, 304, 1540, 8924, 7752, 8440, 3006, 3279, 4839, 4677, 9025, 6369, 4819, 7098, 9141, 7785, 6694, 6813, 8142, 2876, 4791, 3006, 4061, 6810, 1820, 355, 2847, 2254, 3728, 4257, 8766, 9939, 6279, 4424, 3628, 8341, 9027, 1438, 3712, 4482, 3809, 3494, 4166, 3667, 1137, 4713, 7015, 5725, 7671, 5611, 3648, 1770, 6570, 4758, 8338, 7311, 1826, 4823, 7529, 8237, 2403, 7865, 6344, 6100, 5370, 8845, 957, 2562, 8353, 9417, 9162, 3190, 3682, 1398, 6780, 794, 4351, 886, 5043, 9556, 3461, 6596, 5896, 502, 2949, 5117, 8950, 8938, 5084, 6330, 141, 17, 1209, 1470, 3002, 662, 9786, 9915, 6726, 5092, 6648, 8418, 3340, 7383, 828, 9990, 8492, 1492, 7609, 4453, 2294, 7528, 7745, 5631, 7834, 7344, 388, 8585, 669, 3132, 1985, 4117, 38, 87, 2452, 4689, 9668, 4674, 1777, 9409, 7339, 4001, 9689, 4513, 4224, 2454, 5815, 8228, 7563, 3164, 8057, 8327, 6704, 9672, 7022, 6028, 2235, 4179, 1370, 5020, 8857, 6419, 5952, 1165, 5277, 9478, 4584, 5731, 2712, 3140, 5576, 4244, 9917, 709, 1944, 3924, 6091, 651, 4871, 4971, 7950, 2115, 4597, 9658, 2238, 9176, 821, 6228, 4478, 9148, 7813, 4822, 8442, 1342, 8599, 521, 7524, 1555, 7882, 5514, 728, 8766, 3197, 8298, 8328, 3572, 675, 7857, 9854, 2605, 3219, 1387, 6951, 4741, 697, 4923, 7951, 7325, 8404, 1901, 8527, 9105, 9986, 766, 2576, 8955, 9861, 3078, 4858, 7447, 4353, 1259, 1642, 718, 5612, 8156, 1933, 4637, 9135, 2472, 5163, 61, 8514, 2828, 2643, 7952, 1790, 4063, 4232, 999, 5837, 8418, 8088, 1509, 6757, 3945, 9008, 8745, 4217, 6863, 6037, 7999, 1902, 3594, 2242, 8564, 8194, 9888, 5919, 4331, 7956, 2055, 8097, 5601, 2084, 993, 983, 9897, 4636, 5381, 8217, 8506, 8029, 3419, 8931, 8735, 8098, 919, 2772, 9468, 3267, 351, 1851, 5876, 7836, 5148, 6941, 6435, 5793, 6392, 8010, 6421, 4155, 7417, 4647, 9288, 4743, 2482, 1674, 937, 6766, 6324, 2508, 9901, 6829, 1087, 739, 2304, 2050, 3182, 4767, 4201, 5817, 5593, 2433, 5141, 3839, 2966, 2212, 5207, 9623, 7357, 5476, 2573, 2999, 1187, 9868, 8660, 7414, 2522, 6576, 6707, 3390, 9845, 75, 1652, 7986, 2453, 6961, 677, 7212, 567, 4463, 8632, 2902, 2856, 6106, 1076, 3269, 4340, 460, 4176, 334, 5334, 4619, 5612, 8981, 5592, 1223, 9850, 3392, 9114, 9412, 4507, 2264, 137, 1097, 3234, 5292, 2090, 8004, 3880, 1223, 4888, 2719, 4855, 8410, 7283, 5072, 6755, 8553, 1577, 4034, 4718, 3614, 4156, 3954, 5189, 9722, 9452, 2679, 1900, 5265, 6554, 7719, 5308, 4870, 3432, 4414, 667, 9116, 3939, 6407, 6195, 390, 4430, 5779, 7026, 6843, 6913, 6427, 3121, 3135, 8720, 4906, 7105, 1169, 82, 2613, 8103, 8487, 6204, 8006, 5166, 2740, 579, 3419, 6336, 4639, 3941, 4000, 624, 2082, 2653, 146, 8671, 3975, 4211, 7217, 8835, 992, 2099, 9051, 7208, 7853, 2976, 4351, 3482, 8398, 5233, 5672, 3022, 3077, 7782, 8880, 5944, 858, 8665, 3476, 8176, 9557, 144, 2496, 2336, 50, 4634, 3927, 7846, 2951, 9182, 8109, 2554, 8635, 6501, 4321, 9757, 4046, 9115, 4976, 3097, 9860, 8789, 9035, 4458, 5961, 9305, 587, 2652, 6359, 210, 2601, 5480, 5433, 7450, 7148, 5948, 9634, 1405, 615, 6061, 6034, 1455, 6247, 1221, 7349, 7273, 869, 9436, 4549, 8798, 5889, 2822, 9972, 6914, 11, 149, 5059, 9350, 2727, 1377, 6656, 9407, 4555, 4973, 5520, 1303, 9242, 7058, 3552, 6996, 1491, 8053, 8331, 1499, 5320, 6684, 7232, 8383, 6120, 3056, 9869, 2290, 2157, 7766, 5951, 8127, 4749, 106, 5078, 4594, 4636, 9428, 9301, 4226, 2522, 1496, 5106, 1360, 8827, 786, 9123, 6712, 6424, 702, 4879, 9898, 5168, 5856, 209, 5814, 598, 3505, 8254, 2093, 4629, 230, 4903, 7150, 958, 5712, 8878, 1487, 2279, 5579, 463, 1928, 6145, 9043, 713, 2156, 5824, 8957, 1390, 8820, 5414, 8859, 1749, 6700, 5603, 6870, 9956, 7746, 9356, 3812, 6171, 4814, 739, 1436, 3621, 5164, 5271, 3838, 17, 361, 6307, 1973, 1854, 4433, 963, 5340, 3115, 3820, 3930, 4010, 7429, 3252, 391, 331, 7707, 1415, 2475, 9154, 9813, 2407, 3151, 9314, 4795, 7924, 2925, 7660, 7854, 1864, 3965, 9141, 7061, 3185, 5832, 6050, 799, 5299, 9773, 8744, 8877, 8611, 957, 9729, 3316, 4011, 4639, 6304, 3393, 9834, 2401, 6301, 6953, 8314, 682, 9137, 3167, 4550, 8336, 4493, 2189, 871, 5915, 1397, 415, 7209, 5843, 4096, 76, 5102, 3265, 9595, 5054, 8004, 781, 5554, 1936, 1699, 615, 144, 3122, 3411, 2538, 7492, 2988, 5718, 7932, 5328, 7914, 1337, 8505, 5207, 4938, 913, 763, 1288, 1485, 6855, 3880, 2251, 6942, 1371, 1874, 2405, 7448, 1771, 945, 6037, 5766, 6406, 4727, 2613, 3011, 8408, 6916, 6238, 2598, 4260, 1014, 3543, 7322, 798, 8556, 3840, 7086, 5216, 7603, 3004, 2889, 5121, 8253, 530, 3160, 1350, 5810, 3026, 8735, 3876, 5679, 709, 2417, 6809, 9371, 9115, 7061, 7348, 2286, 8041, 8217, 6236, 2968, 8997, 6148, 5796, 5551, 4154, 4446, 7285, 8232, 3871, 9540, 9973, 7777, 1507, 7104, 5502, 1291, 887, 4488, 7582, 9042, 2407, 3040, 3536, 6608, 9792, 7501, 738, 2433, 761, 4529, 406, 3710, 5772, 9337, 9542, 4371, 4036, 8541, 8692, 670, 6560, 4719, 1761, 5585, 8516, 1699, 9424, 60, 4442, 6105, 9629, 6478, 8089, 5049, 5031, 7167, 8251, 8416, 2178, 6042, 3733, 6990, 4807, 8074, 1589, 3283, 7640, 2163, 9515, 5197, 8224, 7352, 8886, 7479, 9467, 9919, 1365, 9980, 5600, 8014, 1899, 7106, 755, 2037, 2205, 2175, 9102, 4936, 6432, 8364, 6146, 5272, 4377, 4292, 1079, 2048, 5153, 1594, 5229, 6279, 8260, 7662, 6274, 5738, 6157, 6234, 1927, 1015, 6936, 9580, 6243, 9151, 8238, 2914, 9040, 286, 9359, 2561, 6133, 3228, 7747, 5694, 85, 2035, 2471, 4775, 119, 7825, 7017, 8246, 1247, 7509, 7967, 95, 485, 9392, 846, 603, 6152, 4001, 1491, 7767, 5611, 5735, 611, 2510, 2779, 881, 4829, 2642, 5009, 3011, 5971, 4652, 8547, 307, 4174, 8050, 5732, 3972, 3994, 789, 217, 9116, 1498, 7786, 4265, 6843, 1828, 9998, 7643, 7138, 1099, 7774, 1189, 9137, 239, 9800, 3226, 4718, 9385, 6668, 3911, 5805, 2651, 4437, 1911, 389, 9888, 3589, 6505, 5113, 2855, 1363, 5287, 1897, 8500, 2835, 3467, 7581, 697, 5427, 8626, 4433, 1575, 1767, 4792, 4062, 719, 8188, 8983, 1390, 2734, 6071, 5915, 521, 3031, 3020, 425, 5948, 9028, 1227, 1809, 9299, 6299, 2518, 1490, 5979, 2123, 9499, 1224, 1311, 4551, 5479, 6437, 2292, 9235, 3601, 8796, 8948, 727, 7768, 9073, 7526, 5119, 6985, 4269, 1045, 271, 486, 5353, 6758, 2091, 6383, 6989, 8256, 9365, 8665, 5354, 5701, 3033, 3826, 5290, 6424, 5901, 8135, 1829, 4966, 624, 599, 9582, 9535, 2020, 1675, 624, 8400, 7165, 8432, 8746, 4043, 8058, 9162, 3391, 1794, 1388, 4221, 7103, 8756, 2823, 3663, 4184, 1039, 8563, 7285, 9492, 2507, 3022, 489, 9251, 4203, 1676, 934, 9509, 1533, 240, 3808, 1582, 9551, 8917, 3286, 5829, 8030, 8327, 5449, 7511, 6605, 3443, 1077, 7035, 9239, 768, 7532, 4870, 438, 4329, 7191, 9290, 9454, 7830, 837, 8542, 6390, 9767, 5167, 4265, 5015, 6480, 9008, 4814, 1751, 8385, 5860, 8313, 2490, 4026, 2395, 2715, 7373, 9062, 6358, 4710, 3430, 6519, 5161, 1417, 2925, 3126, 6730, 6619, 4063, 4213, 7665, 5861, 1567, 6491, 3745, 6239, 7324, 2350, 6804, 96, 7142, 5213, 3817, 5286, 7793, 5038, 6833, 6634, 3325, 6684, 5696, 7933, 4938, 4255, 9417, 1986, 9687, 5843, 2943, 1286, 6150, 7306, 6298, 5780, 5656, 9422, 6388, 2924, 8358, 4452, 850, 9316, 2928, 3941, 4375, 2081, 7182, 6292, 6809, 2326, 6043, 5674, 6179, 8675, 6636, 9523, 9917, 8240, 9672, 5796, 4679, 8558, 7651, 2144, 8348, 7745, 5379, 26, 243, 8234, 391, 7175, 9613, 7175, 6074, 2997, 3520, 3254, 654, 898, 9250, 7552, 2149, 1829, 86, 2733, 4557, 2498, 2216, 3652, 5190, 3050, 8362, 1891, 1301, 9226, 5718, 4172, 4898, 964, 7045, 9284, 9258, 5981, 4910, 3972, 6461, 9214, 9168, 2160, 3917, 3273, 5991, 7027, 1277, 6598, 4476, 247, 2219, 7191, 9143, 4572, 9087, 4857, 6229, 1574, 5498, 8856, 1466, 4178, 1306, 723, 9187, 5675, 4356, 2602, 7384, 4251, 2006, 7978, 4451, 234, 5790, 4859, 4130, 7878, 7745, 2624, 1663, 4331, 9160, 6359, 7972, 7058, 4240, 671, 2595, 4981, 9656, 647, 1412, 4385, 1092, 2760, 4552, 2131, 2454, 299, 1651, 1569, 8665, 9754, 3897, 5971, 160, 7224, 8634, 6627, 5565, 4719, 3087, 8479, 6426, 4802, 4848, 131, 2747, 3023, 1209, 8125, 3297, 1893, 2804, 6002, 1878, 1226, 7240, 5937, 9704, 4158, 9029, 2909, 5481, 8443, 822, 9542, 4872, 1607, 2305, 9960, 8511, 3290, 5890, 1213, 9210, 131, 5909, 6965, 7271, 4761, 6418, 4605, 6376, 4373, 2746, 379, 5779, 2841, 3285, 7514, 5562, 3928, 2298, 5577, 1435, 8566, 7805, 4304, 6058, 6898, 4966, 3637, 5167, 7448, 745, 3926, 5695, 422, 734, 6549, 5717, 5106, 4104, 8551, 4886, 8254, 1288, 6540, 983, 9627, 8194, 3112, 7791, 9750, 7733, 4434, 9145, 1800, 2043, 8196, 3737, 6839, 6122, 3576, 1209, 8231, 968, 98, 2831, 3778, 8354, 2258, 3900, 2577, 3165, 8337, 2798, 7574, 189, 4845, 5745, 4756, 5201, 8022, 3174, 2395, 4126, 5168, 8524, 3426, 5123, 3266, 7819, 5835, 7381, 3610, 9491, 5906, 2833, 6124, 7776, 5999, 8606, 1797, 3113, 1378, 345, 5443, 178, 5023, 9399, 1083, 314, 3932, 2117, 6643, 5984, 3469, 8485, 9576, 1201, 6344, 1094, 1708, 9189, 3987, 173, 6885, 115, 9572, 610, 9131, 5610, 1455, 8617, 9366, 5427, 7969, 9031, 5134, 239, 8237, 4500, 6284, 1112, 9294, 6817, 3996, 1570, 3878, 8419, 897, 6566, 1651, 9213, 2750, 9293, 5492, 390, 4549, 223, 4415, 6879, 7477, 1529, 7794, 9292, 1455, 8069, 1919, 8045, 7320, 6292, 3494, 5443, 3114, 3693, 6795, 6042, 3545, 4910, 9242, 1718, 2502, 7983, 785, 6132, 1718, 6241, 9516, 1505, 7140, 5660, 7215, 9478, 6804, 3948, 9493, 9738, 1695, 1903, 3266, 5144, 6991, 1633, 8575, 8491, 7, 8388, 480, 4547, 6507, 6699, 4584, 2983, 8227, 2768, 2271, 6428, 241, 4176, 7181, 468, 2528, 4403, 5907, 7119, 1930, 2933, 315, 186, 4112, 9688, 6991, 1246, 2345, 8890, 6097, 5371, 2927, 7295, 9529, 5435, 7098, 5732, 8635, 5665, 1911, 4757, 7591, 3702, 6071, 4726, 2799, 9456, 7648, 1114, 5023, 4687, 5931, 4963, 9028, 1465, 6248, 612, 5317, 3989, 3141, 1077, 1469, 6583, 1715, 1464, 9587, 7131, 3121, 3173, 2041, 6621, 9566, 9627, 6094, 8782, 842, 1983, 7349, 8510, 5200, 4757, 4914, 709, 965, 5034, 1464, 6004, 898, 1753, 6777, 8397, 2472, 5306, 6970, 8547, 609, 8405, 5970, 944, 4133, 1728, 808, 2086, 4718, 7673, 6042, 1867, 3506, 9159, 2808, 1794, 3068, 4047, 5430, 6418, 5604, 9852, 201, 3160, 1699, 7568, 5098, 468, 4810, 70, 6517, 124, 4557, 9039, 7727, 4555, 7256, 7632, 9159, 2328, 7684, 6015, 1789, 4708, 7568, 2554, 156, 5685, 1851, 6295, 7709, 5107, 3299, 4319, 1338, 1557, 1666, 419, 5030, 7974, 5597, 1645, 6269, 9927, 6800, 8884, 686, 9797, 1721, 6333, 5270, 349, 6784, 9605, 1247, 2406, 9731, 6446, 6128, 9622, 9597, 5445, 8911, 7601, 4969, 7885, 6592, 291, 7914, 4686, 9986, 4692, 2248, 4972, 5523, 2526, 9535, 9166, 5550, 7506, 8835, 4895, 7486, 9545, 5761, 2898, 564, 9156, 660, 3273, 8051, 2667, 4783, 9340, 1743, 2738, 7560, 6964, 1959, 3701, 9558, 8696, 9456, 9624, 12, 2608, 4282, 8676, 7336, 5054, 7443, 2445, 6632, 9286, 9764, 261, 4779, 2367, 3792, 861, 5763, 6442, 9325, 4633, 4163, 9198, 2331, 7869, 8220, 9343, 448, 8404, 549, 1573, 4152, 6093, 2450, 5539, 1202, 2666, 8838, 5776, 9381, 8959, 3841, 8762, 7294, 8434, 2280, 6550, 9894, 2468, 8728, 1963, 7268, 7534, 8547, 2338, 6836, 3506, 4347, 4204, 357, 3186, 9653, 583, 1826, 8859, 1862, 866, 7414, 482, 3402, 8218, 5131, 6236, 6576, 9062, 2247, 8806, 8023, 1902, 3234, 2485, 9820, 9866, 6089, 9457, 8959, 7581, 2697, 7516, 694, 1214, 5055, 1291, 4322, 4045, 5709, 23, 895, 2427, 9234, 7777, 9859, 4163, 4420, 6613, 9783, 5967, 9547, 7985, 7105, 1303, 4748, 8557, 6960, 9066, 3241, 5309, 2987, 1527, 5675, 5005, 5930, 331, 7072, 2167, 3206, 5509, 655, 1473, 9638, 4611, 5661, 2509, 633, 4774, 8472, 9170, 6577, 59, 159, 5137, 6549, 2482, 6858, 2298, 5696, 407, 7783, 9872, 4196, 8886, 5749, 5841, 8403, 3864, 7926, 6530, 2884, 1691, 156, 76, 2029, 5323, 2400, 1872, 9705, 6623, 6604, 4574, 6814, 4881, 6450, 5270, 539, 9365, 8665, 4149, 5004, 878, 5454, 3832, 8203, 2965, 2079, 6024, 5296, 1085, 9949, 6885, 6006, 9070, 8925, 8066, 4781, 8389, 4217, 6911, 9881, 4000, 190, 3057, 4599, 3082, 5045, 1877, 7151, 9043, 7979, 3337, 6876, 3271, 2093, 8988, 8050, 9091, 6505, 5037, 3886, 9858, 6762, 4306, 8999, 682, 3645, 2651, 7460, 1149, 2562, 3078, 9434, 6026, 6627, 2931, 5214, 1612, 4134, 7989, 4335, 6527, 3844, 4010, 5221, 6720, 3634, 9580, 3609, 1048, 5360, 674, 6085, 6461, 2626, 6816, 8250, 3675, 3603, 9346, 5546, 8763, 3725, 1654, 148, 7051, 6703, 8288, 1663, 9518, 8151, 3733, 9279, 4440, 9004, 3645, 4330, 7967, 9607, 9159, 606, 9869, 2819, 8884, 3589, 6150, 1149, 1947, 7769, 4954, 7942, 377, 8422, 5010, 4278, 3190, 4974, 2247, 2112, 8543, 4197, 8219, 6600, 6611, 2138, 7323, 8853, 7482, 5319, 8756, 6263, 1574, 3609, 6768, 5479, 2443, 4987, 8486, 6838, 8801, 4250, 5526, 4345, 8567, 5925, 9511, 8138, 250, 3418, 9672, 7136, 2110, 3367, 2847, 2495, 3539, 2733, 7554, 3980, 7110, 3163, 82, 9075, 9835, 9332, 6696, 3747, 2019, 3042, 356, 7631, 61, 7089, 9404, 6090, 636, 3790, 2264, 9907, 7702, 214, 5964, 1607, 3747, 5901, 211, 9858, 5432, 388, 438, 4060, 7265, 2086, 6674, 8503, 2518, 8140, 7324, 3010, 3806, 7448, 253, 9142, 5837, 4973, 7320, 9279, 7230, 1692, 7461, 5519, 7331, 3628, 1517, 761, 8735, 8763, 6930, 4992, 8022, 565, 6223, 9828, 3977, 6344, 7460, 3250, 8156, 1013, 9350, 9527, 1084, 5593, 5934, 6754, 7088, 7727, 5953, 4470, 7549, 6647, 9127, 9457, 7392, 3394, 4226, 6490, 1749, 5979, 581, 5543, 6263, 4618, 1018, 261, 6596, 8876, 1042, 6576, 6183, 3730, 5387, 1833, 10000, 6276, 8960, 6030, 9595, 7481, 7388, 5760, 9124, 938, 3892, 6549, 1082, 2810, 4555, 2647, 5902, 4100, 2370, 3973, 7383, 1682, 3104, 5814, 8317, 4118, 2794, 427, 2058, 238, 6487, 8818, 5321, 8191, 1656, 464, 6117, 8867, 6347, 2670, 5823, 7896, 173, 6015, 7811, 9025, 3923, 6725, 2927, 3046, 6777, 406, 2686, 4062, 9400, 3488, 5593, 1107, 4822, 1195, 2529, 5779, 5471, 1581, 5340, 7403, 478, 462, 2714, 1651, 8312, 1314, 8908, 9207, 1038, 6755, 5190, 2473, 6516, 9798, 9627, 6686, 9252, 8684, 1780, 6539, 6978, 1802, 5828, 4795, 4543, 3524, 7151, 4671, 3336, 5113, 3410, 9669, 8185, 495, 1114, 8261, 8822, 2493, 9169, 9771, 5851, 5941, 3794, 8937, 3135, 5515, 7643, 3146, 8319, 9338, 7038, 4502, 9170, 8650, 2282, 5718, 1210, 8841, 3624, 8984, 2105, 928, 7567, 5546, 9035, 9552, 5804, 1866, 4709, 1982, 3623, 296, 1354, 7811, 6074, 8861, 2878, 6080, 861, 9541, 9146, 5106, 9467, 4169, 9886, 3046, 5247, 7699, 8792, 1699, 4576, 2112, 7982, 4839, 3461, 5774, 4475, 6040, 4152, 1268, 7480, 3253, 5944, 2832, 4045, 4011, 6030, 6577, 3553, 1110, 3311, 1467, 2204, 844, 8025, 5280, 1237, 6469, 3743, 2663, 8280, 8216, 7865, 2548, 1167, 6863, 8389, 6661, 3372, 2408, 8921, 1197, 4012, 3227, 7887, 5981, 6675, 8474, 287, 1454, 1668, 8069, 4752, 2426, 3173, 3415, 770, 1245, 8753, 3, 6207, 6732, 2736, 8726, 6305, 7528, 9149, 7294, 17, 8261, 9873, 5593, 1371, 6134, 6997, 794, 6156, 1664, 5546, 7076, 3786, 6294, 9170, 4074, 3302, 1959, 3422, 8466, 1656, 9465, 4051, 8251, 844, 1601, 4581, 4883, 5794, 1175, 3362, 5354, 7575, 2579, 3495, 3922, 2003, 5430, 9828, 5122, 6450, 369, 7526, 8515, 7123, 4935, 1853, 9328, 4638, 7508, 5925, 8194, 4113, 7062, 684, 9763, 5360, 8292, 6486, 4448, 5269, 7501, 19, 5452, 9806, 2236, 9938, 3171, 3987, 8341, 6088, 4745, 5764, 4928, 1588, 3023, 4582, 9874, 2198, 7551, 4774, 7744, 382, 8813, 1867, 2596, 2611, 2041, 9479, 4161, 5203, 8998, 1603, 3692, 9996, 4028, 6541, 3328, 1766, 7121, 5610, 2648, 3517, 5715, 6446, 5993, 7735, 8808, 372, 9372, 341, 9622, 8878, 8170, 8783, 9067, 7938, 4573, 7679, 1824, 9614, 6868, 8032, 5235, 4343, 4861, 2267, 3037, 5489, 8397, 4333, 7506, 9148, 7157, 46, 990, 3137, 753, 3886, 165, 9368, 7023, 5793, 4132, 9084, 5937, 2645, 2487, 7262, 1160, 5406, 8933, 3584, 6073, 1529, 6251, 1659, 1043, 1803, 8090, 3921, 658, 5316, 4909, 2279, 7539, 7457, 7030, 9936, 4145, 8507, 6569, 1255, 509, 2509, 5130, 9922, 1577, 6089, 5097, 8735, 9281, 2225, 347, 2143, 2557, 4973, 8435, 6862, 886, 428, 5362, 8419, 4238, 3390, 6839, 7198, 9511, 6424, 4078, 8963, 104, 7098, 7888, 4036, 8922, 9530, 8822, 640, 6187, 6967, 2388, 7858, 1553, 5650, 7218, 3993, 3517, 8842, 1261, 6843, 5828, 7929, 326, 1743, 2078, 239, 7950, 4934, 1473, 6853, 9645, 2955, 4808, 5994, 7856, 8994, 1750, 9968, 3112, 64, 3907, 558, 5276, 8917, 2831, 4230, 5191, 2761, 345, 9467, 7887, 4254, 7525, 5639, 6759, 119, 9766, 4455, 645, 7669, 2214, 4354, 8487, 3923, 6839, 6100, 3882, 2593, 4524, 1192, 8803, 77, 3938, 5455, 7841, 3888, 8582, 6216, 8708, 9412, 7777, 4496, 3721, 567, 7450, 9375, 5477, 4968, 8929, 1739, 6632, 1514, 3552, 2668, 7775, 1680, 7726, 491, 4734, 39, 3138, 6141, 224, 3459, 9302, 5025, 3416, 3199, 262, 3457, 2873, 7414, 7370, 1174, 1707, 5585, 2762, 4378, 950, 7950, 5789, 3591, 2848, 9817, 4080, 5741, 2784, 7265, 1643, 843, 3993, 4318, 9093, 8565, 1224, 4920, 4169, 5637, 6971, 87, 7199, 6849, 9071, 3571, 7956, 1708, 1104, 3920, 8736, 8124, 52, 5426, 6764, 1272, 5549, 6073, 2314, 5001, 3217, 1303, 1912, 3825, 3682, 7987, 625, 2812, 6199, 386, 4060, 3405, 2338, 4072, 3342, 5579, 2313, 6024, 2246, 7273, 9469, 52, 3173, 2714, 9268, 2758, 1101, 4236, 9782, 5142, 2665, 3461, 2087, 1558, 1928, 2012, 3344, 3625, 237, 4168, 7714, 5303, 5280, 7919, 8526, 8944, 2886, 8282, 8331, 5945, 8888, 9331, 1618, 6436, 368, 170, 453, 8663, 6497, 2909, 8121, 4529, 9286, 2107, 494, 2061, 3428, 3497, 512, 9873, 1830, 4419, 5727, 7809, 3022, 8447, 1007, 6794, 3527, 704, 7515, 674, 4631, 6076, 7020, 1353, 1883, 7497, 7025, 4680, 5841, 184, 330, 3545, 8995, 5558, 2479, 4816, 4238, 3004, 6248, 6713, 7207, 6981, 9011, 9080, 8522, 1466, 4381, 1941, 5108, 1205, 2559, 3381, 4025, 7764, 5017, 9356, 8109, 6058, 5810, 6601, 2420, 7452, 4825, 4480, 5604, 8920, 8369, 4125, 5177, 195, 8860, 3264, 8534, 8275, 1196, 4049, 3053, 5135, 9576, 8070, 6696, 7307, 3789, 2087, 1537, 3492, 2251, 2449, 4459, 2148, 9481, 7552, 3148, 1114, 6314, 7541, 9074, 7816, 109, 2889, 2789, 8488, 9422, 5926, 1479, 4135, 3606, 608, 2364, 7190, 3384, 6679, 3930, 6834, 730, 1275, 7167, 4997, 444, 7363, 1330, 8123, 9571, 7499, 295, 8885, 4467, 1993, 475, 3872, 5560, 7992, 4811, 3290, 6858, 5888, 1479, 5137, 4971, 7770, 2092, 6430, 2431, 9454, 185, 4525, 3020, 4267, 736, 4031, 2673, 1585, 8602, 2044, 2201, 329, 3332, 5007, 9843, 2525, 6367, 5708, 3387, 4505, 1551, 1785, 3838, 1319, 3615, 1294, 923, 1052, 6631, 1938, 1854, 6323, 4790, 575, 6398, 7513, 25, 8039, 1100, 2133, 4535, 2723, 7960, 7209, 4962, 6417, 2105, 4662, 5614, 6222, 9779, 7770, 4138, 6308, 3289, 2832, 30, 2473, 5401, 9782, 3964, 8358, 6616, 9042, 754, 3718, 2726, 8021, 6849, 8376, 4926, 4441, 6119, 7153, 3033, 6050, 4711, 6373, 3058, 1734, 7834, 9905, 4751, 1822, 9369, 1089, 4900, 6564, 8522, 3137, 4589, 8213, 3546, 8584, 7844, 2242, 6472, 4879, 7925, 853, 6734, 6444, 3626, 8819, 9496, 4397, 7156, 2217, 2116, 2291, 9870, 9459, 2479, 7321, 8158, 4695, 855, 8894, 1751, 4342, 9431, 5987, 5279, 9107, 9808, 6205, 7941, 6246, 985, 8520, 922, 4770, 7200, 2742, 7061, 2785, 6545, 1426, 7270, 9134, 8522, 9617, 5933, 5541, 1091, 9320, 8126, 4339, 7223, 7745, 755, 3058, 2228, 3718, 9277, 664, 843, 6012, 753, 8675, 3454, 1216, 2545, 7466, 1366, 1129, 2348, 8997, 5264, 2421, 9700, 4366, 134, 1841, 8935, 9914, 9754, 4293, 156, 8008, 2358, 1080, 4905, 1895, 9474, 3182, 8179, 1798, 1058, 1344, 8178, 1718, 3518, 7038, 3768, 9680, 2989, 8985, 1869, 6735, 4637, 2534, 9285, 8433, 6560, 5141, 7394, 7435, 8497, 7177, 3914, 3454, 8154, 5481, 2934, 352, 28, 767, 3293, 5090, 7721, 369, 1699, 1168, 5379, 9619, 1239, 3987, 9412, 3745, 7012, 7318, 3559, 5652, 3630, 610, 9500, 5563, 9553, 6664, 8065, 4142, 7587, 1528, 2889, 5192, 1357, 5450, 5278, 7201, 3263, 8382, 6476, 2855, 3625, 8899, 1708, 4669, 5320, 1845, 8501, 4238, 7528, 967, 6338, 7363, 6568, 170, 5818, 9060, 4780, 2397, 2861, 3617, 7103, 324, 6856, 2020, 25, 2174, 1592, 4922, 4569, 9792, 5733, 216, 4975, 8350, 6895, 2500, 76, 2050, 7338, 2507, 3183, 2262, 46, 5158, 8641, 226, 1810, 5055, 8713, 5504, 3462, 958, 5307, 3215, 1637, 3491, 9508, 7822, 6212, 3071, 4004, 1236, 8060, 291, 2130, 8928, 7745, 909, 7837, 666, 4414, 3855, 4645, 9868, 473, 589, 7155, 7486, 1776, 2519, 3022, 6153, 9028, 1297, 5313, 4731, 8128, 4007, 3700, 1547, 2591, 3722, 3456, 3131, 3493, 5769, 3603, 8857, 292, 5791, 2884, 7999, 7619, 957, 9962, 7708, 6901, 6213, 3457, 5975, 2028, 6616, 8194, 2163, 2871, 2951, 4563, 7748, 8259, 6021, 7570, 9522, 9985, 5605, 5531, 7234, 5035, 4168, 8339, 3520, 1574, 8317, 4591, 1808, 6167, 3401, 7465, 1523, 6613, 153, 3800, 1582, 5790, 7266, 8746, 8499, 9580, 7267, 4255, 9458, 7572, 1134, 3106, 6070, 7158, 8470, 5922, 383, 4397, 4383, 7476, 5152, 7703, 5063, 4036, 2329, 5881, 2393, 713, 8242, 2098, 9246, 3123, 8398, 4057, 4506, 9837, 9085, 1024, 9570, 2153, 9761, 2028, 6333, 5439, 5908, 2767, 2901, 6682, 4547, 7236, 7170, 9120, 1440, 7694, 967, 7257, 8418, 3109, 8502, 3638, 4547, 371, 6494, 5533, 5416, 1649, 955, 8831, 4687, 8964, 5330, 2812, 4222, 2298, 2763, 948, 1340, 3598, 4575, 8681, 2562, 1351, 5400, 5346, 380, 8688, 1800, 9261, 4500, 6904, 3813, 1408, 1586, 3069, 5635, 811, 8839, 5370, 3890, 4242, 40, 6210, 2445, 5399, 9365, 4437, 447, 6592, 7827, 2559, 1914, 9329, 6468, 2443, 704, 1667, 2497, 3519, 2777, 1741, 7837, 1721, 9205, 9537, 9714, 6536, 142, 137, 5114, 377, 6522, 8693, 4997, 7277, 8486, 6320, 3727, 7648, 669, 8217, 6120, 9770, 1564, 5056, 4073, 10, 8108, 3760, 802, 777, 5186, 1460, 5895, 2123, 694, 5056, 8102, 6536, 8448, 7741, 1487, 523, 697, 9760, 8644, 6694, 3956, 251, 9173, 4217, 4776, 6486, 2722, 312, 6694, 6619, 211, 950, 4594, 2744, 5763, 2434, 5571, 9867, 3028, 5946, 3637, 4291, 495, 8387, 7746, 1173, 1219, 557, 7842, 8066, 4264, 7583, 7252, 987, 2478, 7257, 4365, 7256, 9695, 9967, 3565, 4539, 8347, 6317, 6435, 1298, 8124, 9213, 346, 595, 3232, 4892, 8233, 1893, 9011, 6086, 5343, 672, 3547, 8107, 3133, 2195, 1077, 91, 5956, 1177, 8552, 484, 7201, 3661, 5430, 2373, 7100, 3293, 5950, 1092, 6631, 9463, 5773, 7956, 4222, 4908, 4266, 150, 719, 3131, 5981, 102, 9451, 9705, 9104, 2999, 3565, 7173, 3797, 5277, 3810, 7117, 7635, 7673, 8935, 8286, 867, 7609, 8305, 5692, 3039, 327, 969, 3084, 4842, 2872, 4142, 4636, 3792, 9643, 6926, 3821, 6022, 9255, 5287, 2884, 2260, 5213, 7558, 2937, 9721, 5632, 8659, 3444, 6855, 2536, 6122, 7755, 3781, 4303, 3625, 3231, 2406, 118, 9139, 843, 4338, 4329, 3712, 2319, 2173, 5558, 8302, 9575, 362, 1686, 2283, 7010, 3498, 9476, 9000, 628, 9563, 4165, 7274, 69, 8289, 4247, 7810, 6899, 3117, 4500, 7688, 763, 483, 1631, 9090, 5929, 1461, 113, 2927, 6975, 8457, 5059, 5506, 865, 2515, 3583, 4776, 5897, 8160, 9807, 4473, 4757, 7207, 2056, 3092, 8285, 9197, 2661, 3075, 194, 8890, 3219, 9269, 5242, 209, 7018, 113, 5110, 324, 5420, 7265, 457, 1870, 270, 332, 1161, 8579, 6049, 3103, 5672, 640, 5039, 8004, 1536, 264, 3513, 5726, 6755, 6283, 638, 3653, 3540, 8003, 41, 3522, 3908, 4679, 7660, 3161, 2785, 1175, 2979, 8648, 4000, 3083, 4849, 1811, 239, 3155, 4414, 5390, 3389, 5595, 619, 4738, 8403, 765, 1901, 3226, 5397, 219, 394, 6135, 8764, 201, 5344, 1448, 5109, 7054, 8288, 9626, 2006, 5795, 5608, 6709, 1886, 9985, 359, 4157, 5980, 512, 6165, 4834, 2384, 8375, 317, 9880, 3253, 8069, 8525, 2621, 9001, 3332, 7626, 1273, 8450, 8352, 5617, 1810, 6261, 9512, 2989, 6735, 8655, 4636, 35, 230, 4068, 5982, 5885, 2749, 2952, 6489, 6426, 8975, 1736, 8702, 6223, 6594, 9139, 4711, 6457, 4462, 5595, 5214, 7985, 8135, 4392, 4317, 6526, 3049, 7098, 2502, 3809, 918, 4735, 3704, 7599, 8627, 8540, 3256, 6257, 6815, 1525, 1626, 8826, 6521, 7954, 2124, 1250, 5580, 6541, 3197, 8434, 3508, 9585, 6120, 7067, 1286, 4956, 2565, 3793, 5032, 7250, 1777, 5794, 7410, 1936, 3197, 9593, 5209, 9204, 5575, 7699, 7213, 410, 6844, 3634, 5544, 1463, 8991, 9848, 4785, 670, 1562, 7709, 5466, 3761, 3806, 7926, 982, 2487, 3487, 3499, 4162, 2832, 5473, 2988, 5067, 6645, 1148, 5361, 8046, 1068, 7264, 1791, 3776, 3050, 1123, 7227, 3074, 1001, 8777, 7061, 1982, 2883, 7131, 6631, 4699, 8123, 4190, 1553, 3672, 7139, 1201, 7708, 5354, 5376, 5336, 2898, 6146, 3415, 606, 3058, 278, 9112, 7408, 9221, 2863, 8371, 9718, 9949, 2173, 5860, 5801, 211, 2955, 2500, 8413, 3288, 4594, 2808, 9896, 7251, 7443, 27, 5062, 5622, 5528, 8454, 4343, 5105, 1122, 357, 3139, 1337, 5790, 9247, 7208, 8812, 2005, 3722, 7047, 209, 6699, 5136, 7940, 6771, 6805, 6866, 6055, 1104, 2498, 2078, 2897, 1331, 660, 1516, 662, 1576, 8395, 7138, 4935, 7847, 5367, 1328, 863, 3527, 4860, 1814, 1196, 845, 4077, 8219, 9428, 8308, 1453, 5616, 897, 2492, 214, 4343, 509, 1348, 3182, 4135, 8409, 4115, 5454, 1294, 5130, 426, 6880, 3119, 1967, 68, 9047, 827, 3721, 8732, 1361, 2261, 9709, 2558, 602, 8400, 6605, 9955, 1483, 5671, 1459, 792, 3348, 5509, 5987, 3122, 1865, 9059, 2099, 3190, 5914, 6161, 1981, 36, 9445, 6736, 177, 7296, 8654, 8019, 2941, 1656, 667, 616, 1760, 6324, 1196, 181, 9255, 1713, 5179, 5276, 7940, 644, 2051, 8611, 7220, 914, 1768, 4213, 1219, 9235, 1024, 3255, 412, 7257, 9557, 93, 3868, 4042, 583, 8410, 6270, 1615, 5746, 1813, 1306, 5158, 7491, 7350, 3218, 7161, 2961, 4612, 9741, 4491, 5152, 2064, 4292, 6552, 1637, 23, 8722, 4168, 7965, 4406, 500, 1754, 326, 3917, 9016, 4341, 9903, 1059, 8896, 567, 5411, 3144, 3901, 7718, 2346, 7094, 4246, 398, 73, 1694, 553, 2827, 8862, 3348, 7921, 3746, 3976, 3090, 3542, 9654, 90, 3799, 4555, 2386, 5485, 8432, 2914, 8777, 5579, 5968, 3612, 9676, 1980, 6791, 6310, 2691, 8939, 5755, 8284, 2394, 5734, 8186, 2977, 8539, 8866, 8759, 332, 6020, 8697, 8403, 5701, 9639, 4071, 2398, 5876, 6646, 3409, 957, 9033, 4124, 8077, 5421, 4909, 151, 8042, 5689, 4661, 9000, 7566, 2592, 7035, 8463, 3815, 9426, 9993, 2884, 6426, 7354, 2324, 5749, 9232, 7164, 2316, 8274, 9913, 7842, 890, 4860, 9877, 3987, 9287, 4525, 2585, 6432, 767, 3890, 8901, 7389, 7051, 8862, 8729, 710, 2782, 3904, 8533, 9862, 8161, 8484, 2207, 9012, 8081, 640, 4940, 3163, 6512, 3238, 6215, 1817, 2606, 8178, 6085, 8624, 1621, 4809, 7323, 2469, 7519, 281, 6804, 6175, 4704, 7286, 7188, 6105, 3922, 2965, 7814, 6530, 2243, 9053, 6287, 9983, 5877, 2794, 6399, 6793, 2070, 452, 5962, 8090, 3471, 9188, 4779, 7960, 503, 7356, 9741, 670, 4656, 2715, 7669, 8819, 227, 2898, 3489, 4015, 1991, 5376, 5839, 7988, 837, 3668, 5845, 5944, 9995, 3706, 9850, 6435, 1115, 7098, 4214, 6945, 8946, 226, 1180, 4721, 1746, 6894, 7962, 4700, 7626, 7099, 3092, 4563, 8949, 7483, 2240, 8754, 8028, 9072, 4708, 2035, 5945, 2333, 2472, 7734, 6551, 8742, 4783, 8175, 9372, 2712, 8200, 7513, 7269, 1031, 9418, 6902, 8637, 7273, 1154, 41, 5459, 9996, 6167, 1213, 8505, 3444, 6184, 6860, 8327, 3370, 6680, 1729, 3988, 7663, 6805, 8872, 7252, 5158, 4999, 1390, 8080, 1257, 645, 7402, 2362, 5096, 1090, 3766, 5325, 5021, 2598, 5084, 1179, 3187, 1554, 8056, 9202, 7851, 30, 4428, 664, 5441, 4849, 3417, 4628, 5834, 5621, 6324, 5198, 765, 3641, 1526, 1205, 5419, 2341, 5602, 4187, 9600, 3184, 3086, 5741, 8294, 8883, 2088, 8293, 5842, 2738, 8105, 5694, 8209, 763, 8656, 6259, 2700, 8906, 6010, 3628, 1332, 5442, 7183, 9452, 3962, 6342, 3039, 6809, 9043, 6193, 1940, 9711, 8204, 3161, 3494, 5516, 1311, 7422, 552, 9996, 7802, 6527, 7514, 4578, 5928, 8330, 1784, 1595, 6692, 5392, 8930, 7688, 549, 3020, 1984, 851, 7011, 385, 3419, 3173, 1368, 838, 8790, 7794, 6699, 9891, 5504, 5333, 4241, 4532, 5372, 6962, 8458, 3430, 1643, 3422, 5497, 4065, 3483, 1237, 7449, 5106, 8558, 9385, 8465, 5182, 3050, 2613, 4993, 192, 9572, 4899, 7627, 4603, 4161, 3636, 6057, 9960, 2062, 5438, 1039, 6607, 5047, 1544, 2180, 6889, 5662, 6954, 5366, 3928, 4175, 699, 9564, 5161, 2052, 3750, 4959, 2266, 6713, 1108, 3953, 9689, 7414, 8432, 4082, 6154, 6895, 1947, 5422, 480, 4458, 2780, 7480, 8717, 2229, 8840, 3205, 3094, 3533, 962, 8045, 8235, 488, 5243, 3735, 9717, 6294, 7780, 8978, 3424, 9260, 3445, 9212, 8331, 7854, 3933, 2084, 6445, 3262, 1890, 1112, 6451]]\n]\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\nfrom testcases import tests\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    for test in tests:\n        test_function(test[0], solve, test[1], test[2], test[3])\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه Binary Search را مطالعه کنید.\n    \u003cbr\u003e\n\u003c/p\u003e\n\nانتخاب واحد به پایان رسیده‌است و واحد‌های بعضی دانشجویان بسیار کم است. به همین دلیل معاون آموزشی تصمیم گرفته‌است که از\nتعداد واحدهای دانشجویانی که تعداد واحدهایشان زیاد است بکاهد و به دانشجویانی که تعداد واحد کمی دارند بیفزاید.\n\u003cbr\u003e\nدانشکده‌ی\nمهندسی کامپیوتر n دانشجو با تعداد واحدهای $$a_1, a_2, ..., a_n$$ دارد.\n\u003cbr\u003e\nمعاون آموزشی هر روز از دانشجویی که بیشترین تعداد\nواحدها را دارد یکی کم می‌کند و به دانشجویی که کم‌ترین تعداد واحدها را دارد یکی اضافه می‌کند(اگر چند نفر با خصوصیات فوق\nوجود داشته باشند، یکی را به صورت تصادفی انتخاب می‌کند). بدیهی است که اگر کم کردن واحد از یک دانشجو باعث شود به\nکم‌واحدترین دانشجو تبدیل شود، این کار را انجام نمی‌دهد.\n\u003cbr\u003e\nبرنامه‌ی واحدها k روز دیگر بسته می‌شود. حال وظیفه‌ی شماست که اختلاف تعداد واحدهای دانشجوی با بیش‌ترین تعداد واحد و\nدانشجوی با کم‌ترین واحد را پس از k روز به‌دست بیاورید.\n\n\u003cbr\u003e\nمحدودیت‌ها:\n\n\u003cdiv dir\u003d\"ltr\" style\u003d\"margin: auto; width: 60%; padding: 10px;\"\u003e\n    $$ 1 \\le n \\le 10000 $$\n    $$ 1 \\le a_i \\le 100000 $$\n    $$ 1 \\le k \\le 100000 $$\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir \u003d\"rtl\"\u003e\n    اگر بیش‌ترین تعداد واحدها را x بگیریم. اگر x قابل دستیابی باشد،آیا بیش‌تر از x هم قابل دستیابیست؟\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    وفتی بیش‌ترین تعداد واحدهای x قابل دستیابی باشد، بیش‌تر از x هم قابل دستیابیست. همین می‌تواند کلیدی برای پیدا\n    کردن کم‌ترین x با باینری سرچ باشد. (به طور مشابه کم‌ترین تعداد واحدها!)\n\u003c/div\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 25,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "return",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "def solve(question):\n    #Implement the function\n"
            },
            "test_helper.py": {
              "name": "test_helper.py",
              "placeholders": [],
              "is_visible": false,
              "text": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\ndef test_function(answer, func, *f_args):\n    output \u003d func(*f_args)\n    if output !\u003d answer:\n        failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format(f_args, output, answer))\n\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n"
            }
          },
          "test_files": {
            "tests.py": "import random\n\nfrom test_helper import *\nfrom task import *\n\ntests \u003d [[57270, 70040],\n [84335, 98558],\n [29060, 43300],\n [39986, 95876],\n [89474, 91474],\n [98812, 99845],\n [60806, 70853],\n [5954, 43526],\n [14976, 47184],\n [5528, 12410],\n [61429, 93413],\n [79196, 93956],\n [87242, 96796],\n [40932, 42890],\n [25033, 87121],\n [59167, 81035],\n [9827, 93975],\n [54816, 79135],\n [36003, 45936],\n [57821, 86925],\n [82503, 86449],\n [79563, 93564],\n [80775, 83200],\n [35588, 94632],\n [72606, 75197],\n [66181, 93232],\n [4750, 69881],\n [24376, 54171],\n [30087, 45545],\n [33682, 74265],\n [57790, 90656],\n [87882, 89535],\n [34119, 83665],\n [6877, 30789],\n [55335, 73897],\n [89315, 98155],\n [87954, 98632],\n [17853, 53368],\n [30601, 84812],\n [32505, 96095]]\n\n\nclass Question:\n    def __init__(self, a, b):\n        self.a \u003d a\n        self.b \u003d b\n        self.asked_questions \u003d 0\n\n    def ask(self, x, y):\n        if self.asked_questions \u003d\u003d 40:\n            return random.choice([True, False])\n\n        self.asked_questions +\u003d 1\n        return (x \u003c\u003d self.a \u003c\u003d y) or (x \u003c\u003d self.b \u003c\u003d y) or (self.a \u003c\u003d x \u003c\u003d self.b) or (self.a \u003c\u003d y \u003c\u003d self.b)\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    for test in tests:\n        test_function(test[0], solve, Question(test[0], test[1]))\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cbr\u003e\nممد و علی که حوصله‌شان از دانشگاه سر رفته‌است؛ تصمیم گرفتند که یک بازی چهل‌سوالی(!) به صورت زیر انجام دهند:\n\u003cbr\u003e\nابتدا ممد یک بازه‌ی [a,b] انتخاب می‌کند که a و b اعدادی طبیعی هستند. سپس علی می‌تواند تعدادی سوال به صورت \"آیا بازه‌ی تو با بازه‌ی [x, y] اشتراک دارد؟ (x و y اعداد طبیعی هستند)\" بپرسد. اما از آن‌جایی که ممد حوصله‌ی جواب دادن تعداد زیادی سوال ندارد، اگر از او بیش‌از 40  تا سوال بپرسد ممد شروع به دادن جواب‌های رندوم می‌کند. حال وظیفه‌ی شماست که با پرسیدن سوالاتی هوشمندانه به بازه‌ای که در ذهن ممد است برسید.\n\u003cbr\u003e\n\nورودی و خروجی:\n\n\u003cbr\u003e\n\nدر ورودی تابع solve یک آبجکت است که حاوی جواب است و دارای تابع ask است که این تابع دو عدد طبیعی ورودی می‌گیرد و یک boolean که جواب سوال است برمی‌گرداند. حال با توجه به خواسته‌های مساله شما باید یک آرایه‌ی ۲ عضوی خروجی دهید که نمایان‌گر دو سر بازه‌است\n\n\u003cbr\u003e\nمحدودیت‌ها:\n\n\u003cdiv dir\u003d\"ltr\" style\u003d\"margin: auto; width: 60%; padding: 10px;\"\u003e\n    $$ 1 \\le a, b \\le 100000 $$\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    بازه‌های به صورت [1, x] و [x, 100000] را در نظر داشته باشید.\n\u003c/div\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "K Select",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [],
              "is_visible": true,
              "text": "import random\n\n\ndef find_kth(a, b, k):\n    arr \u003d a + b\n    size \u003d len(arr)\n    left \u003d 0\n    right \u003d size - 1\n    while True:\n        pivot \u003d random.randint(left, right)\n        new_pivot \u003d partition(arr, left, right, pivot)\n        pivot_distance \u003d new_pivot - left\n        if pivot_distance \u003d\u003d k:\n            return arr[new_pivot]\n        elif k \u003c pivot_distance:\n            right \u003d new_pivot - 1\n        else:\n            k -\u003d pivot_distance + 1\n            left \u003d new_pivot + 1\n\n\ndef partition(arr, left, right, pivot):\n    pivot_value \u003d arr[pivot]\n    arr[pivot], arr[right] \u003d arr[right], arr[pivot]\n    new_pivot \u003d left\n    for i in range(left, right):\n        if arr[i] \u003c pivot_value:\n            arr[new_pivot], arr[i] \u003d arr[i], arr[new_pivot]\n            new_pivot +\u003d 1\n    arr[right], arr[new_pivot] \u003d arr[new_pivot], arr[right]\n    return new_pivot\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\r\nfrom task import *\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    tests \u003d [\r\n        ([1, 2, 3, 4], [5, 6, 7, 8, 9], 4, 5),\r\n        ([10, 11, 12], [4, 3, 4, 1], 2, 4),\r\n        ([1, 1, 1, 1, 1, 1], [3, 4, 6, 1], 7, 3),\r\n        ([1], [], 0, 1),\r\n        (random.sample(list(range(1000)), 1000), random.sample(list(range(1000, 2000)), 1000), 1010, 1010),\r\n        (random.sample(list(range(1000)), 1000), [], 30, 30),\r\n        ([2, 5, 1, 7, 2, 5, 9], [8, 2, 0, 1, 5, 0], 12, 9)\r\n    ]\r\n    for test in tests:\r\n        test_function(test[-1], find_kth, test[0], test[1], test[2])"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه درس را مطالعه کنید.\n    \u003cbr\u003e\nسپس لطفا دیگر به جزوه و کدهای آن\nمراجعه نکنید.\n    \u003cbr\u003e\n\u003cbr\u003e\nتابع ()find_kth را کامل کنید تا kاُمین عضو کوچک آرایه را برگرداند.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    ابتدا سعی کنید با استفاده از مرتب‌سازی و ادغام مسئله را حل کنید.\n    پیچیدگی زمانی این راه‌حل چقدر است؟\n\u003c/p\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    n: length of longer array\n    \u003cbr\u003e\n    Time Complexity: O(n*lg(n))\n\u003c/div\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    حال برای کاهش مدت زمان اجرای الگوریتم از انتخاب سریع استفاده کنید.\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    برای کاهش پیچیدگی حافظه سعی کنید الگوریتم را به صورت درجا پیاده‌سازی کنید.\n    پیچیدگی زمانی این راه‌حل چقدر است؟\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    Average Time Complexity: O(n)\u003cbr\u003e\n    Worst case Time Complexity: O(n^2)\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 43,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "if len(array) \u003c\u003d 10:\n        array.sort()\n        return array[k]\n    subsets \u003d []\n    num_medians \u003d len(array) // subset_size\n    if (len(array) % subset_size) \u003e 0:\n        num_medians +\u003d 1\n    for i in range(num_medians):\n        beg \u003d i * subset_size\n        end \u003d min(len(array), beg + subset_size)\n        subset \u003d array[beg:end]\n        subsets.append(subset)\n    medians \u003d []\n    for subset in subsets:\n        median \u003d find_kth(subset, len(subset) // 2)\n        medians.append(median)\n    median_of_medians \u003d find_kth(medians, len(medians) // 2)\n    pivot \u003d median_of_medians  # pivot point value (not index)\n    array_lt \u003d []\n    array_gt \u003d []\n    array_eq \u003d []\n    for item in array:\n        if item \u003c pivot:\n            array_lt.append(item)\n        elif item \u003e pivot:\n            array_gt.append(item)\n        else:\n            array_eq.append(item)\n    if k \u003c len(array_lt):\n        return find_kth(array_lt, k)\n    elif k \u003c len(array_lt) + len(array_eq):\n        return array_eq[0]\n    else:\n        normalized_k \u003d k - (len(array_lt) + len(array_eq))\n        return find_kth(array_gt, normalized_k)",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "def find_kth(array, k, subset_size\u003d7):\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "import random\n\nfrom test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    tests \u003d [\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 5),\n        ([10, 11, 12, 4, 3, 4, 1], 2, 4),\n        ([1, 1, 1, 1, 1, 1, 3, 4, 6, 1], 7, 3),\n        ([1], 0, 1),\n        (random.sample(list(range(1000)), 1000), 221, 221),\n        ([2, 5, 1, 7, 2, 5, 9, 8, 2, 0, 1, 5, 0], 12, 9)\n    ]\n    for test in tests:\n        test_function(test[-1], find_kth, test[0], test[1])"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه درس را مطالعه کنید.\n    \u003cbr\u003e\nسپس لطفا دیگر به جزوه و کدهای آن\nمراجعه نکنید.\n    \u003cbr\u003e\n\u003cbr\u003e\nتابع ()find_kth را کامل کنید تا kاُمین عضو کوچک آرایه را با استفاده از روش median of median برگرداند.\n\u003cbr\u003e\nتوجه کنید که برای انجام این پیاده‌سازی باید ورودی‌ها را به دسته‌های ۷تایی تقسیم کنید.\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\" dir \u003d \u0027rtl\u0027\u003e\n    بیایید مراحل انجام این الگوریتم را برای خود مرور کنیم، ابتدا داده‌ها به دسته‌های ۷تایی تقسیم می‌شوند. سپس داده‌های هر دسته مرتب می‌شوند و میانه‌ی آن‌ها را به مجموعهٔ میانه‌ها اضافه می‌کنیم. میانه‌ی میانه‌ها را به صورت بازگشتی پیدا کرده و آرایه را به کمک آن به دو دسته تقسیم می‌کنیم و با توجه به اندیسی که به دنبال آن می‌گردیم در آرایه سمت راست یا چپ به طور بازگشتی به دنبال آن می‌گردیم.\n\u003c/div\u003e\n\u003cbr\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیچیدگی زمانی این راه‌حل چقدر است؟\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    Time Complexity: O(n)\n\u003c/div\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n\n    به نظرتان در حالت میانگین این الگوریتم زمان بیش‌تری طول می‌کشد یا جست‌وجوی سریع؟\n\u003c/p\u003e\n\u003cdiv class\u003d\"hint\" dir \u003d \u0027rtl\u0027\u003e\n    الگوریتم انتخاب سریع از میانه‌ی میانه‌ها به طور کلی سریع‌تر است.\n\u003c/div\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Hashing",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 43,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "global words\n    words \u003d set(dictionary)",
                  "placeholder_text": "return #Complete the function"
                },
                {
                  "offset": 102,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "result \u003d set()\n    is_legit \u003d word in words\n    if not is_legit:\n        # add char\n        for i in range(len(word) + 1):\n            for char in string.ascii_lowercase:\n                possible \u003d word[:i] + char + word[i:]\n                if possible in words:\n                    result.add(possible)\n        # remove char\n        for i in range(len(word)):\n            possible \u003d word[:i] + word[i + 1:]\n            if possible in words:\n                result.add(possible)\n        # change char\n        for i in range(len(word)):\n            for char in string.ascii_lowercase:\n                possible \u003d word[:i] + char + word[i + 1:]\n                if possible in words:\n                    result.add(possible)\n    return is_legit, result",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "import string\n\n\ndef setup(dictionary):\n    return #Complete the function\n\n\ndef suggestions(word):\n    return #Complete the function\n"
            },
            "time_limit.py": {
              "name": "time_limit.py",
              "placeholders": [],
              "is_visible": false,
              "text": "import signal\n\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\n\ndef put_limit(time):\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(time)\n"
            }
          },
          "test_files": {
            "tests.py": "import task\nimport random\nimport string\nfrom time_limit import put_limit\nfrom test_helper import failed\n\n\ndef sol_setup(dictionary):\n    global words\n    words \u003d set(dictionary)\n\n\ndef sol_suggestions(word):\n    result \u003d set()\n    is_legit \u003d word in words\n    if not is_legit:\n        # add char\n        for i in range(len(word) + 1):\n            for char in string.ascii_lowercase:\n                possible \u003d word[:i] + char + word[i:]\n                if possible in words:\n                    result.add(possible)\n        # remove char\n        for i in range(len(word)):\n            possible \u003d word[:i] + word[i + 1:]\n            if possible in words:\n                result.add(possible)\n        # change char\n        for i in range(len(word)):\n            for char in string.ascii_lowercase:\n                possible \u003d word[:i] + char + word[i + 1:]\n                if possible in words:\n                    result.add(possible)\n    return is_legit, result\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    # put_limit(10)\n    # try:\n    dic \u003d {\u0027\u0027.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 50))) for _ in range(10000)}\n    test \u003d {\u0027\u0027.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 10))) for _ in range(10000)}\n    task.setup(dic)\n    sol_setup(dic)\n    for word in test:\n        if task.suggestions(word) !\u003d sol_suggestions(word):\n            failed(\"Wrong Answer!\")\n    # except Exception:\n    #     failed(\"Timed Out!\")\n"
          },
          "description_text": "\u003c!DOCTYPE html\u003e\n\u003chtml lang\u003d\"fa\" dir\u003d\"rtl\"\u003e\n\u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه Hash را مطالعه کنید.\n    \u003cbr\u003e\n\u003c/p\u003e\nیکی از روش‌های تشخیص ایرادات تایپی (typoها) در متون و پیشنهاد کلمه‌های جایگزین\nاستفاده از جدول درهم‌ سازیست. در این سوال می‌خواهیم که یک مدل ساده برنامه spell checker\nرا پیاده سازی کنیم.\u003cbr\u003e\nشما باید پیاده سازی توابع setup و suggestions را کامل کنید. تابع setup\nیکبار در ابتدای برنامه صدا زده می‌شود و کل کلمات صحیح موجود در دیکشنری\nبه عنوان ورودی به آن داده می‌شود. پس از صدا زدن تابع setup، با هر بار صدا زدن\nتابع suggestions این تابع باید یک دوتایی برگرداند که مقدار اول آن True است در صورتیکه\nتایپ کلمه صحیح باشد(کلمه در دیکشنری موجود باشد) و در غیر اینصورت false است.\nمقدار دوم این دوتایی درصورتی که در کلمه غلط نگراشی موجود نبود یک مجموعه تهی\nو در غیر این صورت مجموعه‌ای از کلمات مشابه آن کلمه است. یک کلمه مشابه کلمه‌ای است که نسبت\nبه کلمه ورودی دقیقا یک کارکتر بیشتر یا دقیقا یک کاراکتر کمتر داشته باشد\nیا اگر تعداد کاراکترها یکی بود در دقیقا یک کارکتر متفاوت باشند.\nترتیب کلمات در لیست خروجی اهمیتی ندارند. برای درک بهتر\nبه مثال مراجعه کنید.\u003cbr\u003e\u003cbr\u003e\nمثال:\u003cbr\u003e\nفرض کنید تابع setup با ورودی {\u0027hello\u0027, \u0027bye\u0027, \u0027salaam\u0027, \u0027salam\u0027} صدا زده شود\nسپس خروجی هرکدام از توابع زیر، به شکل زیر است.\u003cbr\u003e\n\u003cdiv dir\u003d\"ltr\"\u003e\nsuggestions(\"bye\")\u003cbr\u003e\nsuggestions(\"hallo\")\u003cbr\u003e\nsuggestions(\"hablo\")\u003cbr\u003e\nsuggestions(\"salaa\")\u003cbr\u003e\nsuggestions(\"aye\")\u003cbr\u003e\nOutput:\u003cbr\u003e\n(True, set())\u003cbr\u003e\n(False, {\"hello\"})\u003cbr\u003e\n(False, set())\u003cbr\u003e\n(False, {\"salaam\", \"salam\"})\u003cbr\u003e\n(False, {\"bye\"})\u003cbr\u003e\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "hash_table.py": {
              "name": "hash_table.py",
              "placeholders": [
                {
                  "offset": 157,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "return key % self._size",
                  "placeholder_text": "return #Complete it"
                },
                {
                  "offset": 220,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "key_hash \u003d self._hash(key)\n        self._table[key_hash].append((key, value))",
                  "placeholder_text": "return #Complete it"
                },
                {
                  "offset": 273,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "key_hash \u003d self._hash(key)\n        for pair in self._table[key_hash]:\n            if key \u003d\u003d pair[0]:\n                return pair[1]\n        return None",
                  "placeholder_text": "return #Complete it"
                }
              ],
              "is_visible": true,
              "text": "class HashTable:\n\n    def __init__(self, size):\n        self._size \u003d size\n        self._table \u003d [[] for _ in range(size)]\n\n    def _hash(self, key):\n        return #Complete it\n\n    def insert(self, key, value):\n        return #Complete it\n\n    def get(self, key):\n        return #Complete it\n"
            },
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 59,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "table \u003d HashTable(1000003)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            pair \u003d table.get(k - arr[i] - arr[j])\n            if pair is not None:\n                if i not in pair and j not in pair:\n                    return (arr[i], arr[j]) + (arr[pair[0]], arr[pair[1]])\n            table.insert(arr[i] + arr[j], (i, j))\n    return None",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "from hash_table import HashTable\n\n\ndef answer(arr, k):\n    return #Complete the function\n"
            },
            "time_limit.py": {
              "name": "time_limit.py",
              "placeholders": [],
              "is_visible": false,
              "text": "import signal\n\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\n\ndef put_limit(time):\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(time)\n"
            }
          },
          "test_files": {
            "tests.py": "import random\nfrom task import answer\nfrom time_limit import put_limit\nfrom test_helper import failed\n\n\ndef solution(arr, k):\n    sums \u003d {}\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if k - arr[i] - arr[j] in sums:\n                pair \u003d sums[k - arr[i] - arr[j]]\n                if i not in pair and j not in pair:\n                    return (arr[i], arr[j]) + (arr[pair[0]], arr[pair[1]])\n            sums[arr[i] + arr[j]] \u003d (i, j)\n    return None\n\n\ndef generate_test():\n    return [random.randint(0, 10 ** 12) for i in range(random.randint(10, 1000))]\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    # put_limit(10)\n    # try:\n    for i in range(5):\n        arr \u003d generate_test()\n        values \u003d random.sample(arr, 4)\n        result \u003d answer(arr, sum(values))\n        if result is None or len(set(result)) \u003c 4 or sum(result) !\u003d sum(values):\n            failed(\"Wrong Answer!\")\n    for i in range(3):\n        arr \u003d generate_test()\n        value \u003d random.randint(0, 10 ** 12)\n        result \u003d answer(arr, value)\n        ans \u003d solution(arr, value)\n        if ans is None and result is not None:\n            failed(\"Wrong Answer!\")\n        elif ans is not None:\n            if len(set(result)) \u003c 4 or sum(result) !\u003d sum(ans):\n                failed(\"Wrong Answer!\")\n    # except Exception:\n    #     failed(\"Timed out!\")\n"
          },
          "description_text": "\u003c!DOCTYPE html\u003e\n\u003chtml lang\u003d\"fa\" dir\u003d\"rtl\"\u003e\n\u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\nتابع answer را کامل کنید. این تابع به عنوان ورودی یک آرایه از اعداد arr و\nیک عدد k را می‌گیرد و بررسی می‌کند که آیا ۴ عدد با اندیس‌های متمایز در آرایه وجود دارند\nکه مجموعشان برابر k بشود یا خیر. در صورت وجود این ۴ عدد باید آن‌ها را به شکل\nیک ۴تایی برگردانید و اگر چنین ۴تایی وجود نداشت مقدار None را برگردانید. اگر بیش از یک ۴تایی\nوجود داشت یکی از آن‌ها را به دلخواه برگردانید.\u003cbr\u003e\u003cbr\u003e\nتوجه:\u003cbr\u003e\nدر صورتی‌ که می‌خواهید از جدول درهم‌سازی استفاده کنید، باید پیاده سازی hash_table.py\nرا کامل کرده و از آن استفاده کنید و نمی‌توانید از dictionary یا داده ساختارهای\nمشابه پایتون استفاده کنید.\u003cbr\u003e\u003cbr\u003e\nمحدودیت‌ها:\u003cbr\u003e\nاندازه آرایه arr از 3^10 بیشتر نیست\u003cbr\u003e\nعناصر آرایه اعداد صحیح مثبت کمتر از 12^10 هستند\u003cbr\u003e\u003cbr\u003e\nمثال:\u003cbr\u003e\n\u003cdiv dir\u003d\"ltr\"\u003e\nanswer([1, 2, 3, 4, 5], 12)\u003cbr\u003e\nanswer([1, 2, 3, 4], 20)\u003cbr\u003e\nanswer([1, 1, 1, 1, 1, 1], 4)\u003cbr\u003e\nOutput:\u003cbr\u003e\n(1, 2, 4, 5)\u003cbr\u003e\nNone\u003cbr\u003e\n(1, 1, 1, 1)\u003cbr\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"Hint\"\u003e\n    یک الگوریتم بهینه برای این سوال می‌تواند در زمان (O(n^2 اجرا شود\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 21,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "p, q \u003d 27, 10**9 + 7\n    hash_list \u003d hash(str, q, p)\n    offset \u003d p\n    for T in range(1, len(str)):\n        if is_period(hash_list, T, offset, q):\n            return T\n        offset \u003d (offset * p) % q\n    return 0",
                  "placeholder_text": "return \"\" #Complete the function"
                },
                {
                  "offset": 56,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def is_period(hash_list, T, offset, q):\n    return (hash_list[len(hash_list) - T - 1] * offset) % q \u003d\u003d (hash_list[len(hash_list) - 1] - hash_list[T - 1]) % q\n\n\ndef hash(str, q, p):\n    hash_list \u003d [ord(str[0]) - ord(\u0027a\u0027) + 1]\n    s \u003d 1\n    for i in range(1, len(str)):\n        s \u003d (s * p) % q\n        hash_list.append((hash_list[i - 1] + (ord(str[i]) - ord(\u0027a\u0027) + 1) * s) % q)\n    return hash_list\n",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "def period(str):\n    return \"\" #Complete the function\n\n\n"
            },
            "time_limit.py": {
              "name": "time_limit.py",
              "placeholders": [],
              "is_visible": false,
              "text": "import signal\n\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\n\ndef put_limit(time):\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(time)\n"
            }
          },
          "test_files": {
            "tests.py": "import random\nimport string\nimport task\nfrom test_helper import failed\nfrom time_limit import put_limit\n\n\ndef sol(str):\n    p, q \u003d 27, 10 ** 9 + 7\n    hash_list \u003d sol_hash(str, q, p)\n    offset \u003d p\n    for T in range(1, len(str)):\n        if sol_is_period(hash_list, T, offset, q):\n            return T\n        offset \u003d (offset * p) % q\n    return None\n\n\ndef sol_is_period(hash_list, T, offset, q):\n    return (hash_list[len(hash_list) - T - 1] * offset) % q \u003d\u003d (hash_list[len(hash_list) - 1] - hash_list[T - 1]) % q\n\n\ndef sol_hash(str, q, p):\n    hash_list \u003d [ord(str[0]) - ord(\u0027a\u0027) + 1]\n    s \u003d 1\n    for i in range(1, len(str)):\n        s \u003d (s * p) % q\n        hash_list.append((hash_list[i - 1] + (ord(str[i]) - ord(\u0027a\u0027) + 1) * s) % q)\n    return hash_list\n\n\ndef generate_test():\n    T \u003d random.randint(0, 10 ** 4)\n    return \u0027\u0027.join(random.choice(string.ascii_lowercase) for i in range(T)) * (10 ** 5 // T)\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    # put_limit(10)\n    # try:\n    for i in range(5):\n        str \u003d generate_test()\n        if sol(str) !\u003d task.period(str):\n            failed(\"Wrong Answer!\")\n    # except Exception:\n    #     failed(\"Timed Out!\")\n"
          },
          "description_text": "\u003c!DOCTYPE html\u003e\n\u003chtml lang\u003d\"fa\" dir\u003d\"rtl\"\u003e\n\u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\nدوره تناوب یک دنباله seq برابر است با کوچک‌ترین عدد مثبت(نا صفر) T که به ازای هر\n\u003cdiv dir\u003d\"ltr\"\u003e\n    i \u003c len(seq) - T\n\u003c/div\u003e\nداشته باشیم\n\u003cdiv dir\u003d\"ltr\"\u003e\n    seq[i] \u003d seq[i + T]\n\u003c/div\u003e\nتابع period را به گونه‌ای کامل کنید که به ازای هر رشته str دوره تناوب str را\nبرگرداند. تضمین می‌شود که رشته ورودی دوره تناوبی کمتر از طولش دارد.\u003cbr\u003e\u003cbr\u003e\nمحدودیت‌ها:\u003cbr\u003e\nسایز رشته str بیشتر از 6^10 نیست\u003cbr\u003e\nکاراکترهای رشته حروف lowercase انگلیسی هستند.\u003cbr\u003e\u003cbr\u003e\nمثال:\u003cbr\u003e\n\u003cdiv dir\u003d\"ltr\"\u003e\n    period(\"aabbaabb\")\u003cbr\u003e\n    period(\"aaa\")\u003cbr\u003e\n    Output:\u003cbr\u003e\n    4\u003cbr\u003e\n    1\u003cbr\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    با کمک درهم‌سازی می‌توانید مسئله را در زمان خطی حل کنید\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "hash_table.py": {
              "name": "hash_table.py",
              "placeholders": [
                {
                  "offset": 655,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "for i in range(self._size):\n            cell: HashTable._Cell \u003d self._table[self._hash(key, i)]\n            if cell is None or cell.is_deleted():\n                self._table[self._hash(key, i)] \u003d HashTable._Cell(key, value)\n                return True\n        return False",
                  "placeholder_text": "return #Complete it"
                },
                {
                  "offset": 711,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "for i in range(self._size):\n            cell: HashTable._Cell \u003d self._table[self._hash(key, i)]\n            if cell is None:\n                break\n            if cell.get_key() \u003d\u003d key:\n                cell.delete()\n                break",
                  "placeholder_text": "return #Complete it"
                },
                {
                  "offset": 764,
                  "length": 19,
                  "hints": [],
                  "possible_answer": "for i in range(self._size):\n            cell: HashTable._Cell \u003d self._table[self._hash(key, i)]\n            if cell is None:\n                return None\n            if not cell.is_deleted() and cell.get_key() \u003d\u003d key:\n                return cell.get_value()",
                  "placeholder_text": "return #Complete it"
                }
              ],
              "is_visible": true,
              "text": "class HashTable:\n    class _Cell:\n        def __init__(self, key: int, value: object) -\u003e None:\n            self._key \u003d key\n            self._value \u003d value\n            self._isDeleted \u003d False\n\n        def get_key(self):\n            return self._key\n\n        def get_value(self):\n            return self._value\n\n        def is_deleted(self):\n            return self._isDeleted\n\n        def delete(self):\n            self._isDeleted \u003d True\n\n    def __init__(self, size):\n        self._size \u003d size\n        self._table \u003d [None for _ in range(size)]\n\n    def _hash(self, key, i):\n        return (key + i) % self._size\n\n    def insert(self, key, value):\n        return #Complete it\n\n    def delete(self, key):\n        return #Complete it\n\n    def get(self, key):\n        return #Complete it\n\n"
            },
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 89,
                  "length": 12,
                  "hints": [],
                  "possible_answer": "self._time_queue \u003d Queue(size)",
                  "placeholder_text": "#Complete it"
                },
                {
                  "offset": 135,
                  "length": 12,
                  "hints": [],
                  "possible_answer": "return self._time_queue.get(key)",
                  "placeholder_text": "#Complete it"
                },
                {
                  "offset": 188,
                  "length": 12,
                  "hints": [],
                  "possible_answer": "self._time_queue.push(key, value)",
                  "placeholder_text": "#Complete it"
                },
                {
                  "offset": 203,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "class Queue:\n    class Node:\n        def __init__(self, prev, key, value, next):\n            self.prev \u003d prev\n            self.key \u003d key\n            self.value \u003d value\n            self.next \u003d next\n\n    def __init__(self, size):\n        self._size \u003d 0\n        self._max \u003d size\n        self._front \u003d None\n        self._rear \u003d None\n        self._hashTable \u003d HashTable(100 * size)\n\n    def push(self, key, value):\n        if self._rear is None:\n            self._rear \u003d Queue.Node(None, key, value, None)\n            self._front \u003d self._rear\n        else:\n            self._rear.prev \u003d Queue.Node(None, key, value, self._rear)\n            self._rear \u003d self._rear.prev\n        self._size +\u003d 1\n        if self._size \u003e self._max:\n            self.pop()\n        self._hashTable.insert(key, self._rear)\n\n    def delete(self, key):\n        node \u003d self._hashTable.get(key)\n        if node.prev is not None:\n            node.prev.next \u003d node.next\n        else:\n            self._rear \u003d node.next\n        if node.next is not None:\n            node.next.prev \u003d node.prev\n        else:\n            self._front \u003d node.prev\n        self._hashTable.delete(key)\n        self._size -\u003d 1\n\n    def pop(self):\n        key \u003d None\n        if self._front is not None:\n            key \u003d self._front.key\n            self._front \u003d self._front.prev\n            self._front.next \u003d None\n            self._hashTable.delete(key)\n        self._size -\u003d 1\n        return key\n\n    def get(self, key):\n        node \u003d self._hashTable.get(key)\n        if node is not None:\n            self.delete(key)\n            self.push(key, node.value)\n            return node.value\n        return None",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "from hash_table import HashTable\n\n\nclass LRUCache:\n    def __init__(self, size):\n        #Complete it\n\n    def get(self, key):\n        #Complete it\n\n    def add(self, key, value):\n        #Complete it\n\n\n\n"
            },
            "time_limit.py": {
              "name": "time_limit.py",
              "placeholders": [],
              "is_visible": false,
              "text": "import signal\n\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\n\ndef put_limit(time):\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(time)\n"
            }
          },
          "test_files": {
            "tests.py": "from task import LRUCache\nfrom test_helper import failed\nfrom time_limit import put_limit\nimport random\n\n\nclass LRUCacheSol:\n    def __init__(self, size):\n        self._time_queue \u003d Queue(size)\n\n    def get(self, key):\n        return self._time_queue.get(key)\n\n    def add(self, key, value):\n        self._time_queue.push(key, value)\n\n\nclass Queue:\n    class Node:\n        def __init__(self, prev, key, value, next):\n            self.prev \u003d prev\n            self.key \u003d key\n            self.value \u003d value\n            self.next \u003d next\n\n    def __init__(self, size):\n        self._size \u003d 0\n        self._max \u003d size\n        self._front \u003d None\n        self._rear \u003d None\n        self._hashTable \u003d {}\n\n    def push(self, key, value):\n        if self._rear is None:\n            self._rear \u003d Queue.Node(None, key, value, None)\n            self._front \u003d self._rear\n        else:\n            self._rear.prev \u003d Queue.Node(None, key, value, self._rear)\n            self._rear \u003d self._rear.prev\n        self._size +\u003d 1\n        if self._size \u003e self._max:\n            self.pop()\n        self._hashTable[key] \u003d self._rear\n\n    def delete(self, key):\n        node \u003d self._hashTable.get(key)\n        if node.prev is not None:\n            node.prev.next \u003d node.next\n        else:\n            self._rear \u003d node.next\n        if node.next is not None:\n            node.next.prev \u003d node.prev\n        else:\n            self._front \u003d node.prev\n        self._hashTable.pop(key)\n        self._size -\u003d 1\n\n    def pop(self):\n        key \u003d None\n        if self._front is not None:\n            key \u003d self._front.key\n            self._front \u003d self._front.prev\n            self._front.next \u003d None\n            self._hashTable.pop(key, None)\n        self._size -\u003d 1\n        return key\n\n    def get(self, key):\n        if key not in self._hashTable:\n            return None\n        node \u003d self._hashTable[key]\n        self.delete(key)\n        self.push(key, node.value)\n        return node.value\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    # put_limit(10)\n    # try:\n    cache \u003d LRUCache(100)\n    sol \u003d LRUCacheSol(100)\n    keys \u003d random.sample(range(0, 10 ** 10), 100000)\n    added \u003d []\n    if cache.get(1) is not None:\n        failed(\"Wrong Answer!\")\n    for key in keys:\n        if random.randint(0, 1) \u003d\u003d 0:\n            cache.add(key, key / 3)\n            sol.add(key, key / 3)\n            added.append(key)\n        elif len(added) \u003e 0:\n            key \u003d random.choice(added)\n            if cache.get(key) !\u003d sol.get(key):\n                failed(\"Wrong Answer!\")\n    # except Exception:\n    #     failed(\"Timed Out!\")\n"
          },
          "description_text": "\u003c!DOCTYPE html\u003e\n\u003chtml lang\u003d\"fa\" dir\u003d\"rtl\"\u003e\n\u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\nدر این سوال می‌خواهیم با استفاده از داده‌ ساختار جدول درهم سازی یک LRU Cache پیاده\nسازی کنیم.\u003cbr\u003e\nبرای اینکار باید توابع کلاس LRU Cache را کامل کنید. هنگام ساخت LRU Cache یک عدد\nبه عنوان اندازه آن (size) به سازنده آن پاس داده می‌شود. این cache به این شکل کار\nمی‌کند که ابتدا به کمک add مقادیر را به صورت key-value در آن درج می‌کنیم و به کمک تابع get\nمقادیر متناظر با کلید‌هایی که قبلا درج کرده‌ایم را بازیابی می‌کنیم. هنگامی که cache\nپر شود آخرین داده استفاده شده یعنی داده‌ای که قبل از بقیه get یا add شده باشد پاک می‌شود.\nبرای درک بهتر به مثال مراجعه کنید.\n\u003cbr\u003e\u003cbr\u003e\nشما باید سه تابع add, get و init کلاس LRUCache را به گونه‌ای پیاده سازی کنید که هر\n عملیات add و get به طور متوسط در زمان (۱)O قابل انجام باشد. تابع add کلید key و\nمقدار value را دریافت کرده و آن را در cache درج می‌کند. تابع get در صورتیکه کلید داده شده\nدر cache موجود باشد value متناظر با آن را برمی‌گرداند و در غیر این صورت مقدار None\nرا برمی‌گرداند. تابع init نیز یک LRUCache با سایز مشخص شده می‌سازد.\n\u003cbr\u003e\u003cbr\u003e\nنکته:\n\u003cbr\u003e\nبرای این سوال نیاز به پیاده سازی جدول درهم‌سازی دارید، خودتان این داده ساختار را در\nفایل hash_table.py پیاده سازی کنید. برای حل مشکل برخورد از روش آدرس‌دهی باز استفاده\nکنید.\n\u003cbr\u003e\u003cbr\u003e\nمثال:\n\u003cbr\u003e\n\u003cdiv dir\u003d\"ltr\"\u003e\ncache \u003d LRUCache(3)\u003cbr\u003e\ncache.add(23, 765)\u003cbr\u003e\ncache.add(100, 100000)\u003cbr\u003e\ncache.add(2, -309)\u003cbr\u003e\ncache.get(23)\u003cbr\u003e\ncache.get(2)\u003cbr\u003e\ncache.put(0, 2)\u003cbr\u003e\nprint(cache.get(23))\u003cbr\u003e\nprint(cache.get(100))\u003cbr\u003e\nprint(cache.get(2))\u003cbr\u003e\nprint(cache.get(0))\u003cbr\u003e\u003cbr\u003e\nOutput:\u003cbr\u003e\n765\u003cbr\u003e\nNone\u003cbr\u003e\n0398\u003cbr\u003e\n2\u003cbr\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  قاعدتا برای پیاده سازی نیاز به صف هم دارید!\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  دقت کنید برای اینکه عملیات get از مرتبه (۱)O باقی بماند باید ظرفیت\n    جدول در هم سازی به مراتب بیشتر از ظرفیت cache باشد.\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "DSU",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 1019,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "perm2 \u003d [i - 1 for i in perm]\n    perm \u003d perm2\n    answers \u003d []\n    current_answer \u003d 0\n    dsu \u003d DisjointSet(n)\n\n    def add(i, current_answer):\n        node \u003d dsu.nodes[i]\n        node.added \u003d True\n        node.sum \u003d numbers[i]\n        if i \u003e 0 and dsu.nodes[i - 1].added:\n            dsu.unite(node, dsu.nodes[i - 1])\n        if i \u003c n - 1 and dsu.nodes[i + 1].added:\n            dsu.unite(node, dsu.nodes[i + 1])\n\n        parent \u003d dsu.find(node)\n        current_answer \u003d max(current_answer, parent.sum)\n        return current_answer\n\n    for i in range(n - 1, -1, -1):\n        answers.append(current_answer)\n        current_answer \u003d add(perm[i], current_answer)\n\n    answers.reverse()\n    return answers",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node(object):\n    def __init__(self, label):\n        self.label \u003d label\n        self.par \u003d self\n        self.size \u003d 1\n        self.sum \u003d 0\n        self.added \u003d False\n\n\nclass DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        self.nodes \u003d [Node(i) for i in range(n)]\n\n    def find(self, u):\n        if u !\u003d u.par:  # here we user path compression trick\n            u.par \u003d self.find(u.par)\n        return u.par\n\n    def unite(self, u, v):\n        u, v \u003d self.find(u), self.find(v)\n        if u \u003d\u003d v:  # u and v are in the same component\n            return False\n\n        # making v the vertex with bigger size\n        if u.size \u003e v.size:\n            u, v \u003d v, u\n\n        # merging two components\n        u.par \u003d v\n\n        # updating necessary variables\n        v.size +\u003d u.size\n        v.sum +\u003d u.sum\n\n        return True\n\n\ndef solve(n, numbers, perm):\n    # numbers is a list of n integers\n    # perm is a list of the numbers 1 to n in some permutation\n    # Return a list of answers\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom test_helper import *\nfrom task import *\nimport random\n\n\ndef solve2(n, numbers, perm):\n    # numbers is a list of n integers\n    # perm is a list of the numbers 1 to n in some permutation\n    # Return a list of answers\n\n    perm2 \u003d [i - 1 for i in perm]\n    perm \u003d perm2\n    answers \u003d []\n    current_answer \u003d 0\n    dsu \u003d DisjointSet(n)\n\n    def add(i, current_answer):\n        node \u003d dsu.nodes[i]\n        node.added \u003d True\n        node.sum \u003d numbers[i]\n        if i \u003e 0 and dsu.nodes[i - 1].added:\n            dsu.unite(node, dsu.nodes[i - 1])\n        if i \u003c n - 1 and dsu.nodes[i + 1].added:\n            dsu.unite(node, dsu.nodes[i + 1])\n\n        parent \u003d dsu.find(node)\n        current_answer \u003d max(current_answer, parent.sum)\n        return current_answer\n\n    for i in range(n - 1, -1, -1):\n        answers.append(current_answer)\n        current_answer \u003d add(perm[i], current_answer)\n\n    answers.reverse()\n    return answers\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    manual_tests \u003d [\n        (4, [1, 3, 2, 5], [3, 4, 1, 2], [5, 4, 3, 0]),\n        (5, [1, 2, 3, 4, 5], [4, 2, 3, 5, 1], [6, 5, 5, 1, 0]),\n        (8, [5, 5, 4, 4, 6, 6, 5, 5], [5, 2, 8, 7, 1, 3, 4, 6], [18, 16, 11, 8, 8, 6, 6, 0]),\n        (10, [3, 3, 3, 5, 6, 9, 3, 1, 7, 3], [3, 4, 6, 7, 5, 1, 10, 9, 2, 8], [34, 29, 14, 11, 11, 11, 8, 3, 1, 0]),\n        (17, [12, 9, 17, 5, 0, 6, 5, 1, 3, 1, 17, 17, 2, 14, 5, 1, 17],\n         [3, 7, 5, 8, 12, 9, 15, 13, 11, 14, 6, 16, 17, 1, 10, 2, 4],\n         [94, 78, 78, 77, 39, 39, 21, 21, 21, 21, 21, 21, 21, 9, 9, 5, 0]),\n        (17, [1, 6, 9, 2, 10, 5, 15, 16, 17, 14, 17, 3, 9, 8, 12, 0, 2],\n         [9, 13, 15, 14, 16, 17, 11, 10, 12, 4, 6, 5, 7, 8, 2, 3, 1],\n         [65, 64, 64, 64, 64, 64, 64, 64, 64, 46, 31, 31, 16, 16, 9, 1, 0]),\n        (17, [10, 10, 3, 9, 8, 0, 10, 13, 11, 8, 11, 1, 6, 9, 2, 10, 5],\n         [9, 4, 13, 2, 6, 15, 11, 5, 16, 10, 7, 3, 14, 1, 12, 8, 17],\n         [63, 52, 31, 31, 26, 23, 23, 23, 23, 23, 13, 13, 13, 13, 13, 5, 0]),\n        (10,\n         [606976827, 581094359, 726836550, 554157795, 277900063, 389778978, 555756858, 259222039, 862348978, 749561490],\n         [10, 8, 9, 5, 2, 1, 6, 3, 4, 7],\n         [4814072447, 3692501430, 3692501430, 2469065531, 1280994345, 1280994345, 1280994345, 555756858, 555756858, 0]),\n    ]\n\n    for test in manual_tests:\n        test_function(test[-1], solve, test[0], test[1], test[2])\n\n    random_tests \u003d 100\n    for i in range(random_tests):\n        n \u003d random.randint(1000, 10000)\n        nums \u003d []\n        for i in range(n):\n            nums.append(random.randint(0, 1000000000))\n        perm \u003d list(range(1, n + 1))\n        random.shuffle(perm)\n        x \u003d solve2(n, nums, perm)\n        test_function(x, solve, n, nums, perm)\n"
          },
          "description_text": "\u003chtml\u003e\nRequirements: \u003cbr\u003e\nRead the DSU notebook. \u003cbr\u003e\n\n\u003cbr\u003e\n\u003ch1 dir \u003d \"rtl\"\u003eآرایه ی جادویی\u003c/h1\u003e\n\u003cbr\u003e\u003cbr\u003e\n\u003cp dir \u003d \"rtl\"\u003e\nبه شما آرایه ای n عضوی از اعداد نامنفی داده شده است. به دلیل ناشناحته ای اعداد\n  آن دونه دونه دارند از بین میروند.\n\u003cbr\u003e\n  ترتیب از بین رفتنشون به صورت یک جایگشت از اعداد 1 تا n داده میشود.\n\u003cbr\u003e\n  پس از اینکه هر عضو از بین میرود شما باید ماکسیمم جمع بلوکی از آنهایی که باقی مانده اند\n  را طوری بیابید که در این بلوک هیچ کدام از بین نرفته باشند.\n\u003cbr\u003e\u003cbr\u003e\nشما باید تابع ای به اسم solve را که n ، آرایه ی اولیه به صورت لیست و جایگشت از بین رفتن\n  ها را میگیرد را پر بکنید.\n\u003cbr\u003e\n  این تابع باید لیستی برگرداند که عضو \u003cstrong\u003ei\u003c/strong\u003e\n  ام آن جواب مسئله پس از i مین گام هست.\n\u003cbr\u003e\nشرط های مسئله هم اینها میباشند:\n  \u003cbr\u003e\n  n \u0026le; 100,000\n  \u003cbr\u003e\n  numbers[i] \u0026le; 1,000,000,000\n\u003c/p\u003e\n\n\u003cbr\u003e\n\n\u003ch3 dir\u003d\"rtl\"\u003eمثال\u003c/h3\u003e\n\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 1\u003c/h4\u003e\nn \u003d 4 \u003cbr\u003e\nnumbers \u003d [1,3,2,5] \u003cbr\u003e\nperm \u003d [3,4,1,2] \u003cbr\u003e\noutput \u003d [5,4,3,0] \u003cbr\u003e\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 2\u003c/h4\u003e\nn \u003d 5 \u003cbr\u003e\nnumbers \u003d [1,2,3,4,5] \u003cbr\u003e\nperm \u003d [4,2,3,5,1] \u003cbr\u003e\noutput \u003d [6,5,5,1,0] \u003cbr\u003e\n\n\n\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  سعی کنید برعکس فکر کنید.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  اگر از آخر به مسئله نگاه کنیم، بجای از بین رفتن اعضا دارند دونه دونه توی آرایه قرار میگیرند.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  وقتی یک عدد ظاعر میشود، باید دو طرفش را چک کنیم که ظاهر شده اند یا نه.\n  و اگر ظاهر شده بودند عدد آن افزایش پیدا میکند.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  بلوک ها تعدادی مجموعه ی مجزا اند. که یا تمام اعضای آن ظاهر شده اند یا نه.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  یک DSU برای اعداد بین 1 تا n در نظر بگیرید. وقتی عددی ظاهر میشود،\n  باید مجموعه ی متناظر با اندیسش را ظاهر شده در نظر بگیرید. و 2 طرفش را چک میکنیم.\n  هر کدام ظاهر شده بودند، با آن باید اجتماع بگیریم و مقدار جمع بلوک جدید را آپدیت کنیم.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  یک متغیر ans تعریف کنید و از آخر هر وقت به عقب برمیگردید، اگر حاصل جمع مجموعه ی جدیدی\n  که بوجود میاید از این بیشتر بود، باید برابر آن قرار گیرد.\n\u003c/div\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 1124,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "dsu \u003d DisjointSet(26)\n    for i in range(n):\n        n1 \u003d dsu.nodes[ord(a[i]) - ord(\u0027a\u0027)]\n        n2 \u003d dsu.nodes[ord(b[i]) - ord(\u0027a\u0027)]\n        dsu.union(n1, n2)\n    comps \u003d dsu.get_all_components()\n\n    ans \u003d 26 - len(comps)\n    rules \u003d []\n    for i in comps:\n        if len(i) \u003e 1:\n            for j in range(1, len(i)):\n                rules.append((chr(ord(\u0027a\u0027) + i[0]), chr(ord(\u0027a\u0027) + i[j])))\n\n    return ans, rules",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node(object):\n    def __init__(self, label):\n        self.label \u003d label\n        self.par \u003d self\n        self.rank \u003d 0\n\n\nclass DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        self.nodes \u003d [Node(i) for i in range(n)]\n\n    def find(self, u):\n        if u \u003d\u003d u.par:\n            return u\n        return self.find(u.par)\n\n    def union(self, u, v):\n        u, v \u003d self.find(u), self.find(v)\n        if u \u003d\u003d v:  # u and v are in the same component\n            return False\n\n        # making v the vertex with better rank\n        if u.rank \u003e v.rank:\n            u, v \u003d v, u\n\n        # merging two components\n        u.par \u003d v\n\n        # updating maximum depth as rank\n        if u.rank \u003d\u003d v.rank:\n            v.rank +\u003d 1\n\n        return True\n\n    # Returns a list of components where each component is a list of values\n    def get_all_components(self):\n        comps \u003d [[] for _ in range(self.n)]\n        for node in self.nodes:\n            comps[self.find(node).label].append(node.label)\n\n        comps \u003d [i for i in comps if i]  # Remove empty lists\n        return comps\n\n\ndef solve(n, a, b):\n    return #Complete the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import solve\nimport random\nimport string\n\n\nclass Node(object):\n    def __init__(self, label):\n        self.label \u003d label\n        self.par \u003d self\n        self.rank \u003d 0\n\n\nclass DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        self.nodes \u003d [Node(i) for i in range(n)]\n\n    def find(self, u):\n        if u \u003d\u003d u.par:\n            return u\n        return self.find(u.par)\n\n    def union(self, u, v):\n        u, v \u003d self.find(u), self.find(v)\n        if u \u003d\u003d v:  # u and v are in the same component\n            return False\n\n        # making v the vertex with better rank\n        if u.rank \u003e v.rank:\n            u, v \u003d v, u\n\n        # merging two components\n        u.par \u003d v\n\n        # updating maximum depth as rank\n        if u.rank \u003d\u003d v.rank:\n            v.rank +\u003d 1\n\n        return True\n\n    # Returns a list of components where each component is a list of values\n    def get_all_components(self):\n        comps \u003d [[] for _ in range(self.n)]\n        for node in self.nodes:\n            comps[self.find(node).label].append(node.label)\n\n        comps \u003d [i for i in comps if i]  # Remove empty lists\n        return comps\n\n\ndef solve2(n, a, b):\n    dsu \u003d DisjointSet(26)\n    for i in range(n):\n        n1 \u003d dsu.nodes[ord(a[i]) - ord(\u0027a\u0027)]\n        n2 \u003d dsu.nodes[ord(b[i]) - ord(\u0027a\u0027)]\n        dsu.union(n1, n2)\n    comps \u003d dsu.get_all_components()\n\n    ans \u003d 26 - len(comps)\n    rules \u003d []\n    for i in comps:\n        if len(i) \u003e 1:\n            for j in range(1, len(i)):\n                rules.append((chr(ord(\u0027a\u0027) + i[0]), chr(ord(\u0027a\u0027) + i[j])))\n\n    return ans, rules\n\n\ndef check_answer(n, a, b, ans, rules):\n    dsu1 \u003d DisjointSet(26)\n    for i in range(n):\n        n1 \u003d dsu1.nodes[ord(a[i]) - ord(\u0027a\u0027)]\n        n2 \u003d dsu1.nodes[ord(b[i]) - ord(\u0027a\u0027)]\n        dsu1.union(n1, n2)\n\n    dsu2 \u003d DisjointSet(26)\n    for rule in rules:\n        c1, c2 \u003d rule\n        c1 \u003d dsu2.nodes[ord(c1) - ord(\u0027a\u0027)]\n        c2 \u003d dsu2.nodes[ord(c2) - ord(\u0027a\u0027)]\n        dsu2.union(c1, c2)\n\n    for i in range(26):\n        dsu1.find(dsu1.nodes[i])\n        dsu2.find(dsu1.nodes[i])\n    for i in range(26):\n        label2 \u003d dsu2.find(dsu2.nodes[i]).label\n        n1 \u003d dsu1.find(dsu1.nodes[label2]).label\n        n2 \u003d dsu1.find(dsu1.nodes[i]).label\n        if n1 !\u003d n2:\n            failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format((n, a, b), (ans, rules),\n                                                                                 solve2(n, a, b)))\n\n\ndef string_generator(size, chars\u003dstring.ascii_lowercase):\n    return \u0027\u0027.join(random.choice(chars) for _ in range(size))\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    manual_tests \u003d [\n        (3, \u0027abb\u0027, \u0027dad\u0027),\n        (8, \u0027drpepper\u0027, \u0027cocacola\u0027),\n        (1, \u0027h\u0027, \u0027p\u0027),\n        (2, \u0027cx\u0027, \u0027da\u0027),\n        (3, \u0027bab\u0027, \u0027aab\u0027),\n        (15, \u0027xrezbaoiksvhuww\u0027, \u0027dcgcjrkafntbpbl\u0027),\n        (10, \u0027daefcecfae\u0027, \u0027ccdaceefca\u0027),\n        (10, \u0027fdfbffedbc\u0027, \u0027cfcdddfbed\u0027),\n        (100, \u0027bltlukvrharrgytdxnbjailgafwdmeowqvwwsadryzquqzvfhjnpkwvgpwvohvjwzafcxqmisgyyuidvvjqljqshflzywmcccksk\u0027,\n         \u0027jmgilzxkrvntkvqpsemrmyrasfqrofkwjwfznctwrmegghlhbbomjlojyapmrpkowqhsvwmrccfbnictnntjevynqilptaoharqv\u0027),\n\n        (100, \u0027pfkskdknmbxxslokqdliigxyvntsmaziljamlflwllvbhqnzpyvvzirhhhglsskiuogfoytcxjmospipybckwmkjhnfjddweyqqi\u0027,\n         \u0027akvzmboxlcfwccaoknrzrhvqcdqkqnywstmxinqbkftnbjmahrvexoipikkqfjjmasnxofhklxappvufpsyujdtrpjeejhznoeai\u0027),\n\n        (3, \u0027whw\u0027, \u0027uuh\u0027),\n        (242,\n         \u0027rrrrrrrrrrrrrmmmmmmmmmmmmmgggggggggggggwwwwwwwwwwwwwyyyyyyyyyyyyyhhhhhhhhhhhhhoooooooooooooqqqqqqqqqqqqqjjjjjjjjjjjjjvvvvvvvvvvvvvlllllllllllllnnnnnnnnnnnnnfffffffffffffeeeeeeeeaaaaaaaaiiiiiiiiuuuuuuuuzzzzzzzzbbbbbbbbxxxxxxxxttttttttsscckppdd\u0027,\n         \u0027rmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfrmgwyhoqjvlnfeaiuzbxteaiuzbxteaiuzbxteaiuzbxteaiuzbxteaiuzbxteaiuzbxteaiuzbxtscsckpdpd\u0027)\n    ]\n\n    for test in manual_tests:\n        n, a, b \u003d test\n        ans, rules \u003d solve(n, a, b)\n        check_answer(n, a, b, ans, rules)\n\n    random_tests \u003d 50\n    for i in range(random_tests):\n        n \u003d random.randint(1000, 100000)\n        a \u003d string_generator(n)\n        b \u003d string_generator(n)\n        ans, rules \u003d solve(n, a, b)\n        check_answer(n, a, b, ans, rules)\n"
          },
          "description_text": "\u003chtml\u003e\nRequirements: \u003cbr\u003e\nBe familiar with the concept of DSU.\n\u003cbr\u003e\n\n\u003cdiv dir\u003d\"rtl\"\u003e\n\u003ch1\u003eمتین و کیانوش\u003c/h1\u003e\n\u003cbr\u003e\u003cbr\u003e\nمتین و کیانوش خیلی دوستای صمیمی هستند. اینقدر صمیمی اند که بگفته ی خودشون تو همه چیز با هم\n  هم نظرن. یک روز که با هم قصد سفر کرده بودند، هر کدام تصمیم گرفتند پیراهنی بپوشند که روی\n  آن یک لوگو قرار دارد. این لوگو ها string هایی به طول n با حروف کوچک انگلیسی اند.\n  ولی وقتی به هم میرسند، الگو هاشون فرق میکند.\n\u003cbr\u003e\n  همانطور که میشد حدس زد، این اصلا براشون قابل قبول نیست. خوشبختانه یک خیاط در نزدیکی هست\n  و میتواند آنها را کمک کند. خیاط به این طریق عمل میکند که 1 دلار برای هر یک زوج مرتب از حروف\n  میگیرد. سپس توی هر دو پیرهن، میتوناد هر کدوم ازین زوج مرتب ها را به هر تعداد بار که میخواهد\n  با هم عوض کند.\n\u003cbr\u003e\n  چون متین و کیانوش دوست ندارند پول زیادی خرج کنند، از شما میخواهند تا مینیمم پلی که باید\n  خرج کنند تا پیرهن هایشان یکی بشن را بیابید.\n\u003cbr\u003e\n\u003cbr\u003e\u003cbr\u003e\n\n\u003cbr\u003e\n  شما باید تابع solve را که n طول رشته ها و a,b که دو رشته ی n تایی هستند را میگیرد پر بکنید.\n\u003cbr\u003e\n  خروجی این تابع یک دوتایی است. عضو اول مینیمم مقدار پول است.\n  عضو دوم لیستی از دو تایی های حروف است که به ازای هر کدوم یدونه پول پرداخت میکنیم.\n\u003cbr\u003e\n\u003cbr\u003e\n  تضمین شده است که\n  n \u0026le; 100,000\n\u003c/div\u003e\n\u003cbr\u003e\n\n\u003ch3 dir\u003d\"rtl\"\u003eمثال ها\u003c/h3\u003e\n\n\u003ch4\u003eمثال 1\u003c/h4\u003e\nn \u003d 3 \u003cbr\u003e\na \u003d \u0027abb\u0027 \u003cbr\u003e\nb \u003d \u0027dad\u0027 \u003cbr\u003e\noutput \u003d [2, [(\u0027a\u0027, \u0027d\u0027), (\u0027b\u0027, \u0027a\u0027)]] \u003cbr\u003e\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 2\u003c/h4\u003e\nn \u003d 8 \u003cbr\u003e\na \u003d \u0027drpepper\u0027 \u003cbr\u003e\nb \u003d \u0027cocacola\u0027 \u003cbr\u003e\noutput \u003d [7, [(\u0027l\u0027, \u0027e\u0027), (\u0027e\u0027, \u0027d\u0027), (\u0027d\u0027, \u0027c\u0027), (\u0027p\u0027, \u0027c\u0027),\n(\u0027o\u0027, \u0027p\u0027), (\u0027o\u0027, \u0027r\u0027), (\u0027a\u0027, \u0027r\u0027)]] \u003cbr\u003e\n\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  هر دو تایی که به ازایش پرداخت میکنیم را به عنوان یک یال بین آندو کاراکتر در نظر بگیرید.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  اگر (\u0027a\u0027, \u0027b\u0027) و (\u0027a\u0027, \u0027c\u0027) را داشته باشیم جزو خرید هامون، آیا\n  (\u0027b\u0027, \u0027c\u0027)\n  رو هم نیاز داریم؟\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  برای تغییر k تا حرف به هم باید حداقل k-1 دلار هزینه کنیم. (چرا؟)\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  هر وقت یک دو تایی اضافه میشود، مانند یک اجتماع عمل میکند. (اجتماع چه مجموعه هایی؟)\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n  یک DSU اه 26 تایی در نظر بگیرید.\n  هر وقت 2 کاراکتر توی دو رشته مساوی نبودند، باید در نهایت توی یک مجموعه باشند. پس\n  اجتماع میگیریم.\n\u003c/div\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 1036,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "assert len(points) \u003d\u003d n\n    dsu \u003d DisjointSet(n)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] \u003d\u003d points[j][0] or points[i][1] \u003d\u003d points[j][1]:\n                dsu.unite(i, j)\n\n    return dsu.get_count() - 1",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        # list of components of each set\n        self.set_lists \u003d [[i] for i in range(n)]\n        # pointing to the set of each component\n        self.set \u003d [i for i in range(n)]\n\n    def find(self, u):\n        return self.set[u]\n\n    def unite(self, u, v):\n        u_set, v_set \u003d self.find(u), self.find(v)\n        if u_set \u003d\u003d v_set:  # u and v are in the same component\n            return False\n\n        # set u to the smaller list\n        if len(self.set_lists[u_set]) \u003e len(self.set_lists[v_set]):\n            u_set, v_set \u003d v_set, u_set\n\n        # merging the smaller list into the large list\n        for i in self.set_lists[u_set]:\n            self.set_lists[v_set].append(i)\n            # updating set of each element\n            self.set[i] \u003d v_set\n\n        return True\n\n    def get_count(self):\n        count \u003d 0\n        for i in range(self.n):\n            if self.set[i] \u003d\u003d i:\n                count +\u003d 1\n        return count\n\n\ndef solve(n, points):\n    return #Complete the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import solve\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    manual_tests \u003d [\n        (14, [(25, 23), (499, 406), (193, 266), (823, 751), (219, 227), (101, 138), (978, 992), (43, 74), (997, 932),\n              (237, 189), (634, 538), (774, 740), (842, 767), (742, 802)], 13),\n\n        (6, [(535, 699), (217, 337), (508, 780), (180, 292), (393, 112), (732, 888)], 5),\n\n        (7, [(948, 946), (130, 130), (761, 758), (941, 938), (971, 971), (387, 385), (509, 510)], 6),\n\n        (9, [(811, 859), (656, 676), (76, 141), (945, 951), (497, 455), (18, 55), (335, 294), (267, 275), (656, 689)],\n         7),\n\n        (1, [(321, 88)], 0),\n        (11,\n         [(798, 845), (722, 911), (374, 270), (629, 537), (748, 856), (831, 885), (486, 641), (751, 829), (609, 492),\n          (98, 27), (654, 663)], 10),\n        (17,\n         [(660, 646), (440, 442), (689, 618), (441, 415), (922, 865), (950, 972), (312, 366), (203, 229), (873, 860),\n          (219, 199), (344, 308), (169, 176), (961, 992), (153, 84), (201, 230), (987, 938), (834, 815)], 16),\n        (24, [(171, 35), (261, 20), (4, 206), (501, 446), (961, 912), (581, 748), (946, 978), (463, 514), (841, 889),\n              (341, 466), (842, 967), (54, 102), (235, 261), (925, 889), (682, 672), (623, 636), (268, 94), (635, 710),\n              (474, 510), (697, 794), (586, 663), (182, 184), (806, 663), (468, 459)], 21),\n        (2, [(2, 1), (4, 1)], 0),\n        (2, [(2, 1), (1, 2)], 1),\n        (28,\n         [(462, 483), (411, 401), (118, 94), (111, 127), (5, 6), (70, 52), (893, 910), (73, 63), (818, 818), (182, 201),\n          (642, 633), (900, 886), (893, 886), (684, 700), (157, 173), (953, 953), (671, 660), (224, 225), (832, 801),\n          (152, 157), (601, 585), (115, 101), (739, 722), (611, 606), (659, 642), (461, 469), (702, 689), (649, 653)],\n         25),\n    ]\n\n    for test in manual_tests:\n        n, points, ans1 \u003d test\n        ans2 \u003d solve(n, points)\n        if ans1 !\u003d ans2:\n            failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format((n, points), ans2, ans1))\n"
          },
          "description_text": "\u003chtml\u003e\nRequirements: \u003cbr\u003e\nBe familiar with the concept of DSU.\n\u003cdiv dir\u003d\"rtl\"\u003e\n\u003cbr\u003e\n\u003ch1\u003eغار یخی\u003c/h1\u003e\n\u003cbr\u003e\u003cbr\u003e\nکیانوش به همراه n-1 تا از دانشجویان توی یک غار یخی گیر افتادند. غار را به صورت یک\n    صفحه در نظر بگیرید (از بالا). این n نفر در n نقطه ی متمایز قرار گرفته اند (مختصات صحیح) و هر کدام در نقطه خود مقدار شن برای\n    جلوگیری از لغزش ریخته اند.\n    کیانوش برای بالا بردن روحیه ی آنها، تصمیم گرفته توی این غار لیز بخوره و به هرکدوم یه \"خدا رو شکر\" بگه.\n    ولی همونطور که حدس میزنید غار لیزه. کیانوش توی یکی از 4 جهت بالا، پایین، چپ و راست میتونه\n    لیز بخوره و تا به یکی از افراد دیگه یا محل شنی نرسه نمیتونه بایسته.\n\u003cbr\u003e\n    با این وضع ممکنه نتونه با شروع از جای اولیش به همه برسه. شما باید مینیمم\n    تعداد نقاط دیگه ای که با شنی کردنشون کیانوش بتونه کارش رو انجام بده پیدا بکنید.\n\u003cbr\u003e\n    شما باید تابع solve را که n و لیست نقاط را ورودی میگیرد را پر بکنید.\n\u003cbr\u003e\n    این تابع یک عدد که مینیمم نقاط شنی اضافه هست رو برمیگرداند.\n\u003cbr\u003e\n\u003cbr\u003e\n    تضمین شده است که:\n    \u003cbr\u003e\n    \u003cp dir\u003d\"ltr\"\u003e1 \u0026le; n \u0026le; 100\u003c/p\u003e\n    \u003cp dir\u003d\"ltr\"\u003e1 \u0026le; x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e \u0026le; 1000\u003c/p\u003e\n\n\u003cbr\u003e\n\u003c/div\u003e\n\n\u003ch3 dir\u003d\"rtl\"\u003eمثال ها\u003c/h3\u003e\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 1\u003c/h4\u003e\nn \u003d 2 \u003cbr\u003e\npoints \u003d [(2, 1), (1, 2)] \u003cbr\u003e\noutput \u003d 1 \u003cbr\u003e\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 2\u003c/h4\u003e\nn \u003d 2 \u003cbr\u003e\npoints \u003d [(2, 1), (4, 1)] \u003cbr\u003e\noutput \u003d 0 \u003cbr\u003e\n\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    اگر بشه از A به B رفت و از B به C رفت میشه از A به C هم رفت.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    نقاطی را در نظر بگیرید که بشه از هر کدوم به اونیکی رفت. اگر یک نقطه ی جدید\n    را شنی کنیم چه میشود؟\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    میشه مسقیما از A به B رفت اگه:\n    A.x \u003d B.x\n    و یا\n    A.y \u003d B.y\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    یک DSU با n تا عضو در نظر بگیرید که هر عضو متناظر یک نقطه است. اگر بشه مستقیما\n    از A به B رفت، مجموعه هایشان را اجتماع بگیرید. حالا چند تا نقطه ی شنی اضافه میخواهیم؟\n\u003c/div\u003e\n\n\n\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 1209,
                  "length": 29,
                  "hints": [],
                  "possible_answer": "assert n \u003d\u003d len(words)\n    assert n \u003d\u003d len(prices)\n    assert m \u003d\u003d len(message)\n\n    dsu \u003d DisjointSet(n)\n    indices \u003d {}\n    for i in range(n):\n        dsu.nodes[i].min \u003d prices[i]\n        indices[words[i]] \u003d i\n\n    for group in groups:\n        for i in range(len(group)):\n            dsu.union(dsu.nodes[group[0]], dsu.nodes[group[i]])\n\n    price \u003d 0\n    for word in message:\n        price +\u003d dsu.find(dsu.nodes[indices[word]]).min\n\n    return price",
                  "placeholder_text": "return #Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node(object):\n    def __init__(self, label):\n        self.label \u003d label\n        self.par \u003d self\n        self.rank \u003d 0\n        self.min \u003d 0\n\n\nclass DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        self.nodes \u003d [Node(i) for i in range(n)]\n\n    def find(self, u):\n        if u \u003d\u003d u.par:\n            return u\n        return self.find(u.par)\n\n    def union(self, u, v):\n        u, v \u003d self.find(u), self.find(v)\n        if u \u003d\u003d v:  # u and v are in the same component\n            return False\n\n        # making v the vertex with better rank\n        if u.rank \u003e v.rank:\n            u, v \u003d v, u\n\n        # merging two components\n        u.par \u003d v\n\n        # updating maximum depth as rank\n        if u.rank \u003d\u003d v.rank:\n            v.rank +\u003d 1\n\n        v.min \u003d min(v.min, u.min)\n\n        return True\n\n    # Returns a list of components where each component is a list of values\n    def get_all_components(self):\n        comps \u003d [[] for _ in range(self.n)]\n        for node in self.nodes:\n            comps[self.find(node).label].append(node.label)\n\n        comps \u003d [i for i in comps if i]  # Remove empty lists\n        return comps\n\n\ndef solve(n, m, words, prices, groups, message):\n    return #Complete the function\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import solve\nimport string, random\n\n\nclass Node(object):\n    def __init__(self, label):\n        self.label \u003d label\n        self.par \u003d self\n        self.rank \u003d 0\n        self.min \u003d 0\n\n\nclass DisjointSet(object):\n    def __init__(self, n):\n        self.n \u003d n\n        self.nodes \u003d [Node(i) for i in range(n)]\n\n    def find(self, u):\n        if u \u003d\u003d u.par:\n            return u\n        return self.find(u.par)\n\n    def union(self, u, v):\n        u, v \u003d self.find(u), self.find(v)\n        if u \u003d\u003d v:  # u and v are in the same component\n            return False\n\n        # making v the vertex with better rank\n        if u.rank \u003e v.rank:\n            u, v \u003d v, u\n\n        # merging two components\n        u.par \u003d v\n\n        # updating maximum depth as rank\n        if u.rank \u003d\u003d v.rank:\n            v.rank +\u003d 1\n\n        v.min \u003d min(v.min, u.min)\n\n        return True\n\n    # Returns a list of components where each component is a list of values\n    def get_all_components(self):\n        comps \u003d [[] for _ in range(self.n)]\n        for node in self.nodes:\n            comps[self.find(node).label].append(node.label)\n\n        comps \u003d [i for i in comps if i]  # Remove empty lists\n        return comps\n\n\ndef solve2(n, m, words, prices, groups, message):\n    dsu \u003d DisjointSet(n)\n    indices \u003d {}\n    for i in range(n):\n        dsu.nodes[i].min \u003d prices[i]\n        indices[words[i]] \u003d i\n\n    for group in groups:\n        for i in range(len(group)):\n            dsu.union(dsu.nodes[group[0]], dsu.nodes[group[i]])\n\n    price \u003d 0\n    for word in message:\n        price +\u003d dsu.find(dsu.nodes[indices[word]]).min\n\n    return price\n\n\ndef string_generator(size, chars\u003dstring.ascii_lowercase):\n    return \u0027\u0027.join(random.choice(chars) for _ in range(size))\n\n\ndef partition(lst, n):\n    random.shuffle(lst)\n    division \u003d len(lst) / float(n)\n    return [lst[int(round(division * i)): int(round(division * (i + 1)))] for i in range(n)]\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    manual_tests \u003d [\n        (5, 4, [\u0027i\u0027, \u0027loser\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027], [100, 1, 1, 5, 10], [[0], [2], [1, 4], [3]],\n         [\u0027i\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027], 107),\n\n        (5, 4, [\u0027i\u0027, \u0027loser\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027], [100, 20, 1, 5, 10], [[0], [2], [1, 4], [3]],\n         [\u0027i\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027], 116),\n\n        (1, 1, [\u0027a\u0027], [1000000000], [[0]], [\u0027a\u0027], 1000000000),\n\n        (1, 10, [\u0027a\u0027], [1000000000], [[0]], [\u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027, \u0027a\u0027], 10000000000),\n    ]\n\n    for test in manual_tests:\n        n, m, words, prices, groups, message, ans1 \u003d test\n        ans2 \u003d solve(n, m, words, prices, groups, message)\n        if ans1 !\u003d ans2:\n            failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format((words, prices, groups, message), ans2,\n                                                                                 ans1))\n\n        random_tests \u003d 10\n        for i in range(random_tests):\n            n \u003d random.randint(1000, 10000)\n            m \u003d random.randint(1000, 10000)\n            k \u003d random.randint(1, min(10, n))\n            words \u003d [string_generator(random.randint(10, 20)) for _ in range(n)]\n            prices \u003d [random.randint(1, 10000) for _ in range(n)]\n            lst \u003d [i for i in range(n)]\n            groups \u003d partition(lst, k)\n            message \u003d [words[random.randint(0, n - 1)] for _ in range(m)]\n            ans2 \u003d solve(n, m, words, prices, groups, message)\n            ans1 \u003d solve2(n, m, words, prices, groups, message)\n            if ans2 !\u003d ans1:\n                failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format((words, prices, groups, message),\n                                                                                     ans2,\n                                                                                     ans1))\n"
          },
          "description_text": "\u003chtml\u003e\nRequirements: \u003cbr\u003e\nBe familiar with the concept of DSU.\n\u003cbr\u003e\n\u003cdiv dir\u003d\"rtl\"\u003e\n\u003ch1\u003eبیسیم پر هزینه\u003c/h1\u003e\n\u003cbr\u003e\u003cbr\u003e\nمتین و کیانوش 2 تا یه جفت بیسیم ارزان خریدند. اما بیسیم ها یه محدودیت هایی دارند.\n    از طریق اونها میشه فقط n تا کلمه رو فرستاد و بعضی ازین کلمه ها هم، هم معنی اند.\n\u003cbr\u003e\nکلمه ی i ام برای فرستادنش\n    a\u003csub\u003ei\u003c/sub\u003e\n    ثانبه طول میکشد. کیانوش پیامی دارد که میخواهد به متین برساند. او میتواند هر کلمه توی پیامش\n    رو با هر کلمه ی هم معنیش جابحا کند. به کیانوش کمک کنید با کمترین زمان ممکن این پیام را\n    به متین برساند.\n\u003cbr\u003e\n    شما باید تابع solve را که n و m و لیست کلمات و لیست زمان های فرستادن و لیست گروه های هم معنی و پیام کیانوش را\n    ورودی میگیرد را پر بکنید.\n\u003cbr\u003e\n\u003cbr\u003e\u003cbr\u003e\n n تعداد کل کلمات است.\n\u003cbr\u003e\u003cbr\u003e\n    m تعداد کلمات در پیام کیانوش است.\n\u003cbr\u003e\u003cbr\u003e\n    کلمات و زمان ها در قالب 2 لیست داده میشوند.\n\u003cbr\u003e\u003cbr\u003e\n    گروه های هم معنی در قالب لیستی از لیست ها داده میشود که در هر لیست، اندیس کلمات هم معنی\n    آمده است.\n\u003cbr\u003e\u003cbr\u003e\n    و در نهایت لیستی از کلمات کیانوش داده میشود.\n\u003cbr\u003e\u003cbr\u003e\n    خروجی تابع مینیمم زمان فرستادن است.\n\u003cbr\u003e\n\u003cbr\u003e\n    تضمین شده است که:\n    \u003cp dir\u003d\"ltr\"\u003e1 \u0026le; n \u0026le; 10000\u003c/p\u003e\n    \u003cp dir\u003d\"ltr\"\u003e1 \u0026le; m \u0026le; 10000\u003c/p\u003e\n\n\u003cbr\u003e\n\u003c/div\u003e\n\n\u003ch3 dir\u003d\"rtl\"\u003eمثال ها\u003c/h3\u003e\n\n\u003ch4\u003eمثال 1\u003c/h4\u003e\nn \u003d 5 \u003cbr\u003e\nm \u003d 5 \u003cbr\u003e\nwords \u003d [\u0027i\u0027, \u0027loser\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027] \u003cbr\u003e\ntimes \u003d  [100, 1, 1, 5, 10]\u003cbr\u003e\ngroups \u003d [[0], [2], [1, 4], [3]] \u003cbr\u003e\nmessage \u003d  [\u0027i\u0027, \u0027am\u0027, \u0027the\u0027, \u0027second\u0027] \u003cbr\u003e\noutput \u003d 107\n\n\u003ch4 dir\u003d\"rtl\"\u003eمثال 2\u003c/h4\u003e\nn \u003d 1 \u003cbr\u003e\nm \u003d 1 \u003cbr\u003e\nwords \u003d [\u0027a\u0027] \u003cbr\u003e\ntimes \u003d  [1000000000]\u003cbr\u003e\ngroups \u003d [[0]] \u003cbr\u003e\nmessage \u003d  [\u0027a\u0027] \u003cbr\u003e\noutput \u003d 1000000000\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    کلمات هم معنی را در یک محموعه قرار بدهید. حالا چطوری مینیمم را بدست بیاریم؟\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    DSU\n    را به شکل درختی پیاده سازی بکنید. و یک مقدار min به ریشه هم بدهید.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\" dir\u003d\"rtl\"\u003e\n    وقتی 2 تا مجموعه را اجتماع میگیرید، min ریشه ی جدید برابر با مینیمم  min های دو ریشه ی\n    قبلی است.\n\u003c/div\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Balanced BSTs",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "rb_tree.py": {
              "name": "rb_tree.py",
              "placeholders": [],
              "is_visible": true,
              "text": "\"\"\"\nA classic (not left-leaning) Red-Black Tree implementation, supporting addition and deletion.\n\"\"\"\n\n# The possible Node colors\nBLACK \u003d \u0027BLACK\u0027\nRED \u003d \u0027RED\u0027\nNIL \u003d \u0027NIL\u0027\n\n\nclass Node:\n    def __init__(self, value, color, parent, left\u003dNone, right\u003dNone):\n        self.value \u003d value\n        self.color \u003d color\n        self.parent \u003d parent\n        self.left \u003d left\n        self.right \u003d right\n\n    def __repr__(self):\n        return \u0027{color} {val} Node\u0027.format(color\u003dself.color, val\u003dself.value)\n\n    def __iter__(self):\n        if self.left.color !\u003d NIL:\n            yield from self.left.__iter__()\n\n        yield self.value\n\n        if self.right.color !\u003d NIL:\n            yield from self.right.__iter__()\n\n    def __eq__(self, other):\n        if self.color \u003d\u003d NIL and self.color \u003d\u003d other.color:\n            return True\n\n        if self.parent is None or other.parent is None:\n            parents_are_same \u003d self.parent is None and other.parent is None\n        else:\n            parents_are_same \u003d self.parent.value \u003d\u003d other.parent.value and self.parent.color \u003d\u003d other.parent.color\n        return self.value \u003d\u003d other.value and self.color \u003d\u003d other.color and parents_are_same\n\n    def has_children(self) -\u003e bool:\n        \"\"\" Returns a boolean indicating if the node has children \"\"\"\n        return bool(self.get_children_count())\n\n    def get_children_count(self) -\u003e int:\n        \"\"\" Returns the number of NOT NIL children the node has \"\"\"\n        if self.color \u003d\u003d NIL:\n            return 0\n        return sum([int(self.left.color !\u003d NIL), int(self.right.color !\u003d NIL)])\n\n\nclass RedBlackTree:\n    # every node has null nodes as children initially, create one such object for easy management\n    NIL_LEAF \u003d Node(value\u003dNone, color\u003dNIL, parent\u003dNone)\n\n    def __init__(self):\n        self.count \u003d 0\n        self.root \u003d None\n        self.ROTATIONS \u003d {\n            # Used for deletion and uses the sibling\u0027s relationship with his parent as a guide to the rotation\n            \u0027L\u0027: self._right_rotation,\n            \u0027R\u0027: self._left_rotation\n        }\n\n    def __iter__(self):\n        if not self.root:\n            return list()\n        yield from self.root.__iter__()\n\n    def add(self, value):\n        if not self.root:\n            self.root \u003d Node(value, color\u003dBLACK, parent\u003dNone, left\u003dself.NIL_LEAF, right\u003dself.NIL_LEAF)\n            self.count +\u003d 1\n            return\n        parent, node_dir \u003d self._find_parent(value)\n        if node_dir is None:\n            return  # value is in the tree\n        new_node \u003d Node(value\u003dvalue, color\u003dRED, parent\u003dparent, left\u003dself.NIL_LEAF, right\u003dself.NIL_LEAF)\n        if node_dir \u003d\u003d \u0027L\u0027:\n            parent.left \u003d new_node\n        else:\n            parent.right \u003d new_node\n\n        self._try_rebalance(new_node)\n        self.count +\u003d 1\n\n    def remove(self, value):\n        \"\"\"\n        Try to get a node with 0 or 1 children.\n        Either the node we\u0027re given has 0 or 1 children or we get its successor.\n        \"\"\"\n        node_to_remove \u003d self.find_node(value)\n        if node_to_remove is None:  # node is not in the tree\n            return\n        if node_to_remove.get_children_count() \u003d\u003d 2:\n            # find the in-order successor and replace its value.\n            # then, remove the successor\n            successor \u003d self._find_in_order_successor(node_to_remove)\n            node_to_remove.value \u003d successor.value  # switch the value\n            node_to_remove \u003d successor\n\n        # has 0 or 1 children!\n        self._remove(node_to_remove)\n        self.count -\u003d 1\n\n    def contains(self, value) -\u003e bool:\n        \"\"\" Returns a boolean indicating if the given value is present in the tree \"\"\"\n        return bool(self.find_node(value))\n\n    def ceil(self, value) -\u003e int or None:\n        \"\"\"\n        Given a value, return the closest value that is equal or bigger than it,\n        returning None when no such exists\n        \"\"\"\n        if self.root is None: return None\n        last_found_val \u003d None if self.root.value \u003c value else self.root.value\n\n        def find_ceil(node):\n            nonlocal last_found_val\n            if node \u003d\u003d self.NIL_LEAF:\n                return None\n            if node.value \u003d\u003d value:\n                last_found_val \u003d node.value\n                return node.value\n            elif node.value \u003c value:\n                # go right\n                return find_ceil(node.right)\n            else:\n                # this node is bigger, save its value and go left\n                last_found_val \u003d node.value\n\n                return find_ceil(node.left)\n        find_ceil(self.root)\n        return last_found_val\n\n    def floor(self, value) -\u003e int or None:\n        \"\"\"\n        Given a value, return the closest value that is equal or less than it,\n        returning None when no such exists\n        \"\"\"\n        if self.root is None: return None\n        last_found_val \u003d None if self.root.value \u003e value else self.root.value\n\n        def find_floor(node):\n            nonlocal last_found_val\n            if node \u003d\u003d self.NIL_LEAF:\n                return None\n            if node.value \u003d\u003d value:\n                last_found_val \u003d node.value\n                return node.value\n            elif node.value \u003c value:\n                # this node is smaller, save its value and go right, trying to find a cloer one\n                last_found_val \u003d node.value\n\n                return find_floor(node.right)\n            else:\n                return find_floor(node.left)\n\n        find_floor(self.root)\n        return last_found_val\n\n    def _remove(self, node):\n        \"\"\"\n        Receives a node with 0 or 1 children (typically some sort of successor)\n        and removes it according to its color/children\n        :param node: Node with 0 or 1 children\n        \"\"\"\n        left_child \u003d node.left\n        right_child \u003d node.right\n        not_nil_child \u003d left_child if left_child !\u003d self.NIL_LEAF else right_child\n        if node \u003d\u003d self.root:\n            if not_nil_child !\u003d self.NIL_LEAF:\n                # if we\u0027re removing the root and it has one valid child, simply make that child the root\n                self.root \u003d not_nil_child\n                self.root.parent \u003d None\n                self.root.color \u003d BLACK\n            else:\n                self.root \u003d None\n        elif node.color \u003d\u003d RED:\n            if not node.has_children():\n                # Red node with no children, the simplest remove\n                self._remove_leaf(node)\n            else:\n                \"\"\"\n                Since the node is red he cannot have a child.\n                If he had a child, it\u0027d need to be black, but that would mean that\n                the black height would be bigger on the one side and that would make our tree invalid\n                \"\"\"\n                raise Exception(\u0027Unexpected behavior\u0027)\n        else:  # node is black!\n            if right_child.has_children() or left_child.has_children():  # sanity check\n                raise Exception(\u0027The red child of a black node with 0 or 1 children\u0027\n                                \u0027 cannot have children, otherwise the black height of the tree becomes invalid! \u0027)\n            if not_nil_child.color \u003d\u003d RED:\n                \"\"\"\n                Swap the values with the red child and remove it  (basically un-link it)\n                Since we\u0027re a node with one child only, we can be sure that there are no nodes below the red child.\n                \"\"\"\n                node.value \u003d not_nil_child.value\n                node.left \u003d not_nil_child.left\n                node.right \u003d not_nil_child.right\n            else:  # BLACK child\n                # 6 cases :o\n                self._remove_black_node(node)\n\n    def _remove_leaf(self, leaf):\n        \"\"\" Simply removes a leaf node by making it\u0027s parent point to a NIL LEAF\"\"\"\n        if leaf.value \u003e\u003d leaf.parent.value:\n            # in those weird cases where they\u0027re equal due to the successor swap\n            leaf.parent.right \u003d self.NIL_LEAF\n        else:\n            leaf.parent.left \u003d self.NIL_LEAF\n\n    def _remove_black_node(self, node):\n        \"\"\"\n        Loop through each case recursively until we reach a terminating case.\n        What we\u0027re left with is a leaf node which is ready to be deleted without consequences\n        \"\"\"\n        self.__case_1(node)\n        self._remove_leaf(node)\n\n    def __case_1(self, node):\n        \"\"\"\n        Case 1 is when there\u0027s a double black node on the root\n        Because we\u0027re at the root, we can simply remove it\n        and reduce the black height of the whole tree.\n\n            __|10B|__                  __10B__\n           /         \\      \u003d\u003d\u003e       /       \\\n          9B         20B            9B        20B\n        \"\"\"\n        if self.root \u003d\u003d node:\n            node.color \u003d BLACK\n            return\n        self.__case_2(node)\n\n    def __case_2(self, node):\n        \"\"\"\n        Case 2 applies when\n            the parent is BLACK\n            the sibling is RED\n            the sibling\u0027s children are BLACK or NIL\n        It takes the sibling and rotates it\n\n                         40B                                              60B\n                        /   \\       --CASE 2 ROTATE--\u003e                   /   \\\n                    |20B|   60R       LEFT ROTATE                      40R   80B\n    DBL BLACK IS 20----^   /   \\      SIBLING 60R                     /   \\\n                         50B    80B                                |20B|  50B\n            (if the sibling\u0027s direction was left of it\u0027s parent, we would RIGHT ROTATE it)\n        Now the original node\u0027s parent is RED\n        and we can apply case 4 or case 6\n        \"\"\"\n        parent \u003d node.parent\n        sibling, direction \u003d self._get_sibling(node)\n        if sibling.color \u003d\u003d RED and parent.color \u003d\u003d BLACK and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED:\n            self.ROTATIONS[direction](node\u003dNone, parent\u003dsibling, grandfather\u003dparent)\n            parent.color \u003d RED\n            sibling.color \u003d BLACK\n            return self.__case_1(node)\n        self.__case_3(node)\n\n    def __case_3(self, node):\n        \"\"\"\n        Case 3 deletion is when:\n            the parent is BLACK\n            the sibling is BLACK\n            the sibling\u0027s children are BLACK\n        Then, we make the sibling red and\n        pass the double black node upwards\n\n                            Parent is black\n               ___50B___    Sibling is black                       ___50B___\n              /         \\   Sibling\u0027s children are black          /         \\\n           30B          80B        CASE 3                       30B        |80B|  Continue with other cases\n          /   \\        /   \\        \u003d\u003d\u003e                        /  \\        /   \\\n        20B   35R    70B   |90B|\u003c---REMOVE                   20B  35R     70R   X\n              /  \\                                               /   \\\n            34B   37B                                          34B   37B\n        \"\"\"\n        parent \u003d node.parent\n        sibling, _ \u003d self._get_sibling(node)\n        if (sibling.color \u003d\u003d BLACK and parent.color \u003d\u003d BLACK\n           and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED):\n            # color the sibling red and forward the double black node upwards\n            # (call the cases again for the parent)\n            sibling.color \u003d RED\n            return self.__case_1(parent)  # start again\n\n        self.__case_4(node)\n\n    def __case_4(self, node):\n        \"\"\"\n        If the parent is red and the sibling is black with no red children,\n        simply swap their colors\n        DB-Double Black\n                __10R__                   __10B__        The black height of the left subtree has been incremented\n               /       \\                 /       \\       And the one below stays the same\n             DB        15B      \u003d\u003d\u003d\u003e    X        15R     No consequences, we\u0027re done!\n                      /   \\                     /   \\\n                    12B   17B                 12B   17B\n        \"\"\"\n        parent \u003d node.parent\n        if parent.color \u003d\u003d RED:\n            sibling, direction \u003d self._get_sibling(node)\n            if sibling.color \u003d\u003d BLACK and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED:\n                parent.color, sibling.color \u003d sibling.color, parent.color  # switch colors\n                return  # Terminating\n        self.__case_5(node)\n\n    def __case_5(self, node):\n        \"\"\"\n        Case 5 is a rotation that changes the circumstances so that we can do a case 6\n        If the closer node is red and the outer BLACK or NIL, we do a left/right rotation, depending on the orientation\n        This will showcase when the CLOSER NODE\u0027s direction is RIGHT\n\n              ___50B___                                                    __50B__\n             /         \\                                                  /       \\\n           30B        |80B|  \u003c-- Double black                           35B      |80B|        Case 6 is now\n          /  \\        /   \\      Closer node is red (35R)              /   \\      /           applicable here,\n        20B  35R     70R   X     Outer is black (20B)               30R    37B  70R           so we redirect the node\n            /   \\                So we do a LEFT ROTATION          /   \\                      to it :)\n          34B  37B               on 35R (closer node)           20B   34B\n        \"\"\"\n        sibling, direction \u003d self._get_sibling(node)\n        closer_node \u003d sibling.right if direction \u003d\u003d \u0027L\u0027 else sibling.left\n        outer_node \u003d sibling.left if direction \u003d\u003d \u0027L\u0027 else sibling.right\n        if closer_node.color \u003d\u003d RED and outer_node.color !\u003d RED and sibling.color \u003d\u003d BLACK:\n            if direction \u003d\u003d \u0027L\u0027:\n                self._left_rotation(node\u003dNone, parent\u003dcloser_node, grandfather\u003dsibling)\n            else:\n                self._right_rotation(node\u003dNone, parent\u003dcloser_node, grandfather\u003dsibling)\n            closer_node.color \u003d BLACK\n            sibling.color \u003d RED\n\n        self.__case_6(node)\n\n    def __case_6(self, node):\n        \"\"\"\n        Case 6 requires\n            SIBLING to be BLACK\n            OUTER NODE to be RED\n        Then, does a right/left rotation on the sibling\n        This will showcase when the SIBLING\u0027s direction is LEFT\n\n                            Double Black\n                    __50B__       |                               __35B__\n                   /       \\      |                              /       \\\n      SIBLING--\u003e 35B      |80B| \u003c-                             30R       50R\n                /   \\      /                                  /   \\     /   \\\n             30R    37B  70R   Outer node is RED            20B   34B 37B    80B\n            /   \\              Closer node doesn\u0027t                           /\n         20B   34B                 matter                                   70R\n                               Parent doesn\u0027t\n                                   matter\n                               So we do a right rotation on 35B!\n        \"\"\"\n        sibling, direction \u003d self._get_sibling(node)\n        outer_node \u003d sibling.left if direction \u003d\u003d \u0027L\u0027 else sibling.right\n\n        def __case_6_rotation(direction):\n            parent_color \u003d sibling.parent.color\n            self.ROTATIONS[direction](node\u003dNone, parent\u003dsibling, grandfather\u003dsibling.parent)\n            # new parent is sibling\n            sibling.color \u003d parent_color\n            sibling.right.color \u003d BLACK\n            sibling.left.color \u003d BLACK\n\n        if sibling.color \u003d\u003d BLACK and outer_node.color \u003d\u003d RED:\n            return __case_6_rotation(direction)  # terminating\n\n        raise Exception(\u0027We should have ended here, something is wrong\u0027)\n\n    def _try_rebalance(self, node):\n        \"\"\"\n        Given a red child node, determine if there is a need to rebalance (if the parent is red)\n        If there is, rebalance it\n        \"\"\"\n        parent \u003d node.parent\n        value \u003d node.value\n        if (parent is None  # what the fuck? (should not happen)\n           or parent.parent is None  # parent is the root\n           or (node.color !\u003d RED or parent.color !\u003d RED)):  # no need to rebalance\n            return\n        grandfather \u003d parent.parent\n        node_dir \u003d \u0027L\u0027 if parent.value \u003e value else \u0027R\u0027\n        parent_dir \u003d \u0027L\u0027 if grandfather.value \u003e parent.value else \u0027R\u0027\n        uncle \u003d grandfather.right if parent_dir \u003d\u003d \u0027L\u0027 else grandfather.left\n        general_direction \u003d node_dir + parent_dir\n\n        if uncle \u003d\u003d self.NIL_LEAF or uncle.color \u003d\u003d BLACK:\n            # rotate\n            if general_direction \u003d\u003d \u0027LL\u0027:\n                self._right_rotation(node, parent, grandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027RR\u0027:\n                self._left_rotation(node, parent, grandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027LR\u0027:\n                self._right_rotation(node\u003dNone, parent\u003dnode, grandfather\u003dparent)\n                # due to the prev rotation, our node is now the parent\n                self._left_rotation(node\u003dparent, parent\u003dnode, grandfather\u003dgrandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027RL\u0027:\n                self._left_rotation(node\u003dNone, parent\u003dnode, grandfather\u003dparent)\n                # due to the prev rotation, our node is now the parent\n                self._right_rotation(node\u003dparent, parent\u003dnode, grandfather\u003dgrandfather, to_recolor\u003dTrue)\n            else:\n                raise Exception(\"{} is not a valid direction!\".format(general_direction))\n        else:  # uncle is RED\n            self._recolor(grandfather)\n\n    def __update_parent(self, node, parent_old_child, new_parent):\n        \"\"\"\n        Our node \u0027switches\u0027 places with the old child\n        Assigns a new parent to the node.\n        If the new_parent is None, this means that our node becomes the root of the tree\n        \"\"\"\n        node.parent \u003d new_parent\n        if new_parent:\n            # Determine the old child\u0027s position in order to put node there\n            if new_parent.value \u003e parent_old_child.value:\n                new_parent.left \u003d node\n            else:\n                new_parent.right \u003d node\n        else:\n            self.root \u003d node\n\n    def _right_rotation(self, node, parent, grandfather, to_recolor\u003dFalse):\n        grand_grandfather \u003d grandfather.parent\n        self.__update_parent(node\u003dparent, parent_old_child\u003dgrandfather, new_parent\u003dgrand_grandfather)\n\n        old_right \u003d parent.right\n        parent.right \u003d grandfather\n        grandfather.parent \u003d parent\n\n        grandfather.left \u003d old_right  # save the old right values\n        old_right.parent \u003d grandfather\n\n        if to_recolor:\n            parent.color \u003d BLACK\n            node.color \u003d RED\n            grandfather.color \u003d RED\n\n    def _left_rotation(self, node, parent, grandfather, to_recolor\u003dFalse):\n        grand_grandfather \u003d grandfather.parent\n        self.__update_parent(node\u003dparent, parent_old_child\u003dgrandfather, new_parent\u003dgrand_grandfather)\n\n        old_left \u003d parent.left\n        parent.left \u003d grandfather\n        grandfather.parent \u003d parent\n\n        grandfather.right \u003d old_left  # save the old left values\n        old_left.parent \u003d grandfather\n\n        if to_recolor:\n            parent.color \u003d BLACK\n            node.color \u003d RED\n            grandfather.color \u003d RED\n\n    def _recolor(self, grandfather):\n        grandfather.right.color \u003d BLACK\n        grandfather.left.color \u003d BLACK\n        if grandfather !\u003d self.root:\n            grandfather.color \u003d RED\n        self._try_rebalance(grandfather)\n\n    def _find_parent(self, value):\n        \"\"\" Finds a place for the value in our binary tree\"\"\"\n        def inner_find(parent):\n            \"\"\"\n            Return the appropriate parent node for our new node as well as the side it should be on\n            \"\"\"\n            if value \u003d\u003d parent.value:\n                return None, None\n            elif parent.value \u003c value:\n                if parent.right.color \u003d\u003d NIL:  # no more to go\n                    return parent, \u0027R\u0027\n                return inner_find(parent.right)\n            elif value \u003c parent.value:\n                if parent.left.color \u003d\u003d NIL:  # no more to go\n                    return parent, \u0027L\u0027\n                return inner_find(parent.left)\n\n        return inner_find(self.root)\n\n    def find_node(self, value):\n        def inner_find(root):\n            if root is None or root \u003d\u003d self.NIL_LEAF:\n                return None\n            if value \u003e root.value:\n                return inner_find(root.right)\n            elif value \u003c root.value:\n                return inner_find(root.left)\n            else:\n                return root\n\n        found_node \u003d inner_find(self.root)\n        return found_node\n\n    def _find_in_order_successor(self, node):\n        right_node \u003d node.right\n        left_node \u003d right_node.left\n        if left_node \u003d\u003d self.NIL_LEAF:\n            return right_node\n        while left_node.left !\u003d self.NIL_LEAF:\n            left_node \u003d left_node.left\n        return left_node\n\n    def _get_sibling(self, node):\n        \"\"\"\n        Returns the sibling of the node, as well as the side it is on\n        e.g\n\n            20 (A)\n           /     \\\n        15(B)    25(C)\n\n        _get_sibling(25(C)) \u003d\u003e 15(B), \u0027R\u0027\n        \"\"\"\n        parent \u003d node.parent\n        if node.value \u003e\u003d parent.value:\n            sibling \u003d parent.left\n            direction \u003d \u0027L\u0027\n        else:\n            sibling \u003d parent.right\n            direction \u003d \u0027R\u0027\n        return sibling, direction\n"
            },
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 487,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "tree \u003d Node()\n    depths \u003d [tree.insert(num) for num in li]\n    return depths",
                  "placeholder_text": "#Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self):\n        self.value \u003d None\n        self.children \u003d [None, None]\n\n    def is_nill(self):\n        return self.value is None\n\n    def insert(self, value):\n        if self.is_nill():\n            self.value \u003d value\n            self.children \u003d [Node(), Node()]\n            return 0\n        else:\n            dir_to_go \u003d 0 if value \u003c self.value else 1\n            depth \u003d self.children[dir_to_go].insert(value)\n            return depth + 1\n\ndef func(li):\n    #Complete the function\n\n"
            },
            "task_copy.py": {
              "name": "task_copy.py",
              "placeholders": [],
              "is_visible": false,
              "text": "from rb_tree import RedBlackTree\nfrom random import shuffle\n\nclass My_pair:\n    def __init__(self, key, value):\n        self.key \u003d key\n        self.value \u003d value\n\n    def increment_value(self):\n        self.value +\u003d 1\n\n    def __lt__(self, other):\n        return self.key \u003c other.key\n\n    def __le__(self, other):\n        return self.key \u003c\u003d other.key\n\n    def __gt__(self, other):\n        return self.key \u003e other.key\n\n    def __ge__(self, other):\n        return self.key \u003e\u003d other.key\n\n    def __eq__(self, other):\n        if self is None or other is None:\n            return self is None and other is None\n        return self.key \u003d\u003d other.key\n\n    def __ne__(self, other):\n        return not self \u003d\u003d other\n\ndef main():\n    n \u003d 10\n    li \u003d [i for i in range(n)]\n    shuffle(li)\n    print(li)\n    print(func(li))\n\ndef func(li):\n    tree \u003d RedBlackTree()\n    depths \u003d []\n    for num in li:\n        next_node \u003d tree.ceil(My_pair(num, None))\n        prev_node \u003d tree.floor(My_pair(num, None))\n        parent_depth \u003d -1\n        for node in (next_node, prev_node):\n            if node !\u003d None:\n                parent_depth \u003d max(parent_depth, node.value)\n        tree.add(My_pair(num, parent_depth + 1))\n        depths.append(parent_depth + 1)\n    return depths\n\n\n\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    main()\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom random import shuffle\nfrom random import randint\nfrom task import func as func\nfrom task_copy import func as func_judge\n\ndef test_generator(n):\n    li \u003d [i for i in range(n)]\n    shuffle(li)\n    return li\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_nums \u003d [10, 10, 100, 100, 10000]\n    for test_num in test_nums:\n        li \u003d test_generator(test_num)\n        user_li \u003d func(li[0:len(li)])\n        judge_li \u003d func_judge(li[0:len(li)])\n        if user_li !\u003d judge_li:\n            failed(\"Wrong Answer! Input: \" + str(li) +\n                   \"Your Answer: \" + str(user_li) +\n                   \"Expected Answer: \" + str(judge_li))\n    print(\"PASS\")\n\n\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه Balanced BSTs را مطالعه کنید.\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cmeta charset\u003d\"UTF-8\"\u003e\nیک درخت دودویی جست و جوی تهی داریم(درخت جست و جوی معمولی است و متوازن نیست). لیستی از اعداد متمایز\n\nبه ما داده شده است. می خواهیم بدانیم که اگر اعضای این لیست را یکی یکی در درخت درج کنیم، عمق هر عضو چقدر است. از آنجایی که یکی یکی درج کردن این اعضا در درخت، از نظر زمانی مقدور به صرفه نیست، برنامه ای بنویسید که بتواند عمق اعضا را حساب کند.\n\u003cbr\u003e\nتابع\n\u003cspan dir\u003d\"ltr\", align\u003d\"center\"\u003e\n  func(li)\n\u003c/span\u003e\n\u0026nbsp;\nرا پیاده سازی کنید که ورودی لیستی از اعداد است که قرار است به نوبت در درخت ما درج شوند و خروجی، عمق هر عضو هنگام درج است.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 5532,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "tree \u003d {}\n    ans \u003d []\n    for req in li:\n        if req[0] \u003d\u003d 1:\n            x, y \u003d req[1:3]\n            if x not in tree:\n                tree[x] \u003d 0\n            tree[x] +\u003d y\n        else:\n            x \u003d req[1]\n            sum_smaller_equal \u003d 0\n            for num in tree:\n                if num \u003c\u003d x:\n                    sum_smaller_equal +\u003d tree[num]\n            ans.append(sum_smaller_equal)\n    return ans",
                  "placeholder_text": "#Complete the function"
                }
              ],
              "is_visible": true,
              "text": "class Node:\n    def __init__(self, key\u003dNone, red\u003dFalse, parent\u003dNone, children\u003dNone):\n        self.key \u003d key\n        self.red \u003d red\n        self.parent \u003d parent\n        self.children \u003d children\n        self.num_nodes \u003d 0\n        self.sum_nodes \u003d 0\n\n    def refresh_features(self):\n        self.num_nodes \u003d 1 + sum([child.num_nodes for child in self.children])\n        self.sum_nodes \u003d self.key.value + sum([child.sum_nodes for child in self.children])\n\n    def get_direction(self):\n        return 0 if self \u003d\u003d self.parent.children[0] else 1\n\n    def get_brother(self):\n        return self.parent.children[1 - self.get_direction()]\n\n    def get_uncle(self):\n        return self.parent.get_brother()\n\n    def make_black(self):\n        self.red \u003d False\n\n    def make_red(self):\n        self.red \u003d True\n\n\nclass Tree:\n    def __init__(self):\n        self.dummy_parent \u003d Node(children\u003d[None])\n        self.dummy_parent.children[0] \u003d Node(parent\u003dself.dummy_parent)\n        self.nil \u003d self.root\n        self.nil.num_nodes \u003d 0\n        self.nil.sum_nodes \u003d 0\n\n    def insert(self, key):\n        node \u003d self.root\n        node_parent \u003d node.parent\n        direction \u003d 0\n        while node !\u003d self.nil:\n            node_parent \u003d node\n            direction \u003d 0 if key \u003c node.key else 1\n            node \u003d node.children[direction]\n        # create new node\n        node_parent.children[direction] \u003d Node(key, red\u003dTrue, parent\u003dnode_parent, children\u003d[self.nil] * 2)\n        # refresh features\n        node \u003d node_parent.children[direction]\n        while node !\u003d self.dummy_parent:\n            node.refresh_features()\n            node \u003d node.parent\n\n        self.cleanup_insert(node_parent.children[direction])\n\n    def cleanup_insert(self, node):\n        while node !\u003d self.root and node.parent.red:\n            uncle \u003d node.get_uncle()\n            if uncle.red:\n                uncle.make_black()\n                node.parent.make_black()\n                node.parent.parent.make_red()\n                node \u003d node.parent.parent\n                continue\n            # Save the value of grandparent because the rotation in the \"if\" staement below will mess up order of nodes\n            grand_parent \u003d node.parent.parent\n            direction \u003d node.get_direction()\n            if direction !\u003d node.parent.get_direction():\n                self.rotate(node.parent, 1 - direction)\n                direction \u003d 1 - direction\n            self.rotate(grand_parent, 1 - direction)\n            grand_parent.make_red()\n            grand_parent.parent.make_black()\n            # rotations should terminate loop\n            break\n        # Root should always be black\n        self.root.make_black()\n\n    def rotate(self, node, direction):\n        child \u003d node.children[1 - direction]\n        mid_child \u003d child.children[direction]\n        parent \u003d node.parent\n\n        parent.children[node.get_direction()] \u003d child\n        child.parent \u003d parent\n\n        child.children[direction] \u003d node\n        node.parent \u003d child\n\n        node.children[1 - direction] \u003d mid_child\n        mid_child.parent \u003d node\n\n        node.refresh_features()\n        child.refresh_features()\n\n    def in_order(self, node\u003dNone):\n        if node is None:\n            node \u003d self.root\n        if node \u003d\u003d self.nil:\n            return []\n        return self.in_order(node.children[0]) + [node] + self.in_order(node.children[1])\n\n    def rank(self, key):\n        node \u003d self.root\n        num_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            num_smaller_or_equal +\u003d node.children[0].num_nodes + 1\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return num_smaller_or_equal\n\n    def increase_value(self, key, amount):\n        node \u003d self.root\n        while node !\u003d self.nil:\n            if key \u003c node.key.key:\n                node \u003d node.children[0]\n            elif key \u003e node.key.key:\n                node \u003d node.children[1]\n            else:\n                break\n        if node \u003d\u003d self.nil:\n            self.insert(My_pair(key, amount))\n        else:\n            node.key.value +\u003d amount\n            while node !\u003d self.dummy_parent:\n                node.refresh_features()\n                node \u003d node.parent\n\n    def sum_range_zero(self, key):\n        node \u003d self.root\n        sum_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            sum_smaller_or_equal +\u003d node.sum_nodes - node.children[1].sum_nodes\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return sum_smaller_or_equal\n\n    @property\n    def root(self):\n        return self.dummy_parent.children[0]\n\n\nclass My_pair:\n    def __init__(self, key, value):\n        self.key \u003d key\n        self.value \u003d value\n\n    def increment_value(self):\n        self.value +\u003d 1\n\n    def __lt__(self, other):\n        return self.key \u003c other.key\n\n    def __le__(self, other):\n        return self.key \u003c\u003d other.key\n\n    def __gt__(self, other):\n        return self.key \u003e other.key\n\n    def __ge__(self, other):\n        return self.key \u003e\u003d other.key\n\n    def __eq__(self, other):\n        if self is None or other is None:\n            return self is None and other is None\n        return self.key \u003d\u003d other.key\n\n    def __ne__(self, other):\n        return not self \u003d\u003d other\n\n\ndef data_structure(li):\n    #Complete the function\n\n"
            },
            "task_copy.py": {
              "name": "task_copy.py",
              "placeholders": [],
              "is_visible": false,
              "text": "# TODO: type solution here\nclass Node:\n    def __init__(self, key\u003dNone, red\u003dFalse, parent\u003dNone, children\u003dNone):\n        self.key \u003d key\n        self.red \u003d red\n        self.parent \u003d parent\n        self.children \u003d children\n        self.num_nodes \u003d 0\n        self.sum_nodes \u003d 0\n\n    def refresh_features(self):\n        self.num_nodes \u003d 1 + sum([child.num_nodes for child in self.children])\n        self.sum_nodes \u003d self.key.value + sum([child.sum_nodes for child in self.children])\n\n    def get_direction(self):\n        return 0 if self \u003d\u003d self.parent.children[0] else 1\n\n    def get_brother(self):\n        return self.parent.children[1 - self.get_direction()]\n\n    def get_uncle(self):\n        return self.parent.get_brother()\n\n    def make_black(self):\n        self.red \u003d False\n\n    def make_red(self):\n        self.red \u003d True\n\n\nclass Tree:\n    def __init__(self):\n        self.dummy_parent \u003d Node(children\u003d[None])\n        self.dummy_parent.children[0] \u003d Node(parent\u003dself.dummy_parent)\n        self.nil \u003d self.root\n        self.nil.num_nodes \u003d 0\n        self.nil.sum_nodes \u003d 0\n\n    def insert(self, key):\n        node \u003d self.root\n        node_parent \u003d node.parent\n        direction \u003d 0\n        while node !\u003d self.nil:\n            node_parent \u003d node\n            direction \u003d 0 if key \u003c node.key else 1\n            node \u003d node.children[direction]\n        # create new node\n        node_parent.children[direction] \u003d Node(key, red\u003dTrue, parent\u003dnode_parent, children\u003d[self.nil] * 2)\n        # refresh features\n        node \u003d node_parent.children[direction]\n        while node !\u003d self.dummy_parent:\n            node.refresh_features()\n            node \u003d node.parent\n\n        self.cleanup_insert(node_parent.children[direction])\n\n    def cleanup_insert(self, node):\n        while node !\u003d self.root and node.parent.red:\n            uncle \u003d node.get_uncle()\n            if uncle.red:\n                uncle.make_black()\n                node.parent.make_black()\n                node.parent.parent.make_red()\n                node \u003d node.parent.parent\n                continue\n            # Save the value of grandparent because the rotation in the \"if\" staement below will mess up order of nodes\n            grand_parent \u003d node.parent.parent\n            direction \u003d node.get_direction()\n            if direction !\u003d node.parent.get_direction():\n                self.rotate(node.parent, 1 - direction)\n                direction \u003d 1 - direction\n            self.rotate(grand_parent, 1 - direction)\n            grand_parent.make_red()\n            grand_parent.parent.make_black()\n            # rotations should terminate loop\n            break\n        # Root should always be black\n        self.root.make_black()\n\n    def rotate(self, node, direction):\n        child \u003d node.children[1 - direction]\n        mid_child \u003d child.children[direction]\n        parent \u003d node.parent\n\n        parent.children[node.get_direction()] \u003d child\n        child.parent \u003d parent\n\n        child.children[direction] \u003d node\n        node.parent \u003d child\n\n        node.children[1 - direction] \u003d mid_child\n        mid_child.parent \u003d node\n\n        node.refresh_features()\n        child.refresh_features()\n\n    def in_order(self, node\u003dNone):\n        if node is None:\n            node \u003d self.root\n        if node \u003d\u003d self.nil:\n            return []\n        return self.in_order(node.children[0]) + [node] + self.in_order(node.children[1])\n\n    def rank(self, key):\n        node \u003d self.root\n        num_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            num_smaller_or_equal +\u003d node.children[0].num_nodes + 1\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return num_smaller_or_equal\n\n    def increase_value(self, key, amount):\n        node \u003d self.root\n        while node !\u003d self.nil:\n            if key \u003c node.key.key:\n                node \u003d node.children[0]\n            elif key \u003e node.key.key:\n                node \u003d node.children[1]\n            else:\n                break\n        if node \u003d\u003d self.nil:\n            self.insert(My_pair(key, amount))\n        else:\n            node.key.value +\u003d amount\n            while node !\u003d self.dummy_parent:\n                node.refresh_features()\n                node \u003d node.parent\n\n    def sum_range_zero(self, key):\n        node \u003d self.root\n        sum_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            sum_smaller_or_equal +\u003d node.sum_nodes - node.children[1].sum_nodes\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return sum_smaller_or_equal\n\n    @property\n    def root(self):\n        return self.dummy_parent.children[0]\n\n\nclass My_pair:\n    def __init__(self, key, value):\n        self.key \u003d key\n        self.value \u003d value\n\n    def increment_value(self):\n        self.value +\u003d 1\n\n    def __lt__(self, other):\n        return self.key \u003c other.key\n\n    def __le__(self, other):\n        return self.key \u003c\u003d other.key\n\n    def __gt__(self, other):\n        return self.key \u003e other.key\n\n    def __ge__(self, other):\n        return self.key \u003e\u003d other.key\n\n    def __eq__(self, other):\n        if self is None or other is None:\n            return self is None and other is None\n        return self.key \u003d\u003d other.key\n\n    def __ne__(self, other):\n        return not self \u003d\u003d other\n\n\ndef data_structure(li):\n    x \u003d Tree()\n    output \u003d []\n    for cmd in li:\n        if cmd[0] \u003d\u003d 1:\n            num \u003d int(cmd[1])\n            amount \u003d int(cmd[2])\n            x.increase_value(num, amount)\n        else:\n            num \u003d int(cmd[1])\n            output.append(x.sum_range_zero(My_pair(num, None)))\n    return output\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom random import shuffle\nfrom random import randint\nfrom task import data_structure as func\nfrom task_copy import data_structure as func_judge\n\n\ndef test_generator(n):\n    li \u003d []\n    for i in range(n):\n        kind \u003d randint(1, 2)\n        max_range \u003d 10000\n        if kind \u003d\u003d 1:\n            li.append((1, randint(1, max_range), randint(1, max_range)))\n        else:\n            li.append((2, randint(1, max_range)))\n    return li\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_nums \u003d [10, 10, 100, 100, 10000]\n    for test_num in test_nums:\n        li \u003d test_generator(test_num)\n        user_li \u003d func(li[0:len(li)])\n        judge_li \u003d func_judge(li[0:len(li)])\n        if user_li !\u003d judge_li:\n            failed(\"Wrong Answer! Input: \" + str(li) +\n                   \"Your Answer: \" + str(user_li) +\n                   \"Expected Answer: \" + str(judge_li))\n    print(\"PASS\")\n\n\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cmeta charset\u003d\"UTF-8\"\u003e\n\u003cbr\u003e\n\n  فرض کنید که به تمامی اعداد طبیعی، ارزش ۰ را نسبت داده ایم. داده ساختاری پیاده سازی کنید که قابلیت انجام\n  کار های زیر را داشته باشد.\n  \u003cbr\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      ارزش نقطه x را y واحد افزایش دهد\n    \u003c/li\u003e\n    \u003cli\u003e\n      مجموع ارزش های نقاطی که از x کمتر مساوی هستند را خروجی دهد\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  برای این کار\n  باید تابع\n\u003cspan dir\u003d\"ltr\"\u003e\ndata_structure(li)\n\u003c/span\u003e\n\u0026nbsp;\n\n  را  پیاده سازی کنید.\n   ورودی یک لیست از درخواست ها و هر درخواست خود یک توپل است که اگر عضو اول آن ۱ باشد، درخواست از نوع اول بوده و ۲ عضو بعدی\n  توپل مقادیر\n  x و y است.\n  اگر هم عضو اول آن ۲ بود، مقدار بعدی x است. خروجی باید یک لیست از جواب ها باشد\n(یعنی هر عضو آن خروجی متناظر با یکی از درخواست های نوع دوم است)\n.\nاعداد در محدوده int هستند.\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 3835,
                  "length": 22,
                  "hints": [],
                  "possible_answer": "ans \u003d 0\n    n \u003d len(li)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if li[i] \u003e 2 * li[j]:\n                ans +\u003d 1\n    return ans",
                  "placeholder_text": "#Complete the function"
                }
              ],
              "is_visible": true,
              "text": "from random import shuffle\nclass Node:\n    def __init__(self, key\u003dNone, red\u003dFalse, parent\u003dNone, children\u003dNone):\n        self.key \u003d key\n        self.red \u003d red\n        self.parent \u003d parent\n        self.children \u003d children\n\n    def refresh_features(self):\n        self.num_nodes \u003d 1 + sum([child.num_nodes for child in self.children])\n        self.sum_nodes \u003d self.key + sum([child.sum_nodes for child in self.children])\n\n    def get_direction(self):\n        return 0 if self \u003d\u003d self.parent.children[0] else 1\n\n    def get_brother(self):\n        return self.parent.children[1 - self.get_direction()]\n\n    def get_uncle(self):\n        return self.parent.get_brother()\n\n    def make_black(self):\n        self.red \u003d False\n\n    def make_red(self):\n        self.red \u003d True\n\nclass Tree:\n    def __init__(self):\n        self.dummy_parent \u003d Node(children\u003d[None])\n        self.dummy_parent.children[0] \u003d Node(parent\u003dself.dummy_parent)\n        self.nil \u003d self.root\n        self.nil.num_nodes \u003d 0\n        self.nil.sum_nodes \u003d 0\n\n    def insert(self, key):\n        node \u003d self.root\n        node_parent \u003d node.parent\n        direction \u003d 0\n        while node !\u003d self.nil:\n            node_parent \u003d node\n            direction \u003d 0 if key \u003c node.key else 1\n            node \u003d node.children[direction]\n        #create new node\n        node_parent.children[direction] \u003d Node(key, red\u003dTrue, parent\u003dnode_parent, children\u003d[self.nil] * 2)\n        #refresh features\n        node \u003d node_parent.children[direction]\n        while node !\u003d self.root:\n            node.refresh_features()\n            node \u003d node.parent\n\n        self.cleanup_insert(node_parent.children[direction])\n\n    def cleanup_insert(self, node):\n        while node !\u003d self.root and node.parent.red:\n            uncle \u003d node.get_uncle()\n            if uncle.red:\n                uncle.make_black()\n                node.parent.make_black()\n                node.parent.parent.make_red()\n                node \u003d node.parent.parent\n                continue\n            #Save the value of grandparent because the rotation in the \"if\" staement below will mess up order of nodes\n            grand_parent \u003d node.parent.parent\n            direction \u003d node.get_direction()\n            if direction !\u003d node.parent.get_direction():\n                self.rotate(node.parent, 1 - direction)\n                direction \u003d 1 - direction\n            self.rotate(grand_parent, 1 - direction)\n            grand_parent.make_red()\n            grand_parent.parent.make_black()\n            #rotations should terminate loop\n            break\n        #Root should always be black\n        self.root.make_black()\n\n    def rotate(self, node, direction):\n        child \u003d node.children[1 - direction]\n        midchild \u003d child.children[direction]\n        parent \u003d node.parent\n\n        parent.children[node.get_direction()] \u003d child\n        child.parent \u003d parent\n\n        child.children[direction] \u003d node\n        node.parent \u003d child\n\n        node.children[1 - direction] \u003d midchild\n        midchild.parent \u003d node\n\n        node.refresh_features()\n        child.refresh_features()\n\n    def in_order(self, node\u003dNone):\n        if (node\u003d\u003dNone):\n            node \u003d self.root\n        if node\u003d\u003dself.nil:\n            return []\n        return self.in_order(node.children[0]) + [node] + self.in_order(node.children[1])\n\n    def rank(self, key):\n        node \u003d self.root\n        num_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            num_smaller_or_equal +\u003d node.children[0].num_nodes + 1\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return num_smaller_or_equal\n\n\n    @property\n    def root(self):\n        return self.dummy_parent.children[0]\n\ndef func(li):\n    #Complete the function\n\n\n\n"
            },
            "task_copy.py": {
              "name": "task_copy.py",
              "placeholders": [],
              "is_visible": false,
              "text": "# TODO: type solution here\nfrom random import shuffle\nclass Node:\n    def __init__(self, key\u003dNone, red\u003dFalse, parent\u003dNone, children\u003dNone):\n        self.key \u003d key\n        self.red \u003d red\n        self.parent \u003d parent\n        self.children \u003d children\n\n    def refresh_features(self):\n        self.num_nodes \u003d 1 + sum([child.num_nodes for child in self.children])\n        self.sum_nodes \u003d self.key + sum([child.sum_nodes for child in self.children])\n\n    def get_direction(self):\n        return 0 if self \u003d\u003d self.parent.children[0] else 1\n\n    def get_brother(self):\n        return self.parent.children[1 - self.get_direction()]\n\n    def get_uncle(self):\n        return self.parent.get_brother()\n\n    def make_black(self):\n        self.red \u003d False\n\n    def make_red(self):\n        self.red \u003d True\n\nclass Tree:\n    def __init__(self):\n        self.dummy_parent \u003d Node(children\u003d[None])\n        self.dummy_parent.children[0] \u003d Node(parent\u003dself.dummy_parent)\n        self.nil \u003d self.root\n        self.nil.num_nodes \u003d 0\n        self.nil.sum_nodes \u003d 0\n\n    def insert(self, key):\n        node \u003d self.root\n        node_parent \u003d node.parent\n        direction \u003d 0\n        while node !\u003d self.nil:\n            node_parent \u003d node\n            direction \u003d 0 if key \u003c node.key else 1\n            node \u003d node.children[direction]\n        #create new node\n        node_parent.children[direction] \u003d Node(key, red\u003dTrue, parent\u003dnode_parent, children\u003d[self.nil] * 2)\n        #refresh features\n        node \u003d node_parent.children[direction]\n        while node !\u003d self.root:\n            node.refresh_features()\n            node \u003d node.parent\n\n        self.cleanup_insert(node_parent.children[direction])\n\n    def cleanup_insert(self, node):\n        while node !\u003d self.root and node.parent.red:\n            uncle \u003d node.get_uncle()\n            if uncle.red:\n                uncle.make_black()\n                node.parent.make_black()\n                node.parent.parent.make_red()\n                node \u003d node.parent.parent\n                continue\n            #Save the value of grandparent because the rotation in the \"if\" staement below will mess up order of nodes\n            grand_parent \u003d node.parent.parent\n            direction \u003d node.get_direction()\n            if direction !\u003d node.parent.get_direction():\n                self.rotate(node.parent, 1 - direction)\n                direction \u003d 1 - direction\n            self.rotate(grand_parent, 1 - direction)\n            grand_parent.make_red()\n            grand_parent.parent.make_black()\n            #rotations should terminate loop\n            break\n        #Root should always be black\n        self.root.make_black()\n\n    def rotate(self, node, direction):\n        child \u003d node.children[1 - direction]\n        midchild \u003d child.children[direction]\n        parent \u003d node.parent\n\n        parent.children[node.get_direction()] \u003d child\n        child.parent \u003d parent\n\n        child.children[direction] \u003d node\n        node.parent \u003d child\n\n        node.children[1 - direction] \u003d midchild\n        midchild.parent \u003d node\n\n        node.refresh_features()\n        child.refresh_features()\n\n    def in_order(self, node\u003dNone):\n        if (node\u003d\u003dNone):\n            node \u003d self.root\n        if node\u003d\u003dself.nil:\n            return []\n        return self.in_order(node.children[0]) + [node] + self.in_order(node.children[1])\n\n    def rank(self, key):\n        node \u003d self.root\n        num_smaller_or_equal \u003d 0\n        while node !\u003d self.nil:\n            if key \u003c node.key:\n                node \u003d node.children[0]\n                continue\n            num_smaller_or_equal +\u003d node.children[0].num_nodes + 1\n            if key \u003e node.key:\n                node \u003d node.children[1]\n            else:\n                break\n        return num_smaller_or_equal\n\n\n    @property\n    def root(self):\n        return self.dummy_parent.children[0]\n\ndef func(li):\n    total \u003d 0\n    x \u003d Tree()\n    for i in range(len(li)):\n        total +\u003d i - x.rank(2 * li[i])\n        x.insert(li[i])\n    return total\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom random import shuffle\nfrom random import randint\nfrom task import func as func\nfrom task_copy import func as func_judge\n\ndef test_generator(n):\n    li \u003d [i for i in range(n)]\n    shuffle(li)\n    return li\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_nums \u003d [10, 10, 100, 100, 10000]\n    for test_num in test_nums:\n        li \u003d test_generator(test_num)\n        user_li \u003d func(li[0:len(li)])\n        judge_li \u003d func_judge(li[0:len(li)])\n        if user_li !\u003d judge_li:\n            failed(\"Wrong Answer! Input: \" + str(li) +\n                   \"Your Answer: \" + str(user_li) +\n                   \"Expected Answer: \" + str(judge_li))\n    print(\"PASS\")\n\n\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cmeta charset\u003d\"UTF-8\"\u003e\nبرنامه ای بنویسید که یک لیست از اعداد متمایز را ورودی بگیرد و\nتعداد جفت هایی که خاصیت زیر را دارند، خروجی دهد.\n\u003cbr\u003e\n\u003cdiv align\u003d\"center\" dir\u003d\"ltr\"\u003e\n  i \u003c j, a[i] \u003e 2 * a[j]\n\u003c/div\u003e\n\u003cbr\u003e\nبرای این کار باید تابع\n\u003cspan dir\u003d\"ltr\"\u003e\nfunc(li)\n\u003c/span\u003e\n\u0026nbsp;\nرا پیاده سازی کنید که ورودی آن لیست اعداد و خروجی آن تعداد جفت های مورد نظر است\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q4",
          "stepic_id": 0,
          "task_files": {
            "img.png": {
              "name": "img.png",
              "placeholders": [],
              "is_visible": false,
              "text": "\u003d"
            },
            "rb_tree.py": {
              "name": "rb_tree.py",
              "placeholders": [],
              "is_visible": true,
              "text": "\"\"\"\nA classic (not left-leaning) Red-Black Tree implementation, supporting addition and deletion.\n\"\"\"\n\n# The possible Node colors\nBLACK \u003d \u0027BLACK\u0027\nRED \u003d \u0027RED\u0027\nNIL \u003d \u0027NIL\u0027\n\n\nclass Node:\n    def __init__(self, value, color, parent, left\u003dNone, right\u003dNone):\n        self.value \u003d value\n        self.color \u003d color\n        self.parent \u003d parent\n        self.left \u003d left\n        self.right \u003d right\n\n    def __repr__(self):\n        return \u0027{color} {val} Node\u0027.format(color\u003dself.color, val\u003dself.value)\n\n    def __iter__(self):\n        if self.left.color !\u003d NIL:\n            yield from self.left.__iter__()\n\n        yield self.value\n\n        if self.right.color !\u003d NIL:\n            yield from self.right.__iter__()\n\n    def __eq__(self, other):\n        if self.color \u003d\u003d NIL and self.color \u003d\u003d other.color:\n            return True\n\n        if self.parent is None or other.parent is None:\n            parents_are_same \u003d self.parent is None and other.parent is None\n        else:\n            parents_are_same \u003d self.parent.value \u003d\u003d other.parent.value and self.parent.color \u003d\u003d other.parent.color\n        return self.value \u003d\u003d other.value and self.color \u003d\u003d other.color and parents_are_same\n\n    def has_children(self) -\u003e bool:\n        \"\"\" Returns a boolean indicating if the node has children \"\"\"\n        return bool(self.get_children_count())\n\n    def get_children_count(self) -\u003e int:\n        \"\"\" Returns the number of NOT NIL children the node has \"\"\"\n        if self.color \u003d\u003d NIL:\n            return 0\n        return sum([int(self.left.color !\u003d NIL), int(self.right.color !\u003d NIL)])\n\n\nclass RedBlackTree:\n    # every node has null nodes as children initially, create one such object for easy management\n    NIL_LEAF \u003d Node(value\u003dNone, color\u003dNIL, parent\u003dNone)\n\n    def __init__(self):\n        self.count \u003d 0\n        self.root \u003d None\n        self.ROTATIONS \u003d {\n            # Used for deletion and uses the sibling\u0027s relationship with his parent as a guide to the rotation\n            \u0027L\u0027: self._right_rotation,\n            \u0027R\u0027: self._left_rotation\n        }\n\n    def __iter__(self):\n        if not self.root:\n            return list()\n        yield from self.root.__iter__()\n\n    def add(self, value):\n        if not self.root:\n            self.root \u003d Node(value, color\u003dBLACK, parent\u003dNone, left\u003dself.NIL_LEAF, right\u003dself.NIL_LEAF)\n            self.count +\u003d 1\n            return\n        parent, node_dir \u003d self._find_parent(value)\n        if node_dir is None:\n            return  # value is in the tree\n        new_node \u003d Node(value\u003dvalue, color\u003dRED, parent\u003dparent, left\u003dself.NIL_LEAF, right\u003dself.NIL_LEAF)\n        if node_dir \u003d\u003d \u0027L\u0027:\n            parent.left \u003d new_node\n        else:\n            parent.right \u003d new_node\n\n        self._try_rebalance(new_node)\n        self.count +\u003d 1\n\n    def remove(self, value):\n        \"\"\"\n        Try to get a node with 0 or 1 children.\n        Either the node we\u0027re given has 0 or 1 children or we get its successor.\n        \"\"\"\n        node_to_remove \u003d self.find_node(value)\n        if node_to_remove is None:  # node is not in the tree\n            return\n        if node_to_remove.get_children_count() \u003d\u003d 2:\n            # find the in-order successor and replace its value.\n            # then, remove the successor\n            successor \u003d self._find_in_order_successor(node_to_remove)\n            node_to_remove.value \u003d successor.value  # switch the value\n            node_to_remove \u003d successor\n\n        # has 0 or 1 children!\n        self._remove(node_to_remove)\n        self.count -\u003d 1\n\n    def contains(self, value) -\u003e bool:\n        \"\"\" Returns a boolean indicating if the given value is present in the tree \"\"\"\n        return bool(self.find_node(value))\n\n    def ceil(self, value) -\u003e int or None:\n        \"\"\"\n        Given a value, return the closest value that is equal or bigger than it,\n        returning None when no such exists\n        \"\"\"\n        if self.root is None: return None\n        last_found_val \u003d None if self.root.value \u003c value else self.root.value\n\n        def find_ceil(node):\n            nonlocal last_found_val\n            if node \u003d\u003d self.NIL_LEAF:\n                return None\n            if node.value \u003d\u003d value:\n                last_found_val \u003d node.value\n                return node.value\n            elif node.value \u003c value:\n                # go right\n                return find_ceil(node.right)\n            else:\n                # this node is bigger, save its value and go left\n                last_found_val \u003d node.value\n\n                return find_ceil(node.left)\n        find_ceil(self.root)\n        return last_found_val\n\n    def floor(self, value) -\u003e int or None:\n        \"\"\"\n        Given a value, return the closest value that is equal or less than it,\n        returning None when no such exists\n        \"\"\"\n        if self.root is None: return None\n        last_found_val \u003d None if self.root.value \u003e value else self.root.value\n\n        def find_floor(node):\n            nonlocal last_found_val\n            if node \u003d\u003d self.NIL_LEAF:\n                return None\n            if node.value \u003d\u003d value:\n                last_found_val \u003d node.value\n                return node.value\n            elif node.value \u003c value:\n                # this node is smaller, save its value and go right, trying to find a cloer one\n                last_found_val \u003d node.value\n\n                return find_floor(node.right)\n            else:\n                return find_floor(node.left)\n\n        find_floor(self.root)\n        return last_found_val\n\n    def _remove(self, node):\n        \"\"\"\n        Receives a node with 0 or 1 children (typically some sort of successor)\n        and removes it according to its color/children\n        :param node: Node with 0 or 1 children\n        \"\"\"\n        left_child \u003d node.left\n        right_child \u003d node.right\n        not_nil_child \u003d left_child if left_child !\u003d self.NIL_LEAF else right_child\n        if node \u003d\u003d self.root:\n            if not_nil_child !\u003d self.NIL_LEAF:\n                # if we\u0027re removing the root and it has one valid child, simply make that child the root\n                self.root \u003d not_nil_child\n                self.root.parent \u003d None\n                self.root.color \u003d BLACK\n            else:\n                self.root \u003d None\n        elif node.color \u003d\u003d RED:\n            if not node.has_children():\n                # Red node with no children, the simplest remove\n                self._remove_leaf(node)\n            else:\n                \"\"\"\n                Since the node is red he cannot have a child.\n                If he had a child, it\u0027d need to be black, but that would mean that\n                the black height would be bigger on the one side and that would make our tree invalid\n                \"\"\"\n                raise Exception(\u0027Unexpected behavior\u0027)\n        else:  # node is black!\n            if right_child.has_children() or left_child.has_children():  # sanity check\n                raise Exception(\u0027The red child of a black node with 0 or 1 children\u0027\n                                \u0027 cannot have children, otherwise the black height of the tree becomes invalid! \u0027)\n            if not_nil_child.color \u003d\u003d RED:\n                \"\"\"\n                Swap the values with the red child and remove it  (basically un-link it)\n                Since we\u0027re a node with one child only, we can be sure that there are no nodes below the red child.\n                \"\"\"\n                node.value \u003d not_nil_child.value\n                node.left \u003d not_nil_child.left\n                node.right \u003d not_nil_child.right\n            else:  # BLACK child\n                # 6 cases :o\n                self._remove_black_node(node)\n\n    def _remove_leaf(self, leaf):\n        \"\"\" Simply removes a leaf node by making it\u0027s parent point to a NIL LEAF\"\"\"\n        if leaf.value \u003e\u003d leaf.parent.value:\n            # in those weird cases where they\u0027re equal due to the successor swap\n            leaf.parent.right \u003d self.NIL_LEAF\n        else:\n            leaf.parent.left \u003d self.NIL_LEAF\n\n    def _remove_black_node(self, node):\n        \"\"\"\n        Loop through each case recursively until we reach a terminating case.\n        What we\u0027re left with is a leaf node which is ready to be deleted without consequences\n        \"\"\"\n        self.__case_1(node)\n        self._remove_leaf(node)\n\n    def __case_1(self, node):\n        \"\"\"\n        Case 1 is when there\u0027s a double black node on the root\n        Because we\u0027re at the root, we can simply remove it\n        and reduce the black height of the whole tree.\n\n            __|10B|__                  __10B__\n           /         \\      \u003d\u003d\u003e       /       \\\n          9B         20B            9B        20B\n        \"\"\"\n        if self.root \u003d\u003d node:\n            node.color \u003d BLACK\n            return\n        self.__case_2(node)\n\n    def __case_2(self, node):\n        \"\"\"\n        Case 2 applies when\n            the parent is BLACK\n            the sibling is RED\n            the sibling\u0027s children are BLACK or NIL\n        It takes the sibling and rotates it\n\n                         40B                                              60B\n                        /   \\       --CASE 2 ROTATE--\u003e                   /   \\\n                    |20B|   60R       LEFT ROTATE                      40R   80B\n    DBL BLACK IS 20----^   /   \\      SIBLING 60R                     /   \\\n                         50B    80B                                |20B|  50B\n            (if the sibling\u0027s direction was left of it\u0027s parent, we would RIGHT ROTATE it)\n        Now the original node\u0027s parent is RED\n        and we can apply case 4 or case 6\n        \"\"\"\n        parent \u003d node.parent\n        sibling, direction \u003d self._get_sibling(node)\n        if sibling.color \u003d\u003d RED and parent.color \u003d\u003d BLACK and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED:\n            self.ROTATIONS[direction](node\u003dNone, parent\u003dsibling, grandfather\u003dparent)\n            parent.color \u003d RED\n            sibling.color \u003d BLACK\n            return self.__case_1(node)\n        self.__case_3(node)\n\n    def __case_3(self, node):\n        \"\"\"\n        Case 3 deletion is when:\n            the parent is BLACK\n            the sibling is BLACK\n            the sibling\u0027s children are BLACK\n        Then, we make the sibling red and\n        pass the double black node upwards\n\n                            Parent is black\n               ___50B___    Sibling is black                       ___50B___\n              /         \\   Sibling\u0027s children are black          /         \\\n           30B          80B        CASE 3                       30B        |80B|  Continue with other cases\n          /   \\        /   \\        \u003d\u003d\u003e                        /  \\        /   \\\n        20B   35R    70B   |90B|\u003c---REMOVE                   20B  35R     70R   X\n              /  \\                                               /   \\\n            34B   37B                                          34B   37B\n        \"\"\"\n        parent \u003d node.parent\n        sibling, _ \u003d self._get_sibling(node)\n        if (sibling.color \u003d\u003d BLACK and parent.color \u003d\u003d BLACK\n           and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED):\n            # color the sibling red and forward the double black node upwards\n            # (call the cases again for the parent)\n            sibling.color \u003d RED\n            return self.__case_1(parent)  # start again\n\n        self.__case_4(node)\n\n    def __case_4(self, node):\n        \"\"\"\n        If the parent is red and the sibling is black with no red children,\n        simply swap their colors\n        DB-Double Black\n                __10R__                   __10B__        The black height of the left subtree has been incremented\n               /       \\                 /       \\       And the one below stays the same\n             DB        15B      \u003d\u003d\u003d\u003e    X        15R     No consequences, we\u0027re done!\n                      /   \\                     /   \\\n                    12B   17B                 12B   17B\n        \"\"\"\n        parent \u003d node.parent\n        if parent.color \u003d\u003d RED:\n            sibling, direction \u003d self._get_sibling(node)\n            if sibling.color \u003d\u003d BLACK and sibling.left.color !\u003d RED and sibling.right.color !\u003d RED:\n                parent.color, sibling.color \u003d sibling.color, parent.color  # switch colors\n                return  # Terminating\n        self.__case_5(node)\n\n    def __case_5(self, node):\n        \"\"\"\n        Case 5 is a rotation that changes the circumstances so that we can do a case 6\n        If the closer node is red and the outer BLACK or NIL, we do a left/right rotation, depending on the orientation\n        This will showcase when the CLOSER NODE\u0027s direction is RIGHT\n\n              ___50B___                                                    __50B__\n             /         \\                                                  /       \\\n           30B        |80B|  \u003c-- Double black                           35B      |80B|        Case 6 is now\n          /  \\        /   \\      Closer node is red (35R)              /   \\      /           applicable here,\n        20B  35R     70R   X     Outer is black (20B)               30R    37B  70R           so we redirect the node\n            /   \\                So we do a LEFT ROTATION          /   \\                      to it :)\n          34B  37B               on 35R (closer node)           20B   34B\n        \"\"\"\n        sibling, direction \u003d self._get_sibling(node)\n        closer_node \u003d sibling.right if direction \u003d\u003d \u0027L\u0027 else sibling.left\n        outer_node \u003d sibling.left if direction \u003d\u003d \u0027L\u0027 else sibling.right\n        if closer_node.color \u003d\u003d RED and outer_node.color !\u003d RED and sibling.color \u003d\u003d BLACK:\n            if direction \u003d\u003d \u0027L\u0027:\n                self._left_rotation(node\u003dNone, parent\u003dcloser_node, grandfather\u003dsibling)\n            else:\n                self._right_rotation(node\u003dNone, parent\u003dcloser_node, grandfather\u003dsibling)\n            closer_node.color \u003d BLACK\n            sibling.color \u003d RED\n\n        self.__case_6(node)\n\n    def __case_6(self, node):\n        \"\"\"\n        Case 6 requires\n            SIBLING to be BLACK\n            OUTER NODE to be RED\n        Then, does a right/left rotation on the sibling\n        This will showcase when the SIBLING\u0027s direction is LEFT\n\n                            Double Black\n                    __50B__       |                               __35B__\n                   /       \\      |                              /       \\\n      SIBLING--\u003e 35B      |80B| \u003c-                             30R       50R\n                /   \\      /                                  /   \\     /   \\\n             30R    37B  70R   Outer node is RED            20B   34B 37B    80B\n            /   \\              Closer node doesn\u0027t                           /\n         20B   34B                 matter                                   70R\n                               Parent doesn\u0027t\n                                   matter\n                               So we do a right rotation on 35B!\n        \"\"\"\n        sibling, direction \u003d self._get_sibling(node)\n        outer_node \u003d sibling.left if direction \u003d\u003d \u0027L\u0027 else sibling.right\n\n        def __case_6_rotation(direction):\n            parent_color \u003d sibling.parent.color\n            self.ROTATIONS[direction](node\u003dNone, parent\u003dsibling, grandfather\u003dsibling.parent)\n            # new parent is sibling\n            sibling.color \u003d parent_color\n            sibling.right.color \u003d BLACK\n            sibling.left.color \u003d BLACK\n\n        if sibling.color \u003d\u003d BLACK and outer_node.color \u003d\u003d RED:\n            return __case_6_rotation(direction)  # terminating\n\n        raise Exception(\u0027We should have ended here, something is wrong\u0027)\n\n    def _try_rebalance(self, node):\n        \"\"\"\n        Given a red child node, determine if there is a need to rebalance (if the parent is red)\n        If there is, rebalance it\n        \"\"\"\n        parent \u003d node.parent\n        value \u003d node.value\n        if (parent is None  # what the fuck? (should not happen)\n           or parent.parent is None  # parent is the root\n           or (node.color !\u003d RED or parent.color !\u003d RED)):  # no need to rebalance\n            return\n        grandfather \u003d parent.parent\n        node_dir \u003d \u0027L\u0027 if parent.value \u003e value else \u0027R\u0027\n        parent_dir \u003d \u0027L\u0027 if grandfather.value \u003e parent.value else \u0027R\u0027\n        uncle \u003d grandfather.right if parent_dir \u003d\u003d \u0027L\u0027 else grandfather.left\n        general_direction \u003d node_dir + parent_dir\n\n        if uncle \u003d\u003d self.NIL_LEAF or uncle.color \u003d\u003d BLACK:\n            # rotate\n            if general_direction \u003d\u003d \u0027LL\u0027:\n                self._right_rotation(node, parent, grandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027RR\u0027:\n                self._left_rotation(node, parent, grandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027LR\u0027:\n                self._right_rotation(node\u003dNone, parent\u003dnode, grandfather\u003dparent)\n                # due to the prev rotation, our node is now the parent\n                self._left_rotation(node\u003dparent, parent\u003dnode, grandfather\u003dgrandfather, to_recolor\u003dTrue)\n            elif general_direction \u003d\u003d \u0027RL\u0027:\n                self._left_rotation(node\u003dNone, parent\u003dnode, grandfather\u003dparent)\n                # due to the prev rotation, our node is now the parent\n                self._right_rotation(node\u003dparent, parent\u003dnode, grandfather\u003dgrandfather, to_recolor\u003dTrue)\n            else:\n                raise Exception(\"{} is not a valid direction!\".format(general_direction))\n        else:  # uncle is RED\n            self._recolor(grandfather)\n\n    def __update_parent(self, node, parent_old_child, new_parent):\n        \"\"\"\n        Our node \u0027switches\u0027 places with the old child\n        Assigns a new parent to the node.\n        If the new_parent is None, this means that our node becomes the root of the tree\n        \"\"\"\n        node.parent \u003d new_parent\n        if new_parent:\n            # Determine the old child\u0027s position in order to put node there\n            if new_parent.value \u003e parent_old_child.value:\n                new_parent.left \u003d node\n            else:\n                new_parent.right \u003d node\n        else:\n            self.root \u003d node\n\n    def _right_rotation(self, node, parent, grandfather, to_recolor\u003dFalse):\n        grand_grandfather \u003d grandfather.parent\n        self.__update_parent(node\u003dparent, parent_old_child\u003dgrandfather, new_parent\u003dgrand_grandfather)\n\n        old_right \u003d parent.right\n        parent.right \u003d grandfather\n        grandfather.parent \u003d parent\n\n        grandfather.left \u003d old_right  # save the old right values\n        old_right.parent \u003d grandfather\n\n        if to_recolor:\n            parent.color \u003d BLACK\n            node.color \u003d RED\n            grandfather.color \u003d RED\n\n    def _left_rotation(self, node, parent, grandfather, to_recolor\u003dFalse):\n        grand_grandfather \u003d grandfather.parent\n        self.__update_parent(node\u003dparent, parent_old_child\u003dgrandfather, new_parent\u003dgrand_grandfather)\n\n        old_left \u003d parent.left\n        parent.left \u003d grandfather\n        grandfather.parent \u003d parent\n\n        grandfather.right \u003d old_left  # save the old left values\n        old_left.parent \u003d grandfather\n\n        if to_recolor:\n            parent.color \u003d BLACK\n            node.color \u003d RED\n            grandfather.color \u003d RED\n\n    def _recolor(self, grandfather):\n        grandfather.right.color \u003d BLACK\n        grandfather.left.color \u003d BLACK\n        if grandfather !\u003d self.root:\n            grandfather.color \u003d RED\n        self._try_rebalance(grandfather)\n\n    def _find_parent(self, value):\n        \"\"\" Finds a place for the value in our binary tree\"\"\"\n        def inner_find(parent):\n            \"\"\"\n            Return the appropriate parent node for our new node as well as the side it should be on\n            \"\"\"\n            if value \u003d\u003d parent.value:\n                return None, None\n            elif parent.value \u003c value:\n                if parent.right.color \u003d\u003d NIL:  # no more to go\n                    return parent, \u0027R\u0027\n                return inner_find(parent.right)\n            elif value \u003c parent.value:\n                if parent.left.color \u003d\u003d NIL:  # no more to go\n                    return parent, \u0027L\u0027\n                return inner_find(parent.left)\n\n        return inner_find(self.root)\n\n    def find_node(self, value):\n        def inner_find(root):\n            if root is None or root \u003d\u003d self.NIL_LEAF:\n                return None\n            if value \u003e root.value:\n                return inner_find(root.right)\n            elif value \u003c root.value:\n                return inner_find(root.left)\n            else:\n                return root\n\n        found_node \u003d inner_find(self.root)\n        return found_node\n\n    def _find_in_order_successor(self, node):\n        right_node \u003d node.right\n        left_node \u003d right_node.left\n        if left_node \u003d\u003d self.NIL_LEAF:\n            return right_node\n        while left_node.left !\u003d self.NIL_LEAF:\n            left_node \u003d left_node.left\n        return left_node\n\n    def _get_sibling(self, node):\n        \"\"\"\n        Returns the sibling of the node, as well as the side it is on\n        e.g\n\n            20 (A)\n           /     \\\n        15(B)    25(C)\n\n        _get_sibling(25(C)) \u003d\u003e 15(B), \u0027R\u0027\n        \"\"\"\n        parent \u003d node.parent\n        if node.value \u003e\u003d parent.value:\n            sibling \u003d parent.left\n            direction \u003d \u0027L\u0027\n        else:\n            sibling \u003d parent.right\n            direction \u003d \u0027R\u0027\n        return sibling, direction\n"
            },
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 734,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "li.sort(key\u003dlambda x:x[1])\n    tree \u003d RedBlackTree()\n    for a, h, b in li:\n        prev_b \u003d tree.floor(My_pair(b, None))\n        if prev_b is None:\n            height_b \u003d 0\n        else:\n            height_b \u003d prev_b.value\n\n        next_a \u003d tree.ceil(My_pair(a, None))\n        while (next_a is not None) and next_a.key \u003c\u003d b:\n            tree.remove(next_a)\n            next_a \u003d tree.ceil(My_pair(a, None))\n\n        tree.add(My_pair(a, h))\n        tree.add(My_pair(b, height_b))\n\n    prev_height \u003d 0\n    ans \u003d []\n    for element in tree:\n        if element.value !\u003d prev_height:\n            prev_height \u003d element.value\n            ans.append((element.key, element.value))\n    return ans",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "from rb_tree import RedBlackTree\n\nclass My_pair:\n    def __init__(self, key, value):\n        self.key \u003d key\n        self.value \u003d value\n\n    def increment_value(self):\n        self.value +\u003d 1\n\n    def __lt__(self, other):\n        return self.key \u003c other.key\n\n    def __le__(self, other):\n        return self.key \u003c\u003d other.key\n\n    def __gt__(self, other):\n        return self.key \u003e other.key\n\n    def __ge__(self, other):\n        return self.key \u003e\u003d other.key\n\n    def __eq__(self, other):\n        if self is None or other is None:\n            return self is None and other is None\n        return self.key \u003d\u003d other.key\n\n    def __ne__(self, other):\n        return not self \u003d\u003d other\n\n\n#li elements are in (a, b, h) form\ndef func(li):\n    #Implement the function\n"
            },
            "task_copy.py": {
              "name": "task_copy.py",
              "placeholders": [],
              "is_visible": false,
              "text": "# TODO: type solution here\nfrom rb_tree import RedBlackTree\n\nclass My_pair:\n    def __init__(self, key, value):\n        self.key \u003d key\n        self.value \u003d value\n\n    def increment_value(self):\n        self.value +\u003d 1\n\n    def __lt__(self, other):\n        return self.key \u003c other.key\n\n    def __le__(self, other):\n        return self.key \u003c\u003d other.key\n\n    def __gt__(self, other):\n        return self.key \u003e other.key\n\n    def __ge__(self, other):\n        return self.key \u003e\u003d other.key\n\n    def __eq__(self, other):\n        if self is None or other is None:\n            return self is None and other is None\n        return self.key \u003d\u003d other.key\n\n    def __ne__(self, other):\n        return not self \u003d\u003d other\n\n\n#li elements are in (a, b, h) form\ndef func(li):\n    li.sort(key\u003dlambda x:x[1])\n    tree \u003d RedBlackTree()\n    for a, h, b in li:\n        prev_b \u003d tree.floor(My_pair(b, None))\n        if prev_b is None:\n            height_b \u003d 0\n        else:\n            height_b \u003d prev_b.value\n\n        next_a \u003d tree.ceil(My_pair(a, None))\n        while (next_a is not None) and next_a.key \u003c\u003d b:\n            tree.remove(next_a)\n            next_a \u003d tree.ceil(My_pair(a, None))\n\n        tree.add(My_pair(a, h))\n        tree.add(My_pair(b, height_b))\n\n    prev_height \u003d 0\n    ans \u003d []\n    for element in tree:\n        if element.value !\u003d prev_height:\n            prev_height \u003d element.value\n            ans.append((element.key, element.value))\n    return ans\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom random import shuffle\nfrom random import randint\nfrom task import func as func\nfrom task_copy import func as func_judge\n\ndef test_generator(n):\n    li \u003d []\n    a_and_b_s \u003d set()\n    h_s \u003d set()\n    for i in range(n):\n        max_range \u003d 10000\n        a \u003d randint(1, max_range)\n        b \u003d randint(1, max_range)\n        h \u003d randint(1, max_range)\n        # if a in a_and_b_s or b in a_and_b_s or h in h_s or a \u003d\u003d b:\n        #     continue\n        # a_and_b_s.add(a)\n        # a_and_b_s.add(b)\n        # h_s.add(h)\n        if a \u003d\u003d b:\n            continue\n        if a \u003e b:\n            a, b \u003d b, a\n        li.append((a, h, b))\n    return li\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_nums \u003d [10, 10, 100, 100, 10000]\n    for test_num in test_nums:\n        li \u003d test_generator(test_num)\n        user_li \u003d func(li[0:len(li)])\n        judge_li \u003d func_judge(li[0:len(li)])\n        if user_li !\u003d judge_li:\n            failed(\"Wrong Answer! Input: \" + str(li) +\n                   \"Your Answer: \" + str(user_li) +\n                   \"Expected Answer: \" + str(judge_li))\n    print(\"PASS\")\n\n\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\n\u003cmeta charset\u003d\"UTF-8\"\u003e\nدر یک شهر تعدادی ساختمان داریم و مختصات قرار گرفتن آن ها را نیز در اختیار داریم. می خواهیم خط افق این شهر را بیابیم\nبرای نمونه، شکل زیر را در نظر بگیرید\n\u003cimg src\u003d\"img.png\"\u003e\n\u003cbr\u003e\nبرنامه ای بنویسید که در ورودی لیستی از ساختمان ها بگیرد که هر ساختمان یک توپل ۳ تایی است که عضو اول آن مختصات شروع آن ساختمان است، عضو دوم ارتفاع  آن و عضو سوم مختصات پایان ساختمان.\nدر خروجی باید افق شهر را در یک لیست ارایه دهید. برای این کار، شکل افق شهر را در نظر بگیرید و نقاطی که در\nآن شکل تغییر ارتفاع رخ می دهد را در یک لیست قرار دهید. هر عضو لیست یک ۲ تایی است که عضو اول آن مختصات نقطه و عضو دوم آن ارتفاع است.\nبرای مثال برای ورودی\n\u003cdiv dir\u003d\"ltr\"\u003e\n  [(1,11,5), (2,6,7), (3,13,9), (12,7,16), (14,3,25),\n         (19,18,22), (23,13,29), (24,4,28)]\n\u003c/div\u003e\nباید خروجی شما\n\u003cdiv dir\u003d\"ltr\"\u003e\n  [(1, 11), (3, 13), (9, 0), (12, 7), (16, 3), (19, 18),\n        (22, 3), (25, 0)]\n\u003c/div\u003e\nباشد\nبرای این کار، باید تابع\n\u003cspan dir\u003d\"ltr\"\u003e\n  func(li)\n\u003c/span\u003e\n\u0026nbsp;\nرا پیاده سازی کنید که ورودی و خروجی آن به فرمی که گفته شد می باشد.\nتضمین می شود که نقطه پایان ساختمان، همواره بزرگتر از شروع آن است.\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Segment Tree",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 133,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "a \u003d []  # main array\n    node \u003d []  # array of minimum elements(use segment tree structure)\n    s \u003d arr.split()\n    ans \u003d []\n    for i in range(4 * n):\n        node.append(0)\n    for i in range(n):\n        a.append(int(s[i]))\n    make_tree(1, 0, n, node, a)\n    for i in range(q):\n        s \u003d inp[i].split()\n        p1 \u003d int(s[0])\n        p2 \u003d int(s[1])\n        ans +\u003d [get_min(1, 0, n, p1, p2, node)]\n\n    return ans",
                  "placeholder_text": "#Implement the function"
                },
                {
                  "offset": 158,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def make_tree(ind, l, r, node, a):\n    if (l \u003d\u003d r - 1):\n        node[ind] \u003d a[l]\n        return\n    mid \u003d (l + r) // 2\n    make_tree(ind * 2, l, mid, node, a)\n    make_tree(ind * 2 + 1, mid, r, node, a)\n    node[ind] \u003d min(node[ind * 2], node[ind * 2 + 1])\n\n\ndef get_min(ind, l, r, ql, qr, node):  # ql, qr determine segment of query\n    if (qr \u003c\u003d l or r \u003c\u003d ql):\n        return inf\n    if (ql \u003c\u003d l and r \u003c\u003d qr):\n        return node[ind]\n    mid \u003d (l + r) // 2\n    return min(get_min(ind * 2, l, mid, ql, qr, node)\n               , get_min(ind * 2 + 1, mid, r, ql, qr, node))",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "\ninf \u003d 1000000000\n#Sample Input\n# n \u003d 7\n# arr \u003d \"7 2 3 13 5 17 11\"\n# q \u003d 4\n# inp \u003d [\"3 7\", \"2 5\", ...]\ndef func(n, arr, q, inp):\n    #Implement the function\n\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\r\nfrom task import *\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    run_common_tests()\r\n\r\n    n \u003d 7\r\n    arr \u003d \"7 2 3 13 5 17 11\"\r\n    q \u003d 4\r\n    inp \u003d [\"3 7\", \"2 5\", \"0 7\", \"5 6\"]\r\n\r\n    if func(n, arr, q, inp) !\u003d [5, 3, 2, 17]:\r\n        failed(\"Wrong Answer!\")\r\n\r\n\r\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\nپیش‌نیاز:\u003cbr\u003e\nقسمت اول از بخش درخت بازه در جزوه‌ی داده‌ ساختارهای پیشرفته را بخوانید.\u003cbr\u003e\u003cbr\u003e\n\nمساله:\u003cbr\u003e\nآرایه‌ای از اعداد داریم. در هر درخواست می‌خواهیم بدانیم مینیمم عضو یک زیردنباله‌ی متوالی مشخص از این آرایه چه مقداری دارد.\u003cbr\u003e\u003cbr\u003e\n\nورودی:\u003cbr\u003e\nدر خط اول ورودی اندازه‌ی آرایه (تعداد اعضا) n، در خط دوم n عدد که نمایانگر اعداد آرایه‌اند و در خط سوم تعداد درخواست‌ها q داده می‌شود. در هر کدام از q خط بعد دو عدد مانند l و r می‌آیند که بازه‌ای که مینیمم آن درخواست شده است را مشخص می‌کنند.\u003cbr\u003e\nبازه‌ها به صورت بسته باز مشخص می‌شوند و اندیس اعضا آرایه از 0  شروع می‌شود.\u003cbr\u003e\n(l \u003c r , n \u003c\u003d 10^5 , a[i] \u003c\u003d 10^9)\n\u003cbr\u003e\u003cbr\u003e\n\nخروجی:\u003cbr\u003e\nشما باید در خروجی q خط چاپ کنید که خط iم شامل یک عدد معادل پاسخ درخواست iم است.\u003cbr\u003e\u003cbr\u003e\n\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 107,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "node \u003d []  # array of minimum elements(use segment tree structure)\n    ans \u003d []\n    n \u003d n.split()\n    for i in range(4 * len(n)):\n        node.append(0)\n    for i in range(len(n)):\n        if (int(n[i]) \u003d\u003d 1):\n            set_value(1, 0, len(n), i, i + 1, node)\n    for i in range(q):\n        s \u003d inp[i].split()\n        if (len(s) \u003d\u003d 2):\n            p1 \u003d int(s[1])\n            ans +\u003d [get_value(p1, 1, 0, len(n), node)]\n        else:\n            p1 \u003d int(s[1])\n            p2 \u003d int(s[2])\n            set_value(1, 0, len(n), p1, p2, node)\n\n    return ans",
                  "placeholder_text": "#Implement the function"
                },
                {
                  "offset": 134,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def set_value(ind, l, r, ql, qr, node):\n    if (ql \u003c\u003d l and r \u003c\u003d qr):\n        node[ind] \u003d 1 - node[ind]\n        return\n    if (l !\u003d r - 1):\n        mid \u003d (l + r) // 2\n        set_value(2 * ind, l, mid, ql, qr, node)\n        set_value(2 * ind + 1, mid, r, ql, qr, node)\n\n\ndef get_value(qind, ind, l, r, node):\n    if (l \u003c\u003d qind and qind \u003c r):\n        if (l \u003d\u003d r - 1):\n            return node[ind]\n        mid \u003d (l + r) // 2\n        return (node[ind] + get_value(qind, 2 * ind, l, mid, node) + get_value(qind, 2 * ind + 1, mid, r, node)) % 2\n    return 0",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "\n\n#Sample Input\n# n \u003d \"0 0 1 0 1 0 1 1 1 0\"\n# q \u003d 8\n# inp \u003d [\"s 3 7\", \"g 4\", ...]\ndef func(n, q, inp):\n    #Implement the function\n\n\n\n\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\r\nfrom task import *\r\n\r\nif __name__ \u003d\u003d \u0027__main__\u0027:\r\n    run_common_tests()\r\n\r\n    n \u003d \"0 0 1 0 1 0 1 1 1 0\"\r\n    q \u003d 8\r\n    inp \u003d [\"s 3 7\", \"g 4\", \"s 2 8\", \"s 5 10\", \"g 4\", \"s 0 6\", \"g 3\", \"g 5\"]\r\n\r\n    if func(n,q,inp) !\u003d [0, 1, 1, 0]:\r\n        failed(\"Wrong Answer!\")\r\n\r\n\r\n"
          },
          "description_text": "\u003chtml dir\u003d\"rtl\"\u003e\nپیش‌نیاز:\u003cbr\u003e\nقسمت درخت بازه از جزوه‌ی داده‌ ساختارهای پیشرفته را بخوانید.\u003cbr\u003e\u003cbr\u003e\n\nمساله:\u003cbr\u003e\nدنباله‌ای از بیت‌های 0 و 1 داریم. دو نوع درخواست وجود دارد:\u003cbr\u003e\n•\tبیت‌های یک زیردنباله‌ی متوالی را برعکس کن (تبدیل 0 به 1 و 1 به 0).\u003cbr\u003e\n•\tمقدار بیت iم را در خروجی بده.\n\u003cbr\u003e\u003cbr\u003e\n\nورودی:\u003cbr\u003e\n\u003cbr\u003eدر خط اول n بیت می‌آید که نمایانگر اعضا دنباله‌اند و در خط دوم تعداد درخواست‌ها q داده می‌شود.  هر کدام از q خط بعد یا با s شروع می‌شود و بعد از آن دو عدد مانند l و r می‌آیند که بازه‌ای که بایستی بیت‌هایش برعکس شود را مشخص می‌کنند یا با g شروع می‌شود و سپس اندیس بیتی که بایستی مقدارش برگردانده شود داده می‌شود.\nبازه‌ها به صورت بسته باز مشخص می‌شوند و اندیس اعضا آرایه از 0  شروع می‌شود.\n\u003cbr\u003e\n(l \u003c r , n \u003c\u003d 10^5 , a[i] \u003c\u003d 10^9)\n\u003cbr\u003e\u003cbr\u003e\n\nخروجی:\u003cbr\u003e\nشما باید به تعداد درخواست‌هایی که مقدار یک عضو را می‌خواهند و به ترتیب در خطوط خروجی مقدار بیت‌ها را چاپ کنید. (در هر خط یک مقدار) \u003cbr\u003e\u003cbr\u003e\n\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "DFS-BFS",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 242,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def dfs(g,v,visited,parent):\n    visited[v] \u003d True\n    for i in g.graph[v]:\n        if not visited[i]:\n            if dfs(g,i, visited, v):\n                return True\n        elif parent is not i:\n            return True\n\n    return False",
                  "placeholder_text": ""
                },
                {
                  "offset": 266,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "visited \u003d[False for i in range(g.V)]\n    for i in range(g.V):\n        if not visited[i]:\n            if dfs(g, i, visited, -1):\n                return True\n\n    return False\n",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "from collections import defaultdict\n\nclass Graph:\n    def __init__(self,vertices):\n        self.V \u003d vertices\n        self.graph \u003d defaultdict(list)\n\n    def addEdge(self,v,w):\n        self.graph[v].append(w)\n        self.graph[w].append(v)\n\n\n\n\n\ndef hasCycle(g):\n    #Implement the function"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    g \u003d Graph(5)\n    g.addEdge(1, 0)\n    g.addEdge(0, 2)\n    g.addEdge(2, 0)\n    g.addEdge(0, 3)\n    g.addEdge(3, 4)\n    if not hasCycle(g):\n        failed(\"Wrong Answer!\")\n\n    g \u003d Graph(3)\n    g.addEdge(0,1)\n    g.addEdge(1,2)\n\n    if hasCycle(g):\n        failed(\"Wrong Answer!\")\n\n    g \u003d Graph(5)\n    g.addEdge(0, 1)\n    g.addEdge(0, 4)\n    g.addEdge(3, 4)\n    g.addEdge(3, 2)\n    g.addEdge(3, 1)\n\n    if not hasCycle(g):\n        failed(\"Wrong Answer!\")\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه DFS-BFS را مطالعه کنید.\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir \u003d \"rtl\"\u003e\n  در اولین گام به یک مسئله ساده و کاربردی از الگوریتم های گراف می پردازیم.\n  \u003cbr\u003e\n  می خواهیم وجود یا عدم وجود دور را در یک گراف بدون جهت بررسی کنیم.\n  \u003cbr\u003e\n  \u003cbr\u003e\n  در این سوال بر اساس کلاس گرافی که قرار داده شده، به تابع hasCycle یک گراف داده می شود و شما باید با کامل کردن آن، بررسی کنید که آیا در این گراف دور جود دارد یا خیر ؟\n\n\n\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 241,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "visited \u003d[False for _ in range(g.V)]\n    count \u003d []\n    dfs(g, s, d,visited, count)\n    return len(count)",
                  "placeholder_text": "return 0 #Implement the function"
                },
                {
                  "offset": 275,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def dfs(g, s, d,visited, count):\n    visited[s]\u003d True\n    if s \u003d\u003d d:\n        count +\u003d [1]\n    else:\n        for i in g.graph[s]:\n            if not visited[i]:\n                dfs(g, i, d, visited, count)\n\n    visited[s] \u003d False\n",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "from collections import defaultdict\n\nclass Graph:\n\n    def __init__(self,vertices):\n        self.V \u003d vertices\n        self.graph \u003d defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\ndef countPaths(g, s, d):\n    return 0 #Implement the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    g \u003d Graph(4)\n    g.addEdge(0, 1)\n    g.addEdge(0, 2)\n    g.addEdge(0, 3)\n    g.addEdge(2, 0)\n    g.addEdge(2, 1)\n    g.addEdge(1, 3)\n    if countPaths(g, 2, 3) !\u003d 3:\n        failed(\"Wrong Answer!\")\n\n    g \u003d Graph(5)\n    g.addEdge(0,1)\n    g.addEdge(0,2)\n    g.addEdge(0,4)\n    g.addEdge(1,3)\n    g.addEdge(1,4)\n    g.addEdge(2,4)\n    g.addEdge(3,2)\n\n    if countPaths(g, 0, 4) !\u003d 4:\n        failed(\"Wrong Answer!\")\n\n    if countPaths(g, 1, 0) !\u003d 0:\n        failed(\"Wrong Answer!\")\n"
          },
          "description_text": "\u003chtml\u003e\n\n\u003cp dir \u003d \"rtl\"\u003e\n  یک گراف جهت دار بدون دور داریم.\n  \u003cbr\u003e\n  شما باید تابع countPaths را طوری کامل کنید\n  به صورتی که با گرفتن یک گراف (بر اساس کلاس قرار داده شده)\n  و دو راس تعداد تمام مسیر های بین این دو راس را برگرداند.\n\u003c/p\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 308,
                  "length": 32,
                  "hints": [],
                  "possible_answer": "    maxDis \u003d 0\n    for i in range(g.v):\n        tmp \u003d bfs(g,i)\n        if(tmp \u003e maxDis):\n            maxDis \u003d tmp\n    return maxDis",
                  "placeholder_text": "return 0 #Implement the function"
                },
                {
                  "offset": 342,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def bfs(g,u):\n        distance \u003d [-1]*g.v\n        distance[u] \u003d 0\n        q \u003d []\n        q.append(u)\n        while(len(q) \u003e 0):\n            t \u003d q.pop()\n            for v in g.graph[t]:\n                if(distance[v] \u003d\u003d -1):\n                    q.append(v)\n                    distance[v] \u003d distance[t] + 1\n\n        return max(distance)\n",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "from collections import defaultdict\n\nclass graph:\n    def __init__(self,vertices):\n        self.v \u003d vertices\n        self.graph \u003d defaultdict(list)\n        self.eSize \u003d 0\n\n    def addEdge(self,u,x):\n        self.graph[u].append(x)\n        self.graph[x].append(u)\n        self.eSize +\u003d 1\n\ndef maxDistance(g):\nreturn 0 #Implement the function\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    g \u003d graph(7)\n    g.addEdge(0,1)\n    g.addEdge(1,2)\n    g.addEdge(2,3)\n    g.addEdge(3,4)\n    g.addEdge(4,1)\n    g.addEdge(2,6)\n    g.addEdge(3,6)\n\n    if maxDistance(g) !\u003d 4:\n        failed(\"Wrong Answer\")\n\n    g \u003d graph(4)\n    g.addEdge(0,1)\n    g.addEdge(1,2)\n    g.addEdge(2,3)\n    g.addEdge(3,0)\n    if maxDistance(g) !\u003d 2:\n        failed(\"Wrong Answer!\")\n\n    g.addEdge(0,2)\n    g.addEdge(1,3)\n\n    if maxDistance(g) !\u003d 1:\n        failed(\"Wrong Answer!\")\n\n"
          },
          "description_text": "\u003chtml\u003e\n\n\u003cp dir \u003d \"rtl\"\u003e\n  یک گراف بدون جهت همبند داریم.\n  \u003cbr\u003e\n  می خواهیم بیشترین فاصله بین تمامی جفت شهرهای ممکن را محاسبه کنیم. فاصله‌ی دو شهر طول کوتاه‌ترین مسیر بین آن دو شهر است.\n  \u003cbr\u003e\n  \u003cbr\u003e\n  تابع maxDistance را طوری کامل کنید تا بیشترین فاصله را برگرداند.\n  \u003cbr\u003e\n  \u003cbr\u003e\n(گرافی که به این تابع داده می شود به صورت کلاسی که قرار داده شده پیاده شده است.)\n\u003c/p\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Topological Sort",
      "task_list": [
        {
          "name": "Q1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 257,
                  "length": 33,
                  "hints": [],
                  "possible_answer": "visited \u003d [False for _ in range(self.Vertices_num)]\n        in_degree \u003d [0 for _ in range(self.Vertices_num)]\n        for i in range(self.Vertices_num):\n            for j in self.graph[i]:\n                in_degree[j] +\u003d 1\n\n        answers \u003d []\n        self.find_topological(visited, in_degree, answers)\n        return self.result",
                  "placeholder_text": "return -1 #Implement the function"
                },
                {
                  "offset": 296,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def find_topological(self, visited, in_degree, answers):\n        flag \u003d False\n        for i in range(self.Vertices_num):\n            if in_degree[i] \u003d\u003d 0 and not visited[i]:\n                visited[i] \u003d True\n                answers.append(i)\n                for j in self.graph[i]:\n                    in_degree[j] -\u003d 1\n                self.find_topological(visited, in_degree, answers)\n\n                visited[i] \u003d False\n                del answers[-1]\n                for j in self.graph[i]:\n                    in_degree[j] +\u003d 1\n                flag \u003d True\n        if not flag:\n            a \u003d copy.deepcopy(answers)\n            self.result.append(a)",
                  "placeholder_text": ""
                }
              ],
              "is_visible": true,
              "text": "import copy\n\n\nclass Graph:\n    def __init__(self, N):\n        self.graph \u003d [[] for _ in range(N)]\n        self.Vertices_num \u003d N\n        self.result \u003d []\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n\n    def all_topologicals(self):\n        return -1 #Implement the function\n\n    \n\n\n# Don\u0027t change this function\ndef solve(graph):\n    return graph.all_topologicals()\n\n\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    g \u003d Graph(6)\n    g.add_edge(5, 2)\n    g.add_edge(5, 0)\n    g.add_edge(4, 0)\n    g.add_edge(4, 1)\n    g.add_edge(2, 3)\n    g.add_edge(3, 1)\n\n    g2 \u003d Graph(8)\n    g2.add_edge(0, 3)\n    g2.add_edge(1, 3)\n    g2.add_edge(2, 3)\n    g2.add_edge(3, 4)\n    g2.add_edge(3, 5)\n    g2.add_edge(3, 6)\n    g2.add_edge(4, 7)\n    g2.add_edge(5, 7)\n    g2.add_edge(6, 7)\n\n    g3 \u003d Graph(7)\n    g3.add_edge(0, 1)\n    g3.add_edge(0, 2)\n    g3.add_edge(1, 3)\n    g3.add_edge(1, 4)\n    g3.add_edge(3, 6)\n    g3.add_edge(2, 5)\n    g3.add_edge(5, 4)\n    g3.add_edge(4, 6)\n    g3.add_edge(5, 6)\n\n    g4 \u003d Graph(10)\n    g4.add_edge(0, 1)\n    g4.add_edge(0, 2)\n    g4.add_edge(1, 3)\n    g4.add_edge(1, 4)\n    g4.add_edge(2, 3)\n    g4.add_edge(2, 4)\n    g4.add_edge(2, 5)\n    g4.add_edge(2, 6)\n    g4.add_edge(5, 8)\n    g4.add_edge(6, 8)\n    g4.add_edge(6, 7)\n    g4.add_edge(6, 9)\n    g4.add_edge(7, 9)\n\n    tests \u003d [\n        (g, [[4, 5, 0, 2, 3, 1], [4, 5, 2, 0, 3, 1], [4, 5, 2, 3, 0, 1], [4, 5, 2, 3, 1, 0], [5, 2, 3, 4, 0, 1], [5, 2, 3, 4, 1, 0], [5, 2, 4, 0, 3, 1], [5, 2, 4, 3, 0, 1], [5, 2, 4, 3, 1, 0], [5, 4, 0, 2, 3, 1], [5, 4, 2, 0, 3, 1], [5, 4, 2, 3, 0, 1], [5, 4, 2, 3, 1, 0]]),\n        (g2, [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5, 7], [0, 1, 2, 3, 5, 4, 6, 7], [0, 1, 2, 3, 5, 6, 4, 7], [0, 1, 2, 3, 6, 4, 5, 7], [0, 1, 2, 3, 6, 5, 4, 7], [0, 2, 1, 3, 4, 5, 6, 7], [0, 2, 1, 3, 4, 6, 5, 7], [0, 2, 1, 3, 5, 4, 6, 7], [0, 2, 1, 3, 5, 6, 4, 7], [0, 2, 1, 3, 6, 4, 5, 7], [0, 2, 1, 3, 6, 5, 4, 7], [1, 0, 2, 3, 4, 5, 6, 7], [1, 0, 2, 3, 4, 6, 5, 7], [1, 0, 2, 3, 5, 4, 6, 7], [1, 0, 2, 3, 5, 6, 4, 7], [1, 0, 2, 3, 6, 4, 5, 7], [1, 0, 2, 3, 6, 5, 4, 7], [1, 2, 0, 3, 4, 5, 6, 7], [1, 2, 0, 3, 4, 6, 5, 7], [1, 2, 0, 3, 5, 4, 6, 7], [1, 2, 0, 3, 5, 6, 4, 7], [1, 2, 0, 3, 6, 4, 5, 7], [1, 2, 0, 3, 6, 5, 4, 7], [2, 0, 1, 3, 4, 5, 6, 7], [2, 0, 1, 3, 4, 6, 5, 7], [2, 0, 1, 3, 5, 4, 6, 7], [2, 0, 1, 3, 5, 6, 4, 7], [2, 0, 1, 3, 6, 4, 5, 7], [2, 0, 1, 3, 6, 5, 4, 7], [2, 1, 0, 3, 4, 5, 6, 7], [2, 1, 0, 3, 4, 6, 5, 7], [2, 1, 0, 3, 5, 4, 6, 7], [2, 1, 0, 3, 5, 6, 4, 7], [2, 1, 0, 3, 6, 4, 5, 7], [2, 1, 0, 3, 6, 5, 4, 7]]),\n        (g3, [[0, 1, 2, 3, 5, 4, 6], [0, 1, 2, 5, 3, 4, 6], [0, 1, 2, 5, 4, 3, 6], [0, 1, 3, 2, 5, 4, 6], [0, 2, 1, 3, 5, 4, 6], [0, 2, 1, 5, 3, 4, 6], [0, 2, 1, 5, 4, 3, 6], [0, 2, 5, 1, 3, 4, 6], [0, 2, 5, 1, 4, 3, 6]]),\n        (g4, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 9, 8], [0, 1, 2, 3, 4, 5, 6, 8, 7, 9], [0, 1, 2, 3, 4, 6, 5, 7, 8, 9], [0, 1, 2, 3, 4, 6, 5, 7, 9, 8], [0, 1, 2, 3, 4, 6, 5, 8, 7, 9], [0, 1, 2, 3, 4, 6, 7, 5, 8, 9], [0, 1, 2, 3, 4, 6, 7, 5, 9, 8], [0, 1, 2, 3, 4, 6, 7, 9, 5, 8], [0, 1, 2, 3, 5, 4, 6, 7, 8, 9], [0, 1, 2, 3, 5, 4, 6, 7, 9, 8], [0, 1, 2, 3, 5, 4, 6, 8, 7, 9], [0, 1, 2, 3, 5, 6, 4, 7, 8, 9], [0, 1, 2, 3, 5, 6, 4, 7, 9, 8], [0, 1, 2, 3, 5, 6, 4, 8, 7, 9], [0, 1, 2, 3, 5, 6, 7, 4, 8, 9], [0, 1, 2, 3, 5, 6, 7, 4, 9, 8], [0, 1, 2, 3, 5, 6, 7, 8, 4, 9], [0, 1, 2, 3, 5, 6, 7, 8, 9, 4], [0, 1, 2, 3, 5, 6, 7, 9, 4, 8], [0, 1, 2, 3, 5, 6, 7, 9, 8, 4], [0, 1, 2, 3, 5, 6, 8, 4, 7, 9], [0, 1, 2, 3, 5, 6, 8, 7, 4, 9], [0, 1, 2, 3, 5, 6, 8, 7, 9, 4], [0, 1, 2, 3, 6, 4, 5, 7, 8, 9], [0, 1, 2, 3, 6, 4, 5, 7, 9, 8], [0, 1, 2, 3, 6, 4, 5, 8, 7, 9], [0, 1, 2, 3, 6, 4, 7, 5, 8, 9], [0, 1, 2, 3, 6, 4, 7, 5, 9, 8], [0, 1, 2, 3, 6, 4, 7, 9, 5, 8], [0, 1, 2, 3, 6, 5, 4, 7, 8, 9], [0, 1, 2, 3, 6, 5, 4, 7, 9, 8], [0, 1, 2, 3, 6, 5, 4, 8, 7, 9], [0, 1, 2, 3, 6, 5, 7, 4, 8, 9], [0, 1, 2, 3, 6, 5, 7, 4, 9, 8], [0, 1, 2, 3, 6, 5, 7, 8, 4, 9], [0, 1, 2, 3, 6, 5, 7, 8, 9, 4], [0, 1, 2, 3, 6, 5, 7, 9, 4, 8], [0, 1, 2, 3, 6, 5, 7, 9, 8, 4], [0, 1, 2, 3, 6, 5, 8, 4, 7, 9], [0, 1, 2, 3, 6, 5, 8, 7, 4, 9], [0, 1, 2, 3, 6, 5, 8, 7, 9, 4], [0, 1, 2, 3, 6, 7, 4, 5, 8, 9], [0, 1, 2, 3, 6, 7, 4, 5, 9, 8], [0, 1, 2, 3, 6, 7, 4, 9, 5, 8], [0, 1, 2, 3, 6, 7, 5, 4, 8, 9], [0, 1, 2, 3, 6, 7, 5, 4, 9, 8], [0, 1, 2, 3, 6, 7, 5, 8, 4, 9], [0, 1, 2, 3, 6, 7, 5, 8, 9, 4], [0, 1, 2, 3, 6, 7, 5, 9, 4, 8], [0, 1, 2, 3, 6, 7, 5, 9, 8, 4], [0, 1, 2, 3, 6, 7, 9, 4, 5, 8], [0, 1, 2, 3, 6, 7, 9, 5, 4, 8], [0, 1, 2, 3, 6, 7, 9, 5, 8, 4], [0, 1, 2, 4, 3, 5, 6, 7, 8, 9], [0, 1, 2, 4, 3, 5, 6, 7, 9, 8], [0, 1, 2, 4, 3, 5, 6, 8, 7, 9], [0, 1, 2, 4, 3, 6, 5, 7, 8, 9], [0, 1, 2, 4, 3, 6, 5, 7, 9, 8], [0, 1, 2, 4, 3, 6, 5, 8, 7, 9], [0, 1, 2, 4, 3, 6, 7, 5, 8, 9], [0, 1, 2, 4, 3, 6, 7, 5, 9, 8], [0, 1, 2, 4, 3, 6, 7, 9, 5, 8], [0, 1, 2, 4, 5, 3, 6, 7, 8, 9], [0, 1, 2, 4, 5, 3, 6, 7, 9, 8], [0, 1, 2, 4, 5, 3, 6, 8, 7, 9], [0, 1, 2, 4, 5, 6, 3, 7, 8, 9], [0, 1, 2, 4, 5, 6, 3, 7, 9, 8], [0, 1, 2, 4, 5, 6, 3, 8, 7, 9], [0, 1, 2, 4, 5, 6, 7, 3, 8, 9], [0, 1, 2, 4, 5, 6, 7, 3, 9, 8], [0, 1, 2, 4, 5, 6, 7, 8, 3, 9], [0, 1, 2, 4, 5, 6, 7, 8, 9, 3], [0, 1, 2, 4, 5, 6, 7, 9, 3, 8], [0, 1, 2, 4, 5, 6, 7, 9, 8, 3], [0, 1, 2, 4, 5, 6, 8, 3, 7, 9], [0, 1, 2, 4, 5, 6, 8, 7, 3, 9], [0, 1, 2, 4, 5, 6, 8, 7, 9, 3], [0, 1, 2, 4, 6, 3, 5, 7, 8, 9], [0, 1, 2, 4, 6, 3, 5, 7, 9, 8], [0, 1, 2, 4, 6, 3, 5, 8, 7, 9], [0, 1, 2, 4, 6, 3, 7, 5, 8, 9], [0, 1, 2, 4, 6, 3, 7, 5, 9, 8], [0, 1, 2, 4, 6, 3, 7, 9, 5, 8], [0, 1, 2, 4, 6, 5, 3, 7, 8, 9], [0, 1, 2, 4, 6, 5, 3, 7, 9, 8], [0, 1, 2, 4, 6, 5, 3, 8, 7, 9], [0, 1, 2, 4, 6, 5, 7, 3, 8, 9], [0, 1, 2, 4, 6, 5, 7, 3, 9, 8], [0, 1, 2, 4, 6, 5, 7, 8, 3, 9], [0, 1, 2, 4, 6, 5, 7, 8, 9, 3], [0, 1, 2, 4, 6, 5, 7, 9, 3, 8], [0, 1, 2, 4, 6, 5, 7, 9, 8, 3], [0, 1, 2, 4, 6, 5, 8, 3, 7, 9], [0, 1, 2, 4, 6, 5, 8, 7, 3, 9], [0, 1, 2, 4, 6, 5, 8, 7, 9, 3], [0, 1, 2, 4, 6, 7, 3, 5, 8, 9], [0, 1, 2, 4, 6, 7, 3, 5, 9, 8], [0, 1, 2, 4, 6, 7, 3, 9, 5, 8], [0, 1, 2, 4, 6, 7, 5, 3, 8, 9], [0, 1, 2, 4, 6, 7, 5, 3, 9, 8], [0, 1, 2, 4, 6, 7, 5, 8, 3, 9], [0, 1, 2, 4, 6, 7, 5, 8, 9, 3], [0, 1, 2, 4, 6, 7, 5, 9, 3, 8], [0, 1, 2, 4, 6, 7, 5, 9, 8, 3], [0, 1, 2, 4, 6, 7, 9, 3, 5, 8], [0, 1, 2, 4, 6, 7, 9, 5, 3, 8], [0, 1, 2, 4, 6, 7, 9, 5, 8, 3], [0, 1, 2, 5, 3, 4, 6, 7, 8, 9], [0, 1, 2, 5, 3, 4, 6, 7, 9, 8], [0, 1, 2, 5, 3, 4, 6, 8, 7, 9], [0, 1, 2, 5, 3, 6, 4, 7, 8, 9], [0, 1, 2, 5, 3, 6, 4, 7, 9, 8], [0, 1, 2, 5, 3, 6, 4, 8, 7, 9], [0, 1, 2, 5, 3, 6, 7, 4, 8, 9], [0, 1, 2, 5, 3, 6, 7, 4, 9, 8], [0, 1, 2, 5, 3, 6, 7, 8, 4, 9], [0, 1, 2, 5, 3, 6, 7, 8, 9, 4], [0, 1, 2, 5, 3, 6, 7, 9, 4, 8], [0, 1, 2, 5, 3, 6, 7, 9, 8, 4], [0, 1, 2, 5, 3, 6, 8, 4, 7, 9], [0, 1, 2, 5, 3, 6, 8, 7, 4, 9], [0, 1, 2, 5, 3, 6, 8, 7, 9, 4], [0, 1, 2, 5, 4, 3, 6, 7, 8, 9], [0, 1, 2, 5, 4, 3, 6, 7, 9, 8], [0, 1, 2, 5, 4, 3, 6, 8, 7, 9], [0, 1, 2, 5, 4, 6, 3, 7, 8, 9], [0, 1, 2, 5, 4, 6, 3, 7, 9, 8], [0, 1, 2, 5, 4, 6, 3, 8, 7, 9], [0, 1, 2, 5, 4, 6, 7, 3, 8, 9], [0, 1, 2, 5, 4, 6, 7, 3, 9, 8], [0, 1, 2, 5, 4, 6, 7, 8, 3, 9], [0, 1, 2, 5, 4, 6, 7, 8, 9, 3], [0, 1, 2, 5, 4, 6, 7, 9, 3, 8], [0, 1, 2, 5, 4, 6, 7, 9, 8, 3], [0, 1, 2, 5, 4, 6, 8, 3, 7, 9], [0, 1, 2, 5, 4, 6, 8, 7, 3, 9], [0, 1, 2, 5, 4, 6, 8, 7, 9, 3], [0, 1, 2, 5, 6, 3, 4, 7, 8, 9], [0, 1, 2, 5, 6, 3, 4, 7, 9, 8], [0, 1, 2, 5, 6, 3, 4, 8, 7, 9], [0, 1, 2, 5, 6, 3, 7, 4, 8, 9], [0, 1, 2, 5, 6, 3, 7, 4, 9, 8], [0, 1, 2, 5, 6, 3, 7, 8, 4, 9], [0, 1, 2, 5, 6, 3, 7, 8, 9, 4], [0, 1, 2, 5, 6, 3, 7, 9, 4, 8], [0, 1, 2, 5, 6, 3, 7, 9, 8, 4], [0, 1, 2, 5, 6, 3, 8, 4, 7, 9], [0, 1, 2, 5, 6, 3, 8, 7, 4, 9], [0, 1, 2, 5, 6, 3, 8, 7, 9, 4], [0, 1, 2, 5, 6, 4, 3, 7, 8, 9], [0, 1, 2, 5, 6, 4, 3, 7, 9, 8], [0, 1, 2, 5, 6, 4, 3, 8, 7, 9], [0, 1, 2, 5, 6, 4, 7, 3, 8, 9], [0, 1, 2, 5, 6, 4, 7, 3, 9, 8], [0, 1, 2, 5, 6, 4, 7, 8, 3, 9], [0, 1, 2, 5, 6, 4, 7, 8, 9, 3], [0, 1, 2, 5, 6, 4, 7, 9, 3, 8], [0, 1, 2, 5, 6, 4, 7, 9, 8, 3], [0, 1, 2, 5, 6, 4, 8, 3, 7, 9], [0, 1, 2, 5, 6, 4, 8, 7, 3, 9], [0, 1, 2, 5, 6, 4, 8, 7, 9, 3], [0, 1, 2, 5, 6, 7, 3, 4, 8, 9], [0, 1, 2, 5, 6, 7, 3, 4, 9, 8], [0, 1, 2, 5, 6, 7, 3, 8, 4, 9], [0, 1, 2, 5, 6, 7, 3, 8, 9, 4], [0, 1, 2, 5, 6, 7, 3, 9, 4, 8], [0, 1, 2, 5, 6, 7, 3, 9, 8, 4], [0, 1, 2, 5, 6, 7, 4, 3, 8, 9], [0, 1, 2, 5, 6, 7, 4, 3, 9, 8], [0, 1, 2, 5, 6, 7, 4, 8, 3, 9], [0, 1, 2, 5, 6, 7, 4, 8, 9, 3], [0, 1, 2, 5, 6, 7, 4, 9, 3, 8], [0, 1, 2, 5, 6, 7, 4, 9, 8, 3], [0, 1, 2, 5, 6, 7, 8, 3, 4, 9], [0, 1, 2, 5, 6, 7, 8, 3, 9, 4], [0, 1, 2, 5, 6, 7, 8, 4, 3, 9], [0, 1, 2, 5, 6, 7, 8, 4, 9, 3], [0, 1, 2, 5, 6, 7, 8, 9, 3, 4], [0, 1, 2, 5, 6, 7, 8, 9, 4, 3], [0, 1, 2, 5, 6, 7, 9, 3, 4, 8], [0, 1, 2, 5, 6, 7, 9, 3, 8, 4], [0, 1, 2, 5, 6, 7, 9, 4, 3, 8], [0, 1, 2, 5, 6, 7, 9, 4, 8, 3], [0, 1, 2, 5, 6, 7, 9, 8, 3, 4], [0, 1, 2, 5, 6, 7, 9, 8, 4, 3], [0, 1, 2, 5, 6, 8, 3, 4, 7, 9], [0, 1, 2, 5, 6, 8, 3, 7, 4, 9], [0, 1, 2, 5, 6, 8, 3, 7, 9, 4], [0, 1, 2, 5, 6, 8, 4, 3, 7, 9], [0, 1, 2, 5, 6, 8, 4, 7, 3, 9], [0, 1, 2, 5, 6, 8, 4, 7, 9, 3], [0, 1, 2, 5, 6, 8, 7, 3, 4, 9], [0, 1, 2, 5, 6, 8, 7, 3, 9, 4], [0, 1, 2, 5, 6, 8, 7, 4, 3, 9], [0, 1, 2, 5, 6, 8, 7, 4, 9, 3], [0, 1, 2, 5, 6, 8, 7, 9, 3, 4], [0, 1, 2, 5, 6, 8, 7, 9, 4, 3], [0, 1, 2, 6, 3, 4, 5, 7, 8, 9], [0, 1, 2, 6, 3, 4, 5, 7, 9, 8], [0, 1, 2, 6, 3, 4, 5, 8, 7, 9], [0, 1, 2, 6, 3, 4, 7, 5, 8, 9], [0, 1, 2, 6, 3, 4, 7, 5, 9, 8], [0, 1, 2, 6, 3, 4, 7, 9, 5, 8], [0, 1, 2, 6, 3, 5, 4, 7, 8, 9], [0, 1, 2, 6, 3, 5, 4, 7, 9, 8], [0, 1, 2, 6, 3, 5, 4, 8, 7, 9], [0, 1, 2, 6, 3, 5, 7, 4, 8, 9], [0, 1, 2, 6, 3, 5, 7, 4, 9, 8], [0, 1, 2, 6, 3, 5, 7, 8, 4, 9], [0, 1, 2, 6, 3, 5, 7, 8, 9, 4], [0, 1, 2, 6, 3, 5, 7, 9, 4, 8], [0, 1, 2, 6, 3, 5, 7, 9, 8, 4], [0, 1, 2, 6, 3, 5, 8, 4, 7, 9], [0, 1, 2, 6, 3, 5, 8, 7, 4, 9], [0, 1, 2, 6, 3, 5, 8, 7, 9, 4], [0, 1, 2, 6, 3, 7, 4, 5, 8, 9], [0, 1, 2, 6, 3, 7, 4, 5, 9, 8], [0, 1, 2, 6, 3, 7, 4, 9, 5, 8], [0, 1, 2, 6, 3, 7, 5, 4, 8, 9], [0, 1, 2, 6, 3, 7, 5, 4, 9, 8], [0, 1, 2, 6, 3, 7, 5, 8, 4, 9], [0, 1, 2, 6, 3, 7, 5, 8, 9, 4], [0, 1, 2, 6, 3, 7, 5, 9, 4, 8], [0, 1, 2, 6, 3, 7, 5, 9, 8, 4], [0, 1, 2, 6, 3, 7, 9, 4, 5, 8], [0, 1, 2, 6, 3, 7, 9, 5, 4, 8], [0, 1, 2, 6, 3, 7, 9, 5, 8, 4], [0, 1, 2, 6, 4, 3, 5, 7, 8, 9], [0, 1, 2, 6, 4, 3, 5, 7, 9, 8], [0, 1, 2, 6, 4, 3, 5, 8, 7, 9], [0, 1, 2, 6, 4, 3, 7, 5, 8, 9], [0, 1, 2, 6, 4, 3, 7, 5, 9, 8], [0, 1, 2, 6, 4, 3, 7, 9, 5, 8], [0, 1, 2, 6, 4, 5, 3, 7, 8, 9], [0, 1, 2, 6, 4, 5, 3, 7, 9, 8], [0, 1, 2, 6, 4, 5, 3, 8, 7, 9], [0, 1, 2, 6, 4, 5, 7, 3, 8, 9], [0, 1, 2, 6, 4, 5, 7, 3, 9, 8], [0, 1, 2, 6, 4, 5, 7, 8, 3, 9], [0, 1, 2, 6, 4, 5, 7, 8, 9, 3], [0, 1, 2, 6, 4, 5, 7, 9, 3, 8], [0, 1, 2, 6, 4, 5, 7, 9, 8, 3], [0, 1, 2, 6, 4, 5, 8, 3, 7, 9], [0, 1, 2, 6, 4, 5, 8, 7, 3, 9], [0, 1, 2, 6, 4, 5, 8, 7, 9, 3], [0, 1, 2, 6, 4, 7, 3, 5, 8, 9], [0, 1, 2, 6, 4, 7, 3, 5, 9, 8], [0, 1, 2, 6, 4, 7, 3, 9, 5, 8], [0, 1, 2, 6, 4, 7, 5, 3, 8, 9], [0, 1, 2, 6, 4, 7, 5, 3, 9, 8], [0, 1, 2, 6, 4, 7, 5, 8, 3, 9], [0, 1, 2, 6, 4, 7, 5, 8, 9, 3], [0, 1, 2, 6, 4, 7, 5, 9, 3, 8], [0, 1, 2, 6, 4, 7, 5, 9, 8, 3], [0, 1, 2, 6, 4, 7, 9, 3, 5, 8], [0, 1, 2, 6, 4, 7, 9, 5, 3, 8], [0, 1, 2, 6, 4, 7, 9, 5, 8, 3], [0, 1, 2, 6, 5, 3, 4, 7, 8, 9], [0, 1, 2, 6, 5, 3, 4, 7, 9, 8], [0, 1, 2, 6, 5, 3, 4, 8, 7, 9], [0, 1, 2, 6, 5, 3, 7, 4, 8, 9], [0, 1, 2, 6, 5, 3, 7, 4, 9, 8], [0, 1, 2, 6, 5, 3, 7, 8, 4, 9], [0, 1, 2, 6, 5, 3, 7, 8, 9, 4], [0, 1, 2, 6, 5, 3, 7, 9, 4, 8], [0, 1, 2, 6, 5, 3, 7, 9, 8, 4], [0, 1, 2, 6, 5, 3, 8, 4, 7, 9], [0, 1, 2, 6, 5, 3, 8, 7, 4, 9], [0, 1, 2, 6, 5, 3, 8, 7, 9, 4], [0, 1, 2, 6, 5, 4, 3, 7, 8, 9], [0, 1, 2, 6, 5, 4, 3, 7, 9, 8], [0, 1, 2, 6, 5, 4, 3, 8, 7, 9], [0, 1, 2, 6, 5, 4, 7, 3, 8, 9], [0, 1, 2, 6, 5, 4, 7, 3, 9, 8], [0, 1, 2, 6, 5, 4, 7, 8, 3, 9], [0, 1, 2, 6, 5, 4, 7, 8, 9, 3], [0, 1, 2, 6, 5, 4, 7, 9, 3, 8], [0, 1, 2, 6, 5, 4, 7, 9, 8, 3], [0, 1, 2, 6, 5, 4, 8, 3, 7, 9], [0, 1, 2, 6, 5, 4, 8, 7, 3, 9], [0, 1, 2, 6, 5, 4, 8, 7, 9, 3], [0, 1, 2, 6, 5, 7, 3, 4, 8, 9], [0, 1, 2, 6, 5, 7, 3, 4, 9, 8], [0, 1, 2, 6, 5, 7, 3, 8, 4, 9], [0, 1, 2, 6, 5, 7, 3, 8, 9, 4], [0, 1, 2, 6, 5, 7, 3, 9, 4, 8], [0, 1, 2, 6, 5, 7, 3, 9, 8, 4], [0, 1, 2, 6, 5, 7, 4, 3, 8, 9], [0, 1, 2, 6, 5, 7, 4, 3, 9, 8], [0, 1, 2, 6, 5, 7, 4, 8, 3, 9], [0, 1, 2, 6, 5, 7, 4, 8, 9, 3], [0, 1, 2, 6, 5, 7, 4, 9, 3, 8], [0, 1, 2, 6, 5, 7, 4, 9, 8, 3], [0, 1, 2, 6, 5, 7, 8, 3, 4, 9], [0, 1, 2, 6, 5, 7, 8, 3, 9, 4], [0, 1, 2, 6, 5, 7, 8, 4, 3, 9], [0, 1, 2, 6, 5, 7, 8, 4, 9, 3], [0, 1, 2, 6, 5, 7, 8, 9, 3, 4], [0, 1, 2, 6, 5, 7, 8, 9, 4, 3], [0, 1, 2, 6, 5, 7, 9, 3, 4, 8], [0, 1, 2, 6, 5, 7, 9, 3, 8, 4], [0, 1, 2, 6, 5, 7, 9, 4, 3, 8], [0, 1, 2, 6, 5, 7, 9, 4, 8, 3], [0, 1, 2, 6, 5, 7, 9, 8, 3, 4], [0, 1, 2, 6, 5, 7, 9, 8, 4, 3], [0, 1, 2, 6, 5, 8, 3, 4, 7, 9], [0, 1, 2, 6, 5, 8, 3, 7, 4, 9], [0, 1, 2, 6, 5, 8, 3, 7, 9, 4], [0, 1, 2, 6, 5, 8, 4, 3, 7, 9], [0, 1, 2, 6, 5, 8, 4, 7, 3, 9], [0, 1, 2, 6, 5, 8, 4, 7, 9, 3], [0, 1, 2, 6, 5, 8, 7, 3, 4, 9], [0, 1, 2, 6, 5, 8, 7, 3, 9, 4], [0, 1, 2, 6, 5, 8, 7, 4, 3, 9], [0, 1, 2, 6, 5, 8, 7, 4, 9, 3], [0, 1, 2, 6, 5, 8, 7, 9, 3, 4], [0, 1, 2, 6, 5, 8, 7, 9, 4, 3], [0, 1, 2, 6, 7, 3, 4, 5, 8, 9], [0, 1, 2, 6, 7, 3, 4, 5, 9, 8], [0, 1, 2, 6, 7, 3, 4, 9, 5, 8], [0, 1, 2, 6, 7, 3, 5, 4, 8, 9], [0, 1, 2, 6, 7, 3, 5, 4, 9, 8], [0, 1, 2, 6, 7, 3, 5, 8, 4, 9], [0, 1, 2, 6, 7, 3, 5, 8, 9, 4], [0, 1, 2, 6, 7, 3, 5, 9, 4, 8], [0, 1, 2, 6, 7, 3, 5, 9, 8, 4], [0, 1, 2, 6, 7, 3, 9, 4, 5, 8], [0, 1, 2, 6, 7, 3, 9, 5, 4, 8], [0, 1, 2, 6, 7, 3, 9, 5, 8, 4], [0, 1, 2, 6, 7, 4, 3, 5, 8, 9], [0, 1, 2, 6, 7, 4, 3, 5, 9, 8], [0, 1, 2, 6, 7, 4, 3, 9, 5, 8], [0, 1, 2, 6, 7, 4, 5, 3, 8, 9], [0, 1, 2, 6, 7, 4, 5, 3, 9, 8], [0, 1, 2, 6, 7, 4, 5, 8, 3, 9], [0, 1, 2, 6, 7, 4, 5, 8, 9, 3], [0, 1, 2, 6, 7, 4, 5, 9, 3, 8], [0, 1, 2, 6, 7, 4, 5, 9, 8, 3], [0, 1, 2, 6, 7, 4, 9, 3, 5, 8], [0, 1, 2, 6, 7, 4, 9, 5, 3, 8], [0, 1, 2, 6, 7, 4, 9, 5, 8, 3], [0, 1, 2, 6, 7, 5, 3, 4, 8, 9], [0, 1, 2, 6, 7, 5, 3, 4, 9, 8], [0, 1, 2, 6, 7, 5, 3, 8, 4, 9], [0, 1, 2, 6, 7, 5, 3, 8, 9, 4], [0, 1, 2, 6, 7, 5, 3, 9, 4, 8], [0, 1, 2, 6, 7, 5, 3, 9, 8, 4], [0, 1, 2, 6, 7, 5, 4, 3, 8, 9], [0, 1, 2, 6, 7, 5, 4, 3, 9, 8], [0, 1, 2, 6, 7, 5, 4, 8, 3, 9], [0, 1, 2, 6, 7, 5, 4, 8, 9, 3], [0, 1, 2, 6, 7, 5, 4, 9, 3, 8], [0, 1, 2, 6, 7, 5, 4, 9, 8, 3], [0, 1, 2, 6, 7, 5, 8, 3, 4, 9], [0, 1, 2, 6, 7, 5, 8, 3, 9, 4], [0, 1, 2, 6, 7, 5, 8, 4, 3, 9], [0, 1, 2, 6, 7, 5, 8, 4, 9, 3], [0, 1, 2, 6, 7, 5, 8, 9, 3, 4], [0, 1, 2, 6, 7, 5, 8, 9, 4, 3], [0, 1, 2, 6, 7, 5, 9, 3, 4, 8], [0, 1, 2, 6, 7, 5, 9, 3, 8, 4], [0, 1, 2, 6, 7, 5, 9, 4, 3, 8], [0, 1, 2, 6, 7, 5, 9, 4, 8, 3], [0, 1, 2, 6, 7, 5, 9, 8, 3, 4], [0, 1, 2, 6, 7, 5, 9, 8, 4, 3], [0, 1, 2, 6, 7, 9, 3, 4, 5, 8], [0, 1, 2, 6, 7, 9, 3, 5, 4, 8], [0, 1, 2, 6, 7, 9, 3, 5, 8, 4], [0, 1, 2, 6, 7, 9, 4, 3, 5, 8], [0, 1, 2, 6, 7, 9, 4, 5, 3, 8], [0, 1, 2, 6, 7, 9, 4, 5, 8, 3], [0, 1, 2, 6, 7, 9, 5, 3, 4, 8], [0, 1, 2, 6, 7, 9, 5, 3, 8, 4], [0, 1, 2, 6, 7, 9, 5, 4, 3, 8], [0, 1, 2, 6, 7, 9, 5, 4, 8, 3], [0, 1, 2, 6, 7, 9, 5, 8, 3, 4], [0, 1, 2, 6, 7, 9, 5, 8, 4, 3], [0, 2, 1, 3, 4, 5, 6, 7, 8, 9], [0, 2, 1, 3, 4, 5, 6, 7, 9, 8], [0, 2, 1, 3, 4, 5, 6, 8, 7, 9], [0, 2, 1, 3, 4, 6, 5, 7, 8, 9], [0, 2, 1, 3, 4, 6, 5, 7, 9, 8], [0, 2, 1, 3, 4, 6, 5, 8, 7, 9], [0, 2, 1, 3, 4, 6, 7, 5, 8, 9], [0, 2, 1, 3, 4, 6, 7, 5, 9, 8], [0, 2, 1, 3, 4, 6, 7, 9, 5, 8], [0, 2, 1, 3, 5, 4, 6, 7, 8, 9], [0, 2, 1, 3, 5, 4, 6, 7, 9, 8], [0, 2, 1, 3, 5, 4, 6, 8, 7, 9], [0, 2, 1, 3, 5, 6, 4, 7, 8, 9], [0, 2, 1, 3, 5, 6, 4, 7, 9, 8], [0, 2, 1, 3, 5, 6, 4, 8, 7, 9], [0, 2, 1, 3, 5, 6, 7, 4, 8, 9], [0, 2, 1, 3, 5, 6, 7, 4, 9, 8], [0, 2, 1, 3, 5, 6, 7, 8, 4, 9], [0, 2, 1, 3, 5, 6, 7, 8, 9, 4], [0, 2, 1, 3, 5, 6, 7, 9, 4, 8], [0, 2, 1, 3, 5, 6, 7, 9, 8, 4], [0, 2, 1, 3, 5, 6, 8, 4, 7, 9], [0, 2, 1, 3, 5, 6, 8, 7, 4, 9], [0, 2, 1, 3, 5, 6, 8, 7, 9, 4], [0, 2, 1, 3, 6, 4, 5, 7, 8, 9], [0, 2, 1, 3, 6, 4, 5, 7, 9, 8], [0, 2, 1, 3, 6, 4, 5, 8, 7, 9], [0, 2, 1, 3, 6, 4, 7, 5, 8, 9], [0, 2, 1, 3, 6, 4, 7, 5, 9, 8], [0, 2, 1, 3, 6, 4, 7, 9, 5, 8], [0, 2, 1, 3, 6, 5, 4, 7, 8, 9], [0, 2, 1, 3, 6, 5, 4, 7, 9, 8], [0, 2, 1, 3, 6, 5, 4, 8, 7, 9], [0, 2, 1, 3, 6, 5, 7, 4, 8, 9], [0, 2, 1, 3, 6, 5, 7, 4, 9, 8], [0, 2, 1, 3, 6, 5, 7, 8, 4, 9], [0, 2, 1, 3, 6, 5, 7, 8, 9, 4], [0, 2, 1, 3, 6, 5, 7, 9, 4, 8], [0, 2, 1, 3, 6, 5, 7, 9, 8, 4], [0, 2, 1, 3, 6, 5, 8, 4, 7, 9], [0, 2, 1, 3, 6, 5, 8, 7, 4, 9], [0, 2, 1, 3, 6, 5, 8, 7, 9, 4], [0, 2, 1, 3, 6, 7, 4, 5, 8, 9], [0, 2, 1, 3, 6, 7, 4, 5, 9, 8], [0, 2, 1, 3, 6, 7, 4, 9, 5, 8], [0, 2, 1, 3, 6, 7, 5, 4, 8, 9], [0, 2, 1, 3, 6, 7, 5, 4, 9, 8], [0, 2, 1, 3, 6, 7, 5, 8, 4, 9], [0, 2, 1, 3, 6, 7, 5, 8, 9, 4], [0, 2, 1, 3, 6, 7, 5, 9, 4, 8], [0, 2, 1, 3, 6, 7, 5, 9, 8, 4], [0, 2, 1, 3, 6, 7, 9, 4, 5, 8], [0, 2, 1, 3, 6, 7, 9, 5, 4, 8], [0, 2, 1, 3, 6, 7, 9, 5, 8, 4], [0, 2, 1, 4, 3, 5, 6, 7, 8, 9], [0, 2, 1, 4, 3, 5, 6, 7, 9, 8], [0, 2, 1, 4, 3, 5, 6, 8, 7, 9], [0, 2, 1, 4, 3, 6, 5, 7, 8, 9], [0, 2, 1, 4, 3, 6, 5, 7, 9, 8], [0, 2, 1, 4, 3, 6, 5, 8, 7, 9], [0, 2, 1, 4, 3, 6, 7, 5, 8, 9], [0, 2, 1, 4, 3, 6, 7, 5, 9, 8], [0, 2, 1, 4, 3, 6, 7, 9, 5, 8], [0, 2, 1, 4, 5, 3, 6, 7, 8, 9], [0, 2, 1, 4, 5, 3, 6, 7, 9, 8], [0, 2, 1, 4, 5, 3, 6, 8, 7, 9], [0, 2, 1, 4, 5, 6, 3, 7, 8, 9], [0, 2, 1, 4, 5, 6, 3, 7, 9, 8], [0, 2, 1, 4, 5, 6, 3, 8, 7, 9], [0, 2, 1, 4, 5, 6, 7, 3, 8, 9], [0, 2, 1, 4, 5, 6, 7, 3, 9, 8], [0, 2, 1, 4, 5, 6, 7, 8, 3, 9], [0, 2, 1, 4, 5, 6, 7, 8, 9, 3], [0, 2, 1, 4, 5, 6, 7, 9, 3, 8], [0, 2, 1, 4, 5, 6, 7, 9, 8, 3], [0, 2, 1, 4, 5, 6, 8, 3, 7, 9], [0, 2, 1, 4, 5, 6, 8, 7, 3, 9], [0, 2, 1, 4, 5, 6, 8, 7, 9, 3], [0, 2, 1, 4, 6, 3, 5, 7, 8, 9], [0, 2, 1, 4, 6, 3, 5, 7, 9, 8], [0, 2, 1, 4, 6, 3, 5, 8, 7, 9], [0, 2, 1, 4, 6, 3, 7, 5, 8, 9], [0, 2, 1, 4, 6, 3, 7, 5, 9, 8], [0, 2, 1, 4, 6, 3, 7, 9, 5, 8], [0, 2, 1, 4, 6, 5, 3, 7, 8, 9], [0, 2, 1, 4, 6, 5, 3, 7, 9, 8], [0, 2, 1, 4, 6, 5, 3, 8, 7, 9], [0, 2, 1, 4, 6, 5, 7, 3, 8, 9], [0, 2, 1, 4, 6, 5, 7, 3, 9, 8], [0, 2, 1, 4, 6, 5, 7, 8, 3, 9], [0, 2, 1, 4, 6, 5, 7, 8, 9, 3], [0, 2, 1, 4, 6, 5, 7, 9, 3, 8], [0, 2, 1, 4, 6, 5, 7, 9, 8, 3], [0, 2, 1, 4, 6, 5, 8, 3, 7, 9], [0, 2, 1, 4, 6, 5, 8, 7, 3, 9], [0, 2, 1, 4, 6, 5, 8, 7, 9, 3], [0, 2, 1, 4, 6, 7, 3, 5, 8, 9], [0, 2, 1, 4, 6, 7, 3, 5, 9, 8], [0, 2, 1, 4, 6, 7, 3, 9, 5, 8], [0, 2, 1, 4, 6, 7, 5, 3, 8, 9], [0, 2, 1, 4, 6, 7, 5, 3, 9, 8], [0, 2, 1, 4, 6, 7, 5, 8, 3, 9], [0, 2, 1, 4, 6, 7, 5, 8, 9, 3], [0, 2, 1, 4, 6, 7, 5, 9, 3, 8], [0, 2, 1, 4, 6, 7, 5, 9, 8, 3], [0, 2, 1, 4, 6, 7, 9, 3, 5, 8], [0, 2, 1, 4, 6, 7, 9, 5, 3, 8], [0, 2, 1, 4, 6, 7, 9, 5, 8, 3], [0, 2, 1, 5, 3, 4, 6, 7, 8, 9], [0, 2, 1, 5, 3, 4, 6, 7, 9, 8], [0, 2, 1, 5, 3, 4, 6, 8, 7, 9], [0, 2, 1, 5, 3, 6, 4, 7, 8, 9], [0, 2, 1, 5, 3, 6, 4, 7, 9, 8], [0, 2, 1, 5, 3, 6, 4, 8, 7, 9], [0, 2, 1, 5, 3, 6, 7, 4, 8, 9], [0, 2, 1, 5, 3, 6, 7, 4, 9, 8], [0, 2, 1, 5, 3, 6, 7, 8, 4, 9], [0, 2, 1, 5, 3, 6, 7, 8, 9, 4], [0, 2, 1, 5, 3, 6, 7, 9, 4, 8], [0, 2, 1, 5, 3, 6, 7, 9, 8, 4], [0, 2, 1, 5, 3, 6, 8, 4, 7, 9], [0, 2, 1, 5, 3, 6, 8, 7, 4, 9], [0, 2, 1, 5, 3, 6, 8, 7, 9, 4], [0, 2, 1, 5, 4, 3, 6, 7, 8, 9], [0, 2, 1, 5, 4, 3, 6, 7, 9, 8], [0, 2, 1, 5, 4, 3, 6, 8, 7, 9], [0, 2, 1, 5, 4, 6, 3, 7, 8, 9], [0, 2, 1, 5, 4, 6, 3, 7, 9, 8], [0, 2, 1, 5, 4, 6, 3, 8, 7, 9], [0, 2, 1, 5, 4, 6, 7, 3, 8, 9], [0, 2, 1, 5, 4, 6, 7, 3, 9, 8], [0, 2, 1, 5, 4, 6, 7, 8, 3, 9], [0, 2, 1, 5, 4, 6, 7, 8, 9, 3], [0, 2, 1, 5, 4, 6, 7, 9, 3, 8], [0, 2, 1, 5, 4, 6, 7, 9, 8, 3], [0, 2, 1, 5, 4, 6, 8, 3, 7, 9], [0, 2, 1, 5, 4, 6, 8, 7, 3, 9], [0, 2, 1, 5, 4, 6, 8, 7, 9, 3], [0, 2, 1, 5, 6, 3, 4, 7, 8, 9], [0, 2, 1, 5, 6, 3, 4, 7, 9, 8], [0, 2, 1, 5, 6, 3, 4, 8, 7, 9], [0, 2, 1, 5, 6, 3, 7, 4, 8, 9], [0, 2, 1, 5, 6, 3, 7, 4, 9, 8], [0, 2, 1, 5, 6, 3, 7, 8, 4, 9], [0, 2, 1, 5, 6, 3, 7, 8, 9, 4], [0, 2, 1, 5, 6, 3, 7, 9, 4, 8], [0, 2, 1, 5, 6, 3, 7, 9, 8, 4], [0, 2, 1, 5, 6, 3, 8, 4, 7, 9], [0, 2, 1, 5, 6, 3, 8, 7, 4, 9], [0, 2, 1, 5, 6, 3, 8, 7, 9, 4], [0, 2, 1, 5, 6, 4, 3, 7, 8, 9], [0, 2, 1, 5, 6, 4, 3, 7, 9, 8], [0, 2, 1, 5, 6, 4, 3, 8, 7, 9], [0, 2, 1, 5, 6, 4, 7, 3, 8, 9], [0, 2, 1, 5, 6, 4, 7, 3, 9, 8], [0, 2, 1, 5, 6, 4, 7, 8, 3, 9], [0, 2, 1, 5, 6, 4, 7, 8, 9, 3], [0, 2, 1, 5, 6, 4, 7, 9, 3, 8], [0, 2, 1, 5, 6, 4, 7, 9, 8, 3], [0, 2, 1, 5, 6, 4, 8, 3, 7, 9], [0, 2, 1, 5, 6, 4, 8, 7, 3, 9], [0, 2, 1, 5, 6, 4, 8, 7, 9, 3], [0, 2, 1, 5, 6, 7, 3, 4, 8, 9], [0, 2, 1, 5, 6, 7, 3, 4, 9, 8], [0, 2, 1, 5, 6, 7, 3, 8, 4, 9], [0, 2, 1, 5, 6, 7, 3, 8, 9, 4], [0, 2, 1, 5, 6, 7, 3, 9, 4, 8], [0, 2, 1, 5, 6, 7, 3, 9, 8, 4], [0, 2, 1, 5, 6, 7, 4, 3, 8, 9], [0, 2, 1, 5, 6, 7, 4, 3, 9, 8], [0, 2, 1, 5, 6, 7, 4, 8, 3, 9], [0, 2, 1, 5, 6, 7, 4, 8, 9, 3], [0, 2, 1, 5, 6, 7, 4, 9, 3, 8], [0, 2, 1, 5, 6, 7, 4, 9, 8, 3], [0, 2, 1, 5, 6, 7, 8, 3, 4, 9], [0, 2, 1, 5, 6, 7, 8, 3, 9, 4], [0, 2, 1, 5, 6, 7, 8, 4, 3, 9], [0, 2, 1, 5, 6, 7, 8, 4, 9, 3], [0, 2, 1, 5, 6, 7, 8, 9, 3, 4], [0, 2, 1, 5, 6, 7, 8, 9, 4, 3], [0, 2, 1, 5, 6, 7, 9, 3, 4, 8], [0, 2, 1, 5, 6, 7, 9, 3, 8, 4], [0, 2, 1, 5, 6, 7, 9, 4, 3, 8], [0, 2, 1, 5, 6, 7, 9, 4, 8, 3], [0, 2, 1, 5, 6, 7, 9, 8, 3, 4], [0, 2, 1, 5, 6, 7, 9, 8, 4, 3], [0, 2, 1, 5, 6, 8, 3, 4, 7, 9], [0, 2, 1, 5, 6, 8, 3, 7, 4, 9], [0, 2, 1, 5, 6, 8, 3, 7, 9, 4], [0, 2, 1, 5, 6, 8, 4, 3, 7, 9], [0, 2, 1, 5, 6, 8, 4, 7, 3, 9], [0, 2, 1, 5, 6, 8, 4, 7, 9, 3], [0, 2, 1, 5, 6, 8, 7, 3, 4, 9], [0, 2, 1, 5, 6, 8, 7, 3, 9, 4], [0, 2, 1, 5, 6, 8, 7, 4, 3, 9], [0, 2, 1, 5, 6, 8, 7, 4, 9, 3], [0, 2, 1, 5, 6, 8, 7, 9, 3, 4], [0, 2, 1, 5, 6, 8, 7, 9, 4, 3], [0, 2, 1, 6, 3, 4, 5, 7, 8, 9], [0, 2, 1, 6, 3, 4, 5, 7, 9, 8], [0, 2, 1, 6, 3, 4, 5, 8, 7, 9], [0, 2, 1, 6, 3, 4, 7, 5, 8, 9], [0, 2, 1, 6, 3, 4, 7, 5, 9, 8], [0, 2, 1, 6, 3, 4, 7, 9, 5, 8], [0, 2, 1, 6, 3, 5, 4, 7, 8, 9], [0, 2, 1, 6, 3, 5, 4, 7, 9, 8], [0, 2, 1, 6, 3, 5, 4, 8, 7, 9], [0, 2, 1, 6, 3, 5, 7, 4, 8, 9], [0, 2, 1, 6, 3, 5, 7, 4, 9, 8], [0, 2, 1, 6, 3, 5, 7, 8, 4, 9], [0, 2, 1, 6, 3, 5, 7, 8, 9, 4], [0, 2, 1, 6, 3, 5, 7, 9, 4, 8], [0, 2, 1, 6, 3, 5, 7, 9, 8, 4], [0, 2, 1, 6, 3, 5, 8, 4, 7, 9], [0, 2, 1, 6, 3, 5, 8, 7, 4, 9], [0, 2, 1, 6, 3, 5, 8, 7, 9, 4], [0, 2, 1, 6, 3, 7, 4, 5, 8, 9], [0, 2, 1, 6, 3, 7, 4, 5, 9, 8], [0, 2, 1, 6, 3, 7, 4, 9, 5, 8], [0, 2, 1, 6, 3, 7, 5, 4, 8, 9], [0, 2, 1, 6, 3, 7, 5, 4, 9, 8], [0, 2, 1, 6, 3, 7, 5, 8, 4, 9], [0, 2, 1, 6, 3, 7, 5, 8, 9, 4], [0, 2, 1, 6, 3, 7, 5, 9, 4, 8], [0, 2, 1, 6, 3, 7, 5, 9, 8, 4], [0, 2, 1, 6, 3, 7, 9, 4, 5, 8], [0, 2, 1, 6, 3, 7, 9, 5, 4, 8], [0, 2, 1, 6, 3, 7, 9, 5, 8, 4], [0, 2, 1, 6, 4, 3, 5, 7, 8, 9], [0, 2, 1, 6, 4, 3, 5, 7, 9, 8], [0, 2, 1, 6, 4, 3, 5, 8, 7, 9], [0, 2, 1, 6, 4, 3, 7, 5, 8, 9], [0, 2, 1, 6, 4, 3, 7, 5, 9, 8], [0, 2, 1, 6, 4, 3, 7, 9, 5, 8], [0, 2, 1, 6, 4, 5, 3, 7, 8, 9], [0, 2, 1, 6, 4, 5, 3, 7, 9, 8], [0, 2, 1, 6, 4, 5, 3, 8, 7, 9], [0, 2, 1, 6, 4, 5, 7, 3, 8, 9], [0, 2, 1, 6, 4, 5, 7, 3, 9, 8], [0, 2, 1, 6, 4, 5, 7, 8, 3, 9], [0, 2, 1, 6, 4, 5, 7, 8, 9, 3], [0, 2, 1, 6, 4, 5, 7, 9, 3, 8], [0, 2, 1, 6, 4, 5, 7, 9, 8, 3], [0, 2, 1, 6, 4, 5, 8, 3, 7, 9], [0, 2, 1, 6, 4, 5, 8, 7, 3, 9], [0, 2, 1, 6, 4, 5, 8, 7, 9, 3], [0, 2, 1, 6, 4, 7, 3, 5, 8, 9], [0, 2, 1, 6, 4, 7, 3, 5, 9, 8], [0, 2, 1, 6, 4, 7, 3, 9, 5, 8], [0, 2, 1, 6, 4, 7, 5, 3, 8, 9], [0, 2, 1, 6, 4, 7, 5, 3, 9, 8], [0, 2, 1, 6, 4, 7, 5, 8, 3, 9], [0, 2, 1, 6, 4, 7, 5, 8, 9, 3], [0, 2, 1, 6, 4, 7, 5, 9, 3, 8], [0, 2, 1, 6, 4, 7, 5, 9, 8, 3], [0, 2, 1, 6, 4, 7, 9, 3, 5, 8], [0, 2, 1, 6, 4, 7, 9, 5, 3, 8], [0, 2, 1, 6, 4, 7, 9, 5, 8, 3], [0, 2, 1, 6, 5, 3, 4, 7, 8, 9], [0, 2, 1, 6, 5, 3, 4, 7, 9, 8], [0, 2, 1, 6, 5, 3, 4, 8, 7, 9], [0, 2, 1, 6, 5, 3, 7, 4, 8, 9], [0, 2, 1, 6, 5, 3, 7, 4, 9, 8], [0, 2, 1, 6, 5, 3, 7, 8, 4, 9], [0, 2, 1, 6, 5, 3, 7, 8, 9, 4], [0, 2, 1, 6, 5, 3, 7, 9, 4, 8], [0, 2, 1, 6, 5, 3, 7, 9, 8, 4], [0, 2, 1, 6, 5, 3, 8, 4, 7, 9], [0, 2, 1, 6, 5, 3, 8, 7, 4, 9], [0, 2, 1, 6, 5, 3, 8, 7, 9, 4], [0, 2, 1, 6, 5, 4, 3, 7, 8, 9], [0, 2, 1, 6, 5, 4, 3, 7, 9, 8], [0, 2, 1, 6, 5, 4, 3, 8, 7, 9], [0, 2, 1, 6, 5, 4, 7, 3, 8, 9], [0, 2, 1, 6, 5, 4, 7, 3, 9, 8], [0, 2, 1, 6, 5, 4, 7, 8, 3, 9], [0, 2, 1, 6, 5, 4, 7, 8, 9, 3], [0, 2, 1, 6, 5, 4, 7, 9, 3, 8], [0, 2, 1, 6, 5, 4, 7, 9, 8, 3], [0, 2, 1, 6, 5, 4, 8, 3, 7, 9], [0, 2, 1, 6, 5, 4, 8, 7, 3, 9], [0, 2, 1, 6, 5, 4, 8, 7, 9, 3], [0, 2, 1, 6, 5, 7, 3, 4, 8, 9], [0, 2, 1, 6, 5, 7, 3, 4, 9, 8], [0, 2, 1, 6, 5, 7, 3, 8, 4, 9], [0, 2, 1, 6, 5, 7, 3, 8, 9, 4], [0, 2, 1, 6, 5, 7, 3, 9, 4, 8], [0, 2, 1, 6, 5, 7, 3, 9, 8, 4], [0, 2, 1, 6, 5, 7, 4, 3, 8, 9], [0, 2, 1, 6, 5, 7, 4, 3, 9, 8], [0, 2, 1, 6, 5, 7, 4, 8, 3, 9], [0, 2, 1, 6, 5, 7, 4, 8, 9, 3], [0, 2, 1, 6, 5, 7, 4, 9, 3, 8], [0, 2, 1, 6, 5, 7, 4, 9, 8, 3], [0, 2, 1, 6, 5, 7, 8, 3, 4, 9], [0, 2, 1, 6, 5, 7, 8, 3, 9, 4], [0, 2, 1, 6, 5, 7, 8, 4, 3, 9], [0, 2, 1, 6, 5, 7, 8, 4, 9, 3], [0, 2, 1, 6, 5, 7, 8, 9, 3, 4], [0, 2, 1, 6, 5, 7, 8, 9, 4, 3], [0, 2, 1, 6, 5, 7, 9, 3, 4, 8], [0, 2, 1, 6, 5, 7, 9, 3, 8, 4], [0, 2, 1, 6, 5, 7, 9, 4, 3, 8], [0, 2, 1, 6, 5, 7, 9, 4, 8, 3], [0, 2, 1, 6, 5, 7, 9, 8, 3, 4], [0, 2, 1, 6, 5, 7, 9, 8, 4, 3], [0, 2, 1, 6, 5, 8, 3, 4, 7, 9], [0, 2, 1, 6, 5, 8, 3, 7, 4, 9], [0, 2, 1, 6, 5, 8, 3, 7, 9, 4], [0, 2, 1, 6, 5, 8, 4, 3, 7, 9], [0, 2, 1, 6, 5, 8, 4, 7, 3, 9], [0, 2, 1, 6, 5, 8, 4, 7, 9, 3], [0, 2, 1, 6, 5, 8, 7, 3, 4, 9], [0, 2, 1, 6, 5, 8, 7, 3, 9, 4], [0, 2, 1, 6, 5, 8, 7, 4, 3, 9], [0, 2, 1, 6, 5, 8, 7, 4, 9, 3], [0, 2, 1, 6, 5, 8, 7, 9, 3, 4], [0, 2, 1, 6, 5, 8, 7, 9, 4, 3], [0, 2, 1, 6, 7, 3, 4, 5, 8, 9], [0, 2, 1, 6, 7, 3, 4, 5, 9, 8], [0, 2, 1, 6, 7, 3, 4, 9, 5, 8], [0, 2, 1, 6, 7, 3, 5, 4, 8, 9], [0, 2, 1, 6, 7, 3, 5, 4, 9, 8], [0, 2, 1, 6, 7, 3, 5, 8, 4, 9], [0, 2, 1, 6, 7, 3, 5, 8, 9, 4], [0, 2, 1, 6, 7, 3, 5, 9, 4, 8], [0, 2, 1, 6, 7, 3, 5, 9, 8, 4], [0, 2, 1, 6, 7, 3, 9, 4, 5, 8], [0, 2, 1, 6, 7, 3, 9, 5, 4, 8], [0, 2, 1, 6, 7, 3, 9, 5, 8, 4], [0, 2, 1, 6, 7, 4, 3, 5, 8, 9], [0, 2, 1, 6, 7, 4, 3, 5, 9, 8], [0, 2, 1, 6, 7, 4, 3, 9, 5, 8], [0, 2, 1, 6, 7, 4, 5, 3, 8, 9], [0, 2, 1, 6, 7, 4, 5, 3, 9, 8], [0, 2, 1, 6, 7, 4, 5, 8, 3, 9], [0, 2, 1, 6, 7, 4, 5, 8, 9, 3], [0, 2, 1, 6, 7, 4, 5, 9, 3, 8], [0, 2, 1, 6, 7, 4, 5, 9, 8, 3], [0, 2, 1, 6, 7, 4, 9, 3, 5, 8], [0, 2, 1, 6, 7, 4, 9, 5, 3, 8], [0, 2, 1, 6, 7, 4, 9, 5, 8, 3], [0, 2, 1, 6, 7, 5, 3, 4, 8, 9], [0, 2, 1, 6, 7, 5, 3, 4, 9, 8], [0, 2, 1, 6, 7, 5, 3, 8, 4, 9], [0, 2, 1, 6, 7, 5, 3, 8, 9, 4], [0, 2, 1, 6, 7, 5, 3, 9, 4, 8], [0, 2, 1, 6, 7, 5, 3, 9, 8, 4], [0, 2, 1, 6, 7, 5, 4, 3, 8, 9], [0, 2, 1, 6, 7, 5, 4, 3, 9, 8], [0, 2, 1, 6, 7, 5, 4, 8, 3, 9], [0, 2, 1, 6, 7, 5, 4, 8, 9, 3], [0, 2, 1, 6, 7, 5, 4, 9, 3, 8], [0, 2, 1, 6, 7, 5, 4, 9, 8, 3], [0, 2, 1, 6, 7, 5, 8, 3, 4, 9], [0, 2, 1, 6, 7, 5, 8, 3, 9, 4], [0, 2, 1, 6, 7, 5, 8, 4, 3, 9], [0, 2, 1, 6, 7, 5, 8, 4, 9, 3], [0, 2, 1, 6, 7, 5, 8, 9, 3, 4], [0, 2, 1, 6, 7, 5, 8, 9, 4, 3], [0, 2, 1, 6, 7, 5, 9, 3, 4, 8], [0, 2, 1, 6, 7, 5, 9, 3, 8, 4], [0, 2, 1, 6, 7, 5, 9, 4, 3, 8], [0, 2, 1, 6, 7, 5, 9, 4, 8, 3], [0, 2, 1, 6, 7, 5, 9, 8, 3, 4], [0, 2, 1, 6, 7, 5, 9, 8, 4, 3], [0, 2, 1, 6, 7, 9, 3, 4, 5, 8], [0, 2, 1, 6, 7, 9, 3, 5, 4, 8], [0, 2, 1, 6, 7, 9, 3, 5, 8, 4], [0, 2, 1, 6, 7, 9, 4, 3, 5, 8], [0, 2, 1, 6, 7, 9, 4, 5, 3, 8], [0, 2, 1, 6, 7, 9, 4, 5, 8, 3], [0, 2, 1, 6, 7, 9, 5, 3, 4, 8], [0, 2, 1, 6, 7, 9, 5, 3, 8, 4], [0, 2, 1, 6, 7, 9, 5, 4, 3, 8], [0, 2, 1, 6, 7, 9, 5, 4, 8, 3], [0, 2, 1, 6, 7, 9, 5, 8, 3, 4], [0, 2, 1, 6, 7, 9, 5, 8, 4, 3], [0, 2, 5, 1, 3, 4, 6, 7, 8, 9], [0, 2, 5, 1, 3, 4, 6, 7, 9, 8], [0, 2, 5, 1, 3, 4, 6, 8, 7, 9], [0, 2, 5, 1, 3, 6, 4, 7, 8, 9], [0, 2, 5, 1, 3, 6, 4, 7, 9, 8], [0, 2, 5, 1, 3, 6, 4, 8, 7, 9], [0, 2, 5, 1, 3, 6, 7, 4, 8, 9], [0, 2, 5, 1, 3, 6, 7, 4, 9, 8], [0, 2, 5, 1, 3, 6, 7, 8, 4, 9], [0, 2, 5, 1, 3, 6, 7, 8, 9, 4], [0, 2, 5, 1, 3, 6, 7, 9, 4, 8], [0, 2, 5, 1, 3, 6, 7, 9, 8, 4], [0, 2, 5, 1, 3, 6, 8, 4, 7, 9], [0, 2, 5, 1, 3, 6, 8, 7, 4, 9], [0, 2, 5, 1, 3, 6, 8, 7, 9, 4], [0, 2, 5, 1, 4, 3, 6, 7, 8, 9], [0, 2, 5, 1, 4, 3, 6, 7, 9, 8], [0, 2, 5, 1, 4, 3, 6, 8, 7, 9], [0, 2, 5, 1, 4, 6, 3, 7, 8, 9], [0, 2, 5, 1, 4, 6, 3, 7, 9, 8], [0, 2, 5, 1, 4, 6, 3, 8, 7, 9], [0, 2, 5, 1, 4, 6, 7, 3, 8, 9], [0, 2, 5, 1, 4, 6, 7, 3, 9, 8], [0, 2, 5, 1, 4, 6, 7, 8, 3, 9], [0, 2, 5, 1, 4, 6, 7, 8, 9, 3], [0, 2, 5, 1, 4, 6, 7, 9, 3, 8], [0, 2, 5, 1, 4, 6, 7, 9, 8, 3], [0, 2, 5, 1, 4, 6, 8, 3, 7, 9], [0, 2, 5, 1, 4, 6, 8, 7, 3, 9], [0, 2, 5, 1, 4, 6, 8, 7, 9, 3], [0, 2, 5, 1, 6, 3, 4, 7, 8, 9], [0, 2, 5, 1, 6, 3, 4, 7, 9, 8], [0, 2, 5, 1, 6, 3, 4, 8, 7, 9], [0, 2, 5, 1, 6, 3, 7, 4, 8, 9], [0, 2, 5, 1, 6, 3, 7, 4, 9, 8], [0, 2, 5, 1, 6, 3, 7, 8, 4, 9], [0, 2, 5, 1, 6, 3, 7, 8, 9, 4], [0, 2, 5, 1, 6, 3, 7, 9, 4, 8], [0, 2, 5, 1, 6, 3, 7, 9, 8, 4], [0, 2, 5, 1, 6, 3, 8, 4, 7, 9], [0, 2, 5, 1, 6, 3, 8, 7, 4, 9], [0, 2, 5, 1, 6, 3, 8, 7, 9, 4], [0, 2, 5, 1, 6, 4, 3, 7, 8, 9], [0, 2, 5, 1, 6, 4, 3, 7, 9, 8], [0, 2, 5, 1, 6, 4, 3, 8, 7, 9], [0, 2, 5, 1, 6, 4, 7, 3, 8, 9], [0, 2, 5, 1, 6, 4, 7, 3, 9, 8], [0, 2, 5, 1, 6, 4, 7, 8, 3, 9], [0, 2, 5, 1, 6, 4, 7, 8, 9, 3], [0, 2, 5, 1, 6, 4, 7, 9, 3, 8], [0, 2, 5, 1, 6, 4, 7, 9, 8, 3], [0, 2, 5, 1, 6, 4, 8, 3, 7, 9], [0, 2, 5, 1, 6, 4, 8, 7, 3, 9], [0, 2, 5, 1, 6, 4, 8, 7, 9, 3], [0, 2, 5, 1, 6, 7, 3, 4, 8, 9], [0, 2, 5, 1, 6, 7, 3, 4, 9, 8], [0, 2, 5, 1, 6, 7, 3, 8, 4, 9], [0, 2, 5, 1, 6, 7, 3, 8, 9, 4], [0, 2, 5, 1, 6, 7, 3, 9, 4, 8], [0, 2, 5, 1, 6, 7, 3, 9, 8, 4], [0, 2, 5, 1, 6, 7, 4, 3, 8, 9], [0, 2, 5, 1, 6, 7, 4, 3, 9, 8], [0, 2, 5, 1, 6, 7, 4, 8, 3, 9], [0, 2, 5, 1, 6, 7, 4, 8, 9, 3], [0, 2, 5, 1, 6, 7, 4, 9, 3, 8], [0, 2, 5, 1, 6, 7, 4, 9, 8, 3], [0, 2, 5, 1, 6, 7, 8, 3, 4, 9], [0, 2, 5, 1, 6, 7, 8, 3, 9, 4], [0, 2, 5, 1, 6, 7, 8, 4, 3, 9], [0, 2, 5, 1, 6, 7, 8, 4, 9, 3], [0, 2, 5, 1, 6, 7, 8, 9, 3, 4], [0, 2, 5, 1, 6, 7, 8, 9, 4, 3], [0, 2, 5, 1, 6, 7, 9, 3, 4, 8], [0, 2, 5, 1, 6, 7, 9, 3, 8, 4], [0, 2, 5, 1, 6, 7, 9, 4, 3, 8], [0, 2, 5, 1, 6, 7, 9, 4, 8, 3], [0, 2, 5, 1, 6, 7, 9, 8, 3, 4], [0, 2, 5, 1, 6, 7, 9, 8, 4, 3], [0, 2, 5, 1, 6, 8, 3, 4, 7, 9], [0, 2, 5, 1, 6, 8, 3, 7, 4, 9], [0, 2, 5, 1, 6, 8, 3, 7, 9, 4], [0, 2, 5, 1, 6, 8, 4, 3, 7, 9], [0, 2, 5, 1, 6, 8, 4, 7, 3, 9], [0, 2, 5, 1, 6, 8, 4, 7, 9, 3], [0, 2, 5, 1, 6, 8, 7, 3, 4, 9], [0, 2, 5, 1, 6, 8, 7, 3, 9, 4], [0, 2, 5, 1, 6, 8, 7, 4, 3, 9], [0, 2, 5, 1, 6, 8, 7, 4, 9, 3], [0, 2, 5, 1, 6, 8, 7, 9, 3, 4], [0, 2, 5, 1, 6, 8, 7, 9, 4, 3], [0, 2, 5, 6, 1, 3, 4, 7, 8, 9], [0, 2, 5, 6, 1, 3, 4, 7, 9, 8], [0, 2, 5, 6, 1, 3, 4, 8, 7, 9], [0, 2, 5, 6, 1, 3, 7, 4, 8, 9], [0, 2, 5, 6, 1, 3, 7, 4, 9, 8], [0, 2, 5, 6, 1, 3, 7, 8, 4, 9], [0, 2, 5, 6, 1, 3, 7, 8, 9, 4], [0, 2, 5, 6, 1, 3, 7, 9, 4, 8], [0, 2, 5, 6, 1, 3, 7, 9, 8, 4], [0, 2, 5, 6, 1, 3, 8, 4, 7, 9], [0, 2, 5, 6, 1, 3, 8, 7, 4, 9], [0, 2, 5, 6, 1, 3, 8, 7, 9, 4], [0, 2, 5, 6, 1, 4, 3, 7, 8, 9], [0, 2, 5, 6, 1, 4, 3, 7, 9, 8], [0, 2, 5, 6, 1, 4, 3, 8, 7, 9], [0, 2, 5, 6, 1, 4, 7, 3, 8, 9], [0, 2, 5, 6, 1, 4, 7, 3, 9, 8], [0, 2, 5, 6, 1, 4, 7, 8, 3, 9], [0, 2, 5, 6, 1, 4, 7, 8, 9, 3], [0, 2, 5, 6, 1, 4, 7, 9, 3, 8], [0, 2, 5, 6, 1, 4, 7, 9, 8, 3], [0, 2, 5, 6, 1, 4, 8, 3, 7, 9], [0, 2, 5, 6, 1, 4, 8, 7, 3, 9], [0, 2, 5, 6, 1, 4, 8, 7, 9, 3], [0, 2, 5, 6, 1, 7, 3, 4, 8, 9], [0, 2, 5, 6, 1, 7, 3, 4, 9, 8], [0, 2, 5, 6, 1, 7, 3, 8, 4, 9], [0, 2, 5, 6, 1, 7, 3, 8, 9, 4], [0, 2, 5, 6, 1, 7, 3, 9, 4, 8], [0, 2, 5, 6, 1, 7, 3, 9, 8, 4], [0, 2, 5, 6, 1, 7, 4, 3, 8, 9], [0, 2, 5, 6, 1, 7, 4, 3, 9, 8], [0, 2, 5, 6, 1, 7, 4, 8, 3, 9], [0, 2, 5, 6, 1, 7, 4, 8, 9, 3], [0, 2, 5, 6, 1, 7, 4, 9, 3, 8], [0, 2, 5, 6, 1, 7, 4, 9, 8, 3], [0, 2, 5, 6, 1, 7, 8, 3, 4, 9], [0, 2, 5, 6, 1, 7, 8, 3, 9, 4], [0, 2, 5, 6, 1, 7, 8, 4, 3, 9], [0, 2, 5, 6, 1, 7, 8, 4, 9, 3], [0, 2, 5, 6, 1, 7, 8, 9, 3, 4], [0, 2, 5, 6, 1, 7, 8, 9, 4, 3], [0, 2, 5, 6, 1, 7, 9, 3, 4, 8], [0, 2, 5, 6, 1, 7, 9, 3, 8, 4], [0, 2, 5, 6, 1, 7, 9, 4, 3, 8], [0, 2, 5, 6, 1, 7, 9, 4, 8, 3], [0, 2, 5, 6, 1, 7, 9, 8, 3, 4], [0, 2, 5, 6, 1, 7, 9, 8, 4, 3], [0, 2, 5, 6, 1, 8, 3, 4, 7, 9], [0, 2, 5, 6, 1, 8, 3, 7, 4, 9], [0, 2, 5, 6, 1, 8, 3, 7, 9, 4], [0, 2, 5, 6, 1, 8, 4, 3, 7, 9], [0, 2, 5, 6, 1, 8, 4, 7, 3, 9], [0, 2, 5, 6, 1, 8, 4, 7, 9, 3], [0, 2, 5, 6, 1, 8, 7, 3, 4, 9], [0, 2, 5, 6, 1, 8, 7, 3, 9, 4], [0, 2, 5, 6, 1, 8, 7, 4, 3, 9], [0, 2, 5, 6, 1, 8, 7, 4, 9, 3], [0, 2, 5, 6, 1, 8, 7, 9, 3, 4], [0, 2, 5, 6, 1, 8, 7, 9, 4, 3], [0, 2, 5, 6, 7, 1, 3, 4, 8, 9], [0, 2, 5, 6, 7, 1, 3, 4, 9, 8], [0, 2, 5, 6, 7, 1, 3, 8, 4, 9], [0, 2, 5, 6, 7, 1, 3, 8, 9, 4], [0, 2, 5, 6, 7, 1, 3, 9, 4, 8], [0, 2, 5, 6, 7, 1, 3, 9, 8, 4], [0, 2, 5, 6, 7, 1, 4, 3, 8, 9], [0, 2, 5, 6, 7, 1, 4, 3, 9, 8], [0, 2, 5, 6, 7, 1, 4, 8, 3, 9], [0, 2, 5, 6, 7, 1, 4, 8, 9, 3], [0, 2, 5, 6, 7, 1, 4, 9, 3, 8], [0, 2, 5, 6, 7, 1, 4, 9, 8, 3], [0, 2, 5, 6, 7, 1, 8, 3, 4, 9], [0, 2, 5, 6, 7, 1, 8, 3, 9, 4], [0, 2, 5, 6, 7, 1, 8, 4, 3, 9], [0, 2, 5, 6, 7, 1, 8, 4, 9, 3], [0, 2, 5, 6, 7, 1, 8, 9, 3, 4], [0, 2, 5, 6, 7, 1, 8, 9, 4, 3], [0, 2, 5, 6, 7, 1, 9, 3, 4, 8], [0, 2, 5, 6, 7, 1, 9, 3, 8, 4], [0, 2, 5, 6, 7, 1, 9, 4, 3, 8], [0, 2, 5, 6, 7, 1, 9, 4, 8, 3], [0, 2, 5, 6, 7, 1, 9, 8, 3, 4], [0, 2, 5, 6, 7, 1, 9, 8, 4, 3], [0, 2, 5, 6, 7, 8, 1, 3, 4, 9], [0, 2, 5, 6, 7, 8, 1, 3, 9, 4], [0, 2, 5, 6, 7, 8, 1, 4, 3, 9], [0, 2, 5, 6, 7, 8, 1, 4, 9, 3], [0, 2, 5, 6, 7, 8, 1, 9, 3, 4], [0, 2, 5, 6, 7, 8, 1, 9, 4, 3], [0, 2, 5, 6, 7, 8, 9, 1, 3, 4], [0, 2, 5, 6, 7, 8, 9, 1, 4, 3], [0, 2, 5, 6, 7, 9, 1, 3, 4, 8], [0, 2, 5, 6, 7, 9, 1, 3, 8, 4], [0, 2, 5, 6, 7, 9, 1, 4, 3, 8], [0, 2, 5, 6, 7, 9, 1, 4, 8, 3], [0, 2, 5, 6, 7, 9, 1, 8, 3, 4], [0, 2, 5, 6, 7, 9, 1, 8, 4, 3], [0, 2, 5, 6, 7, 9, 8, 1, 3, 4], [0, 2, 5, 6, 7, 9, 8, 1, 4, 3], [0, 2, 5, 6, 8, 1, 3, 4, 7, 9], [0, 2, 5, 6, 8, 1, 3, 7, 4, 9], [0, 2, 5, 6, 8, 1, 3, 7, 9, 4], [0, 2, 5, 6, 8, 1, 4, 3, 7, 9], [0, 2, 5, 6, 8, 1, 4, 7, 3, 9], [0, 2, 5, 6, 8, 1, 4, 7, 9, 3], [0, 2, 5, 6, 8, 1, 7, 3, 4, 9], [0, 2, 5, 6, 8, 1, 7, 3, 9, 4], [0, 2, 5, 6, 8, 1, 7, 4, 3, 9], [0, 2, 5, 6, 8, 1, 7, 4, 9, 3], [0, 2, 5, 6, 8, 1, 7, 9, 3, 4], [0, 2, 5, 6, 8, 1, 7, 9, 4, 3], [0, 2, 5, 6, 8, 7, 1, 3, 4, 9], [0, 2, 5, 6, 8, 7, 1, 3, 9, 4], [0, 2, 5, 6, 8, 7, 1, 4, 3, 9], [0, 2, 5, 6, 8, 7, 1, 4, 9, 3], [0, 2, 5, 6, 8, 7, 1, 9, 3, 4], [0, 2, 5, 6, 8, 7, 1, 9, 4, 3], [0, 2, 5, 6, 8, 7, 9, 1, 3, 4], [0, 2, 5, 6, 8, 7, 9, 1, 4, 3], [0, 2, 6, 1, 3, 4, 5, 7, 8, 9], [0, 2, 6, 1, 3, 4, 5, 7, 9, 8], [0, 2, 6, 1, 3, 4, 5, 8, 7, 9], [0, 2, 6, 1, 3, 4, 7, 5, 8, 9], [0, 2, 6, 1, 3, 4, 7, 5, 9, 8], [0, 2, 6, 1, 3, 4, 7, 9, 5, 8], [0, 2, 6, 1, 3, 5, 4, 7, 8, 9], [0, 2, 6, 1, 3, 5, 4, 7, 9, 8], [0, 2, 6, 1, 3, 5, 4, 8, 7, 9], [0, 2, 6, 1, 3, 5, 7, 4, 8, 9], [0, 2, 6, 1, 3, 5, 7, 4, 9, 8], [0, 2, 6, 1, 3, 5, 7, 8, 4, 9], [0, 2, 6, 1, 3, 5, 7, 8, 9, 4], [0, 2, 6, 1, 3, 5, 7, 9, 4, 8], [0, 2, 6, 1, 3, 5, 7, 9, 8, 4], [0, 2, 6, 1, 3, 5, 8, 4, 7, 9], [0, 2, 6, 1, 3, 5, 8, 7, 4, 9], [0, 2, 6, 1, 3, 5, 8, 7, 9, 4], [0, 2, 6, 1, 3, 7, 4, 5, 8, 9], [0, 2, 6, 1, 3, 7, 4, 5, 9, 8], [0, 2, 6, 1, 3, 7, 4, 9, 5, 8], [0, 2, 6, 1, 3, 7, 5, 4, 8, 9], [0, 2, 6, 1, 3, 7, 5, 4, 9, 8], [0, 2, 6, 1, 3, 7, 5, 8, 4, 9], [0, 2, 6, 1, 3, 7, 5, 8, 9, 4], [0, 2, 6, 1, 3, 7, 5, 9, 4, 8], [0, 2, 6, 1, 3, 7, 5, 9, 8, 4], [0, 2, 6, 1, 3, 7, 9, 4, 5, 8], [0, 2, 6, 1, 3, 7, 9, 5, 4, 8], [0, 2, 6, 1, 3, 7, 9, 5, 8, 4], [0, 2, 6, 1, 4, 3, 5, 7, 8, 9], [0, 2, 6, 1, 4, 3, 5, 7, 9, 8], [0, 2, 6, 1, 4, 3, 5, 8, 7, 9], [0, 2, 6, 1, 4, 3, 7, 5, 8, 9], [0, 2, 6, 1, 4, 3, 7, 5, 9, 8], [0, 2, 6, 1, 4, 3, 7, 9, 5, 8], [0, 2, 6, 1, 4, 5, 3, 7, 8, 9], [0, 2, 6, 1, 4, 5, 3, 7, 9, 8], [0, 2, 6, 1, 4, 5, 3, 8, 7, 9], [0, 2, 6, 1, 4, 5, 7, 3, 8, 9], [0, 2, 6, 1, 4, 5, 7, 3, 9, 8], [0, 2, 6, 1, 4, 5, 7, 8, 3, 9], [0, 2, 6, 1, 4, 5, 7, 8, 9, 3], [0, 2, 6, 1, 4, 5, 7, 9, 3, 8], [0, 2, 6, 1, 4, 5, 7, 9, 8, 3], [0, 2, 6, 1, 4, 5, 8, 3, 7, 9], [0, 2, 6, 1, 4, 5, 8, 7, 3, 9], [0, 2, 6, 1, 4, 5, 8, 7, 9, 3], [0, 2, 6, 1, 4, 7, 3, 5, 8, 9], [0, 2, 6, 1, 4, 7, 3, 5, 9, 8], [0, 2, 6, 1, 4, 7, 3, 9, 5, 8], [0, 2, 6, 1, 4, 7, 5, 3, 8, 9], [0, 2, 6, 1, 4, 7, 5, 3, 9, 8], [0, 2, 6, 1, 4, 7, 5, 8, 3, 9], [0, 2, 6, 1, 4, 7, 5, 8, 9, 3], [0, 2, 6, 1, 4, 7, 5, 9, 3, 8], [0, 2, 6, 1, 4, 7, 5, 9, 8, 3], [0, 2, 6, 1, 4, 7, 9, 3, 5, 8], [0, 2, 6, 1, 4, 7, 9, 5, 3, 8], [0, 2, 6, 1, 4, 7, 9, 5, 8, 3], [0, 2, 6, 1, 5, 3, 4, 7, 8, 9], [0, 2, 6, 1, 5, 3, 4, 7, 9, 8], [0, 2, 6, 1, 5, 3, 4, 8, 7, 9], [0, 2, 6, 1, 5, 3, 7, 4, 8, 9], [0, 2, 6, 1, 5, 3, 7, 4, 9, 8], [0, 2, 6, 1, 5, 3, 7, 8, 4, 9], [0, 2, 6, 1, 5, 3, 7, 8, 9, 4], [0, 2, 6, 1, 5, 3, 7, 9, 4, 8], [0, 2, 6, 1, 5, 3, 7, 9, 8, 4], [0, 2, 6, 1, 5, 3, 8, 4, 7, 9], [0, 2, 6, 1, 5, 3, 8, 7, 4, 9], [0, 2, 6, 1, 5, 3, 8, 7, 9, 4], [0, 2, 6, 1, 5, 4, 3, 7, 8, 9], [0, 2, 6, 1, 5, 4, 3, 7, 9, 8], [0, 2, 6, 1, 5, 4, 3, 8, 7, 9], [0, 2, 6, 1, 5, 4, 7, 3, 8, 9], [0, 2, 6, 1, 5, 4, 7, 3, 9, 8], [0, 2, 6, 1, 5, 4, 7, 8, 3, 9], [0, 2, 6, 1, 5, 4, 7, 8, 9, 3], [0, 2, 6, 1, 5, 4, 7, 9, 3, 8], [0, 2, 6, 1, 5, 4, 7, 9, 8, 3], [0, 2, 6, 1, 5, 4, 8, 3, 7, 9], [0, 2, 6, 1, 5, 4, 8, 7, 3, 9], [0, 2, 6, 1, 5, 4, 8, 7, 9, 3], [0, 2, 6, 1, 5, 7, 3, 4, 8, 9], [0, 2, 6, 1, 5, 7, 3, 4, 9, 8], [0, 2, 6, 1, 5, 7, 3, 8, 4, 9], [0, 2, 6, 1, 5, 7, 3, 8, 9, 4], [0, 2, 6, 1, 5, 7, 3, 9, 4, 8], [0, 2, 6, 1, 5, 7, 3, 9, 8, 4], [0, 2, 6, 1, 5, 7, 4, 3, 8, 9], [0, 2, 6, 1, 5, 7, 4, 3, 9, 8], [0, 2, 6, 1, 5, 7, 4, 8, 3, 9], [0, 2, 6, 1, 5, 7, 4, 8, 9, 3], [0, 2, 6, 1, 5, 7, 4, 9, 3, 8], [0, 2, 6, 1, 5, 7, 4, 9, 8, 3], [0, 2, 6, 1, 5, 7, 8, 3, 4, 9], [0, 2, 6, 1, 5, 7, 8, 3, 9, 4], [0, 2, 6, 1, 5, 7, 8, 4, 3, 9], [0, 2, 6, 1, 5, 7, 8, 4, 9, 3], [0, 2, 6, 1, 5, 7, 8, 9, 3, 4], [0, 2, 6, 1, 5, 7, 8, 9, 4, 3], [0, 2, 6, 1, 5, 7, 9, 3, 4, 8], [0, 2, 6, 1, 5, 7, 9, 3, 8, 4], [0, 2, 6, 1, 5, 7, 9, 4, 3, 8], [0, 2, 6, 1, 5, 7, 9, 4, 8, 3], [0, 2, 6, 1, 5, 7, 9, 8, 3, 4], [0, 2, 6, 1, 5, 7, 9, 8, 4, 3], [0, 2, 6, 1, 5, 8, 3, 4, 7, 9], [0, 2, 6, 1, 5, 8, 3, 7, 4, 9], [0, 2, 6, 1, 5, 8, 3, 7, 9, 4], [0, 2, 6, 1, 5, 8, 4, 3, 7, 9], [0, 2, 6, 1, 5, 8, 4, 7, 3, 9], [0, 2, 6, 1, 5, 8, 4, 7, 9, 3], [0, 2, 6, 1, 5, 8, 7, 3, 4, 9], [0, 2, 6, 1, 5, 8, 7, 3, 9, 4], [0, 2, 6, 1, 5, 8, 7, 4, 3, 9], [0, 2, 6, 1, 5, 8, 7, 4, 9, 3], [0, 2, 6, 1, 5, 8, 7, 9, 3, 4], [0, 2, 6, 1, 5, 8, 7, 9, 4, 3], [0, 2, 6, 1, 7, 3, 4, 5, 8, 9], [0, 2, 6, 1, 7, 3, 4, 5, 9, 8], [0, 2, 6, 1, 7, 3, 4, 9, 5, 8], [0, 2, 6, 1, 7, 3, 5, 4, 8, 9], [0, 2, 6, 1, 7, 3, 5, 4, 9, 8], [0, 2, 6, 1, 7, 3, 5, 8, 4, 9], [0, 2, 6, 1, 7, 3, 5, 8, 9, 4], [0, 2, 6, 1, 7, 3, 5, 9, 4, 8], [0, 2, 6, 1, 7, 3, 5, 9, 8, 4], [0, 2, 6, 1, 7, 3, 9, 4, 5, 8], [0, 2, 6, 1, 7, 3, 9, 5, 4, 8], [0, 2, 6, 1, 7, 3, 9, 5, 8, 4], [0, 2, 6, 1, 7, 4, 3, 5, 8, 9], [0, 2, 6, 1, 7, 4, 3, 5, 9, 8], [0, 2, 6, 1, 7, 4, 3, 9, 5, 8], [0, 2, 6, 1, 7, 4, 5, 3, 8, 9], [0, 2, 6, 1, 7, 4, 5, 3, 9, 8], [0, 2, 6, 1, 7, 4, 5, 8, 3, 9], [0, 2, 6, 1, 7, 4, 5, 8, 9, 3], [0, 2, 6, 1, 7, 4, 5, 9, 3, 8], [0, 2, 6, 1, 7, 4, 5, 9, 8, 3], [0, 2, 6, 1, 7, 4, 9, 3, 5, 8], [0, 2, 6, 1, 7, 4, 9, 5, 3, 8], [0, 2, 6, 1, 7, 4, 9, 5, 8, 3], [0, 2, 6, 1, 7, 5, 3, 4, 8, 9], [0, 2, 6, 1, 7, 5, 3, 4, 9, 8], [0, 2, 6, 1, 7, 5, 3, 8, 4, 9], [0, 2, 6, 1, 7, 5, 3, 8, 9, 4], [0, 2, 6, 1, 7, 5, 3, 9, 4, 8], [0, 2, 6, 1, 7, 5, 3, 9, 8, 4], [0, 2, 6, 1, 7, 5, 4, 3, 8, 9], [0, 2, 6, 1, 7, 5, 4, 3, 9, 8], [0, 2, 6, 1, 7, 5, 4, 8, 3, 9], [0, 2, 6, 1, 7, 5, 4, 8, 9, 3], [0, 2, 6, 1, 7, 5, 4, 9, 3, 8], [0, 2, 6, 1, 7, 5, 4, 9, 8, 3], [0, 2, 6, 1, 7, 5, 8, 3, 4, 9], [0, 2, 6, 1, 7, 5, 8, 3, 9, 4], [0, 2, 6, 1, 7, 5, 8, 4, 3, 9], [0, 2, 6, 1, 7, 5, 8, 4, 9, 3], [0, 2, 6, 1, 7, 5, 8, 9, 3, 4], [0, 2, 6, 1, 7, 5, 8, 9, 4, 3], [0, 2, 6, 1, 7, 5, 9, 3, 4, 8], [0, 2, 6, 1, 7, 5, 9, 3, 8, 4], [0, 2, 6, 1, 7, 5, 9, 4, 3, 8], [0, 2, 6, 1, 7, 5, 9, 4, 8, 3], [0, 2, 6, 1, 7, 5, 9, 8, 3, 4], [0, 2, 6, 1, 7, 5, 9, 8, 4, 3], [0, 2, 6, 1, 7, 9, 3, 4, 5, 8], [0, 2, 6, 1, 7, 9, 3, 5, 4, 8], [0, 2, 6, 1, 7, 9, 3, 5, 8, 4], [0, 2, 6, 1, 7, 9, 4, 3, 5, 8], [0, 2, 6, 1, 7, 9, 4, 5, 3, 8], [0, 2, 6, 1, 7, 9, 4, 5, 8, 3], [0, 2, 6, 1, 7, 9, 5, 3, 4, 8], [0, 2, 6, 1, 7, 9, 5, 3, 8, 4], [0, 2, 6, 1, 7, 9, 5, 4, 3, 8], [0, 2, 6, 1, 7, 9, 5, 4, 8, 3], [0, 2, 6, 1, 7, 9, 5, 8, 3, 4], [0, 2, 6, 1, 7, 9, 5, 8, 4, 3], [0, 2, 6, 5, 1, 3, 4, 7, 8, 9], [0, 2, 6, 5, 1, 3, 4, 7, 9, 8], [0, 2, 6, 5, 1, 3, 4, 8, 7, 9], [0, 2, 6, 5, 1, 3, 7, 4, 8, 9], [0, 2, 6, 5, 1, 3, 7, 4, 9, 8], [0, 2, 6, 5, 1, 3, 7, 8, 4, 9], [0, 2, 6, 5, 1, 3, 7, 8, 9, 4], [0, 2, 6, 5, 1, 3, 7, 9, 4, 8], [0, 2, 6, 5, 1, 3, 7, 9, 8, 4], [0, 2, 6, 5, 1, 3, 8, 4, 7, 9], [0, 2, 6, 5, 1, 3, 8, 7, 4, 9], [0, 2, 6, 5, 1, 3, 8, 7, 9, 4], [0, 2, 6, 5, 1, 4, 3, 7, 8, 9], [0, 2, 6, 5, 1, 4, 3, 7, 9, 8], [0, 2, 6, 5, 1, 4, 3, 8, 7, 9], [0, 2, 6, 5, 1, 4, 7, 3, 8, 9], [0, 2, 6, 5, 1, 4, 7, 3, 9, 8], [0, 2, 6, 5, 1, 4, 7, 8, 3, 9], [0, 2, 6, 5, 1, 4, 7, 8, 9, 3], [0, 2, 6, 5, 1, 4, 7, 9, 3, 8], [0, 2, 6, 5, 1, 4, 7, 9, 8, 3], [0, 2, 6, 5, 1, 4, 8, 3, 7, 9], [0, 2, 6, 5, 1, 4, 8, 7, 3, 9], [0, 2, 6, 5, 1, 4, 8, 7, 9, 3], [0, 2, 6, 5, 1, 7, 3, 4, 8, 9], [0, 2, 6, 5, 1, 7, 3, 4, 9, 8], [0, 2, 6, 5, 1, 7, 3, 8, 4, 9], [0, 2, 6, 5, 1, 7, 3, 8, 9, 4], [0, 2, 6, 5, 1, 7, 3, 9, 4, 8], [0, 2, 6, 5, 1, 7, 3, 9, 8, 4], [0, 2, 6, 5, 1, 7, 4, 3, 8, 9], [0, 2, 6, 5, 1, 7, 4, 3, 9, 8], [0, 2, 6, 5, 1, 7, 4, 8, 3, 9], [0, 2, 6, 5, 1, 7, 4, 8, 9, 3], [0, 2, 6, 5, 1, 7, 4, 9, 3, 8], [0, 2, 6, 5, 1, 7, 4, 9, 8, 3], [0, 2, 6, 5, 1, 7, 8, 3, 4, 9], [0, 2, 6, 5, 1, 7, 8, 3, 9, 4], [0, 2, 6, 5, 1, 7, 8, 4, 3, 9], [0, 2, 6, 5, 1, 7, 8, 4, 9, 3], [0, 2, 6, 5, 1, 7, 8, 9, 3, 4], [0, 2, 6, 5, 1, 7, 8, 9, 4, 3], [0, 2, 6, 5, 1, 7, 9, 3, 4, 8], [0, 2, 6, 5, 1, 7, 9, 3, 8, 4], [0, 2, 6, 5, 1, 7, 9, 4, 3, 8], [0, 2, 6, 5, 1, 7, 9, 4, 8, 3], [0, 2, 6, 5, 1, 7, 9, 8, 3, 4], [0, 2, 6, 5, 1, 7, 9, 8, 4, 3], [0, 2, 6, 5, 1, 8, 3, 4, 7, 9], [0, 2, 6, 5, 1, 8, 3, 7, 4, 9], [0, 2, 6, 5, 1, 8, 3, 7, 9, 4], [0, 2, 6, 5, 1, 8, 4, 3, 7, 9], [0, 2, 6, 5, 1, 8, 4, 7, 3, 9], [0, 2, 6, 5, 1, 8, 4, 7, 9, 3], [0, 2, 6, 5, 1, 8, 7, 3, 4, 9], [0, 2, 6, 5, 1, 8, 7, 3, 9, 4], [0, 2, 6, 5, 1, 8, 7, 4, 3, 9], [0, 2, 6, 5, 1, 8, 7, 4, 9, 3], [0, 2, 6, 5, 1, 8, 7, 9, 3, 4], [0, 2, 6, 5, 1, 8, 7, 9, 4, 3], [0, 2, 6, 5, 7, 1, 3, 4, 8, 9], [0, 2, 6, 5, 7, 1, 3, 4, 9, 8], [0, 2, 6, 5, 7, 1, 3, 8, 4, 9], [0, 2, 6, 5, 7, 1, 3, 8, 9, 4], [0, 2, 6, 5, 7, 1, 3, 9, 4, 8], [0, 2, 6, 5, 7, 1, 3, 9, 8, 4], [0, 2, 6, 5, 7, 1, 4, 3, 8, 9], [0, 2, 6, 5, 7, 1, 4, 3, 9, 8], [0, 2, 6, 5, 7, 1, 4, 8, 3, 9], [0, 2, 6, 5, 7, 1, 4, 8, 9, 3], [0, 2, 6, 5, 7, 1, 4, 9, 3, 8], [0, 2, 6, 5, 7, 1, 4, 9, 8, 3], [0, 2, 6, 5, 7, 1, 8, 3, 4, 9], [0, 2, 6, 5, 7, 1, 8, 3, 9, 4], [0, 2, 6, 5, 7, 1, 8, 4, 3, 9], [0, 2, 6, 5, 7, 1, 8, 4, 9, 3], [0, 2, 6, 5, 7, 1, 8, 9, 3, 4], [0, 2, 6, 5, 7, 1, 8, 9, 4, 3], [0, 2, 6, 5, 7, 1, 9, 3, 4, 8], [0, 2, 6, 5, 7, 1, 9, 3, 8, 4], [0, 2, 6, 5, 7, 1, 9, 4, 3, 8], [0, 2, 6, 5, 7, 1, 9, 4, 8, 3], [0, 2, 6, 5, 7, 1, 9, 8, 3, 4], [0, 2, 6, 5, 7, 1, 9, 8, 4, 3], [0, 2, 6, 5, 7, 8, 1, 3, 4, 9], [0, 2, 6, 5, 7, 8, 1, 3, 9, 4], [0, 2, 6, 5, 7, 8, 1, 4, 3, 9], [0, 2, 6, 5, 7, 8, 1, 4, 9, 3], [0, 2, 6, 5, 7, 8, 1, 9, 3, 4], [0, 2, 6, 5, 7, 8, 1, 9, 4, 3], [0, 2, 6, 5, 7, 8, 9, 1, 3, 4], [0, 2, 6, 5, 7, 8, 9, 1, 4, 3], [0, 2, 6, 5, 7, 9, 1, 3, 4, 8], [0, 2, 6, 5, 7, 9, 1, 3, 8, 4], [0, 2, 6, 5, 7, 9, 1, 4, 3, 8], [0, 2, 6, 5, 7, 9, 1, 4, 8, 3], [0, 2, 6, 5, 7, 9, 1, 8, 3, 4], [0, 2, 6, 5, 7, 9, 1, 8, 4, 3], [0, 2, 6, 5, 7, 9, 8, 1, 3, 4], [0, 2, 6, 5, 7, 9, 8, 1, 4, 3], [0, 2, 6, 5, 8, 1, 3, 4, 7, 9], [0, 2, 6, 5, 8, 1, 3, 7, 4, 9], [0, 2, 6, 5, 8, 1, 3, 7, 9, 4], [0, 2, 6, 5, 8, 1, 4, 3, 7, 9], [0, 2, 6, 5, 8, 1, 4, 7, 3, 9], [0, 2, 6, 5, 8, 1, 4, 7, 9, 3], [0, 2, 6, 5, 8, 1, 7, 3, 4, 9], [0, 2, 6, 5, 8, 1, 7, 3, 9, 4], [0, 2, 6, 5, 8, 1, 7, 4, 3, 9], [0, 2, 6, 5, 8, 1, 7, 4, 9, 3], [0, 2, 6, 5, 8, 1, 7, 9, 3, 4], [0, 2, 6, 5, 8, 1, 7, 9, 4, 3], [0, 2, 6, 5, 8, 7, 1, 3, 4, 9], [0, 2, 6, 5, 8, 7, 1, 3, 9, 4], [0, 2, 6, 5, 8, 7, 1, 4, 3, 9], [0, 2, 6, 5, 8, 7, 1, 4, 9, 3], [0, 2, 6, 5, 8, 7, 1, 9, 3, 4], [0, 2, 6, 5, 8, 7, 1, 9, 4, 3], [0, 2, 6, 5, 8, 7, 9, 1, 3, 4], [0, 2, 6, 5, 8, 7, 9, 1, 4, 3], [0, 2, 6, 7, 1, 3, 4, 5, 8, 9], [0, 2, 6, 7, 1, 3, 4, 5, 9, 8], [0, 2, 6, 7, 1, 3, 4, 9, 5, 8], [0, 2, 6, 7, 1, 3, 5, 4, 8, 9], [0, 2, 6, 7, 1, 3, 5, 4, 9, 8], [0, 2, 6, 7, 1, 3, 5, 8, 4, 9], [0, 2, 6, 7, 1, 3, 5, 8, 9, 4], [0, 2, 6, 7, 1, 3, 5, 9, 4, 8], [0, 2, 6, 7, 1, 3, 5, 9, 8, 4], [0, 2, 6, 7, 1, 3, 9, 4, 5, 8], [0, 2, 6, 7, 1, 3, 9, 5, 4, 8], [0, 2, 6, 7, 1, 3, 9, 5, 8, 4], [0, 2, 6, 7, 1, 4, 3, 5, 8, 9], [0, 2, 6, 7, 1, 4, 3, 5, 9, 8], [0, 2, 6, 7, 1, 4, 3, 9, 5, 8], [0, 2, 6, 7, 1, 4, 5, 3, 8, 9], [0, 2, 6, 7, 1, 4, 5, 3, 9, 8], [0, 2, 6, 7, 1, 4, 5, 8, 3, 9], [0, 2, 6, 7, 1, 4, 5, 8, 9, 3], [0, 2, 6, 7, 1, 4, 5, 9, 3, 8], [0, 2, 6, 7, 1, 4, 5, 9, 8, 3], [0, 2, 6, 7, 1, 4, 9, 3, 5, 8], [0, 2, 6, 7, 1, 4, 9, 5, 3, 8], [0, 2, 6, 7, 1, 4, 9, 5, 8, 3], [0, 2, 6, 7, 1, 5, 3, 4, 8, 9], [0, 2, 6, 7, 1, 5, 3, 4, 9, 8], [0, 2, 6, 7, 1, 5, 3, 8, 4, 9], [0, 2, 6, 7, 1, 5, 3, 8, 9, 4], [0, 2, 6, 7, 1, 5, 3, 9, 4, 8], [0, 2, 6, 7, 1, 5, 3, 9, 8, 4], [0, 2, 6, 7, 1, 5, 4, 3, 8, 9], [0, 2, 6, 7, 1, 5, 4, 3, 9, 8], [0, 2, 6, 7, 1, 5, 4, 8, 3, 9], [0, 2, 6, 7, 1, 5, 4, 8, 9, 3], [0, 2, 6, 7, 1, 5, 4, 9, 3, 8], [0, 2, 6, 7, 1, 5, 4, 9, 8, 3], [0, 2, 6, 7, 1, 5, 8, 3, 4, 9], [0, 2, 6, 7, 1, 5, 8, 3, 9, 4], [0, 2, 6, 7, 1, 5, 8, 4, 3, 9], [0, 2, 6, 7, 1, 5, 8, 4, 9, 3], [0, 2, 6, 7, 1, 5, 8, 9, 3, 4], [0, 2, 6, 7, 1, 5, 8, 9, 4, 3], [0, 2, 6, 7, 1, 5, 9, 3, 4, 8], [0, 2, 6, 7, 1, 5, 9, 3, 8, 4], [0, 2, 6, 7, 1, 5, 9, 4, 3, 8], [0, 2, 6, 7, 1, 5, 9, 4, 8, 3], [0, 2, 6, 7, 1, 5, 9, 8, 3, 4], [0, 2, 6, 7, 1, 5, 9, 8, 4, 3], [0, 2, 6, 7, 1, 9, 3, 4, 5, 8], [0, 2, 6, 7, 1, 9, 3, 5, 4, 8], [0, 2, 6, 7, 1, 9, 3, 5, 8, 4], [0, 2, 6, 7, 1, 9, 4, 3, 5, 8], [0, 2, 6, 7, 1, 9, 4, 5, 3, 8], [0, 2, 6, 7, 1, 9, 4, 5, 8, 3], [0, 2, 6, 7, 1, 9, 5, 3, 4, 8], [0, 2, 6, 7, 1, 9, 5, 3, 8, 4], [0, 2, 6, 7, 1, 9, 5, 4, 3, 8], [0, 2, 6, 7, 1, 9, 5, 4, 8, 3], [0, 2, 6, 7, 1, 9, 5, 8, 3, 4], [0, 2, 6, 7, 1, 9, 5, 8, 4, 3], [0, 2, 6, 7, 5, 1, 3, 4, 8, 9], [0, 2, 6, 7, 5, 1, 3, 4, 9, 8], [0, 2, 6, 7, 5, 1, 3, 8, 4, 9], [0, 2, 6, 7, 5, 1, 3, 8, 9, 4], [0, 2, 6, 7, 5, 1, 3, 9, 4, 8], [0, 2, 6, 7, 5, 1, 3, 9, 8, 4], [0, 2, 6, 7, 5, 1, 4, 3, 8, 9], [0, 2, 6, 7, 5, 1, 4, 3, 9, 8], [0, 2, 6, 7, 5, 1, 4, 8, 3, 9], [0, 2, 6, 7, 5, 1, 4, 8, 9, 3], [0, 2, 6, 7, 5, 1, 4, 9, 3, 8], [0, 2, 6, 7, 5, 1, 4, 9, 8, 3], [0, 2, 6, 7, 5, 1, 8, 3, 4, 9], [0, 2, 6, 7, 5, 1, 8, 3, 9, 4], [0, 2, 6, 7, 5, 1, 8, 4, 3, 9], [0, 2, 6, 7, 5, 1, 8, 4, 9, 3], [0, 2, 6, 7, 5, 1, 8, 9, 3, 4], [0, 2, 6, 7, 5, 1, 8, 9, 4, 3], [0, 2, 6, 7, 5, 1, 9, 3, 4, 8], [0, 2, 6, 7, 5, 1, 9, 3, 8, 4], [0, 2, 6, 7, 5, 1, 9, 4, 3, 8], [0, 2, 6, 7, 5, 1, 9, 4, 8, 3], [0, 2, 6, 7, 5, 1, 9, 8, 3, 4], [0, 2, 6, 7, 5, 1, 9, 8, 4, 3], [0, 2, 6, 7, 5, 8, 1, 3, 4, 9], [0, 2, 6, 7, 5, 8, 1, 3, 9, 4], [0, 2, 6, 7, 5, 8, 1, 4, 3, 9], [0, 2, 6, 7, 5, 8, 1, 4, 9, 3], [0, 2, 6, 7, 5, 8, 1, 9, 3, 4], [0, 2, 6, 7, 5, 8, 1, 9, 4, 3], [0, 2, 6, 7, 5, 8, 9, 1, 3, 4], [0, 2, 6, 7, 5, 8, 9, 1, 4, 3], [0, 2, 6, 7, 5, 9, 1, 3, 4, 8], [0, 2, 6, 7, 5, 9, 1, 3, 8, 4], [0, 2, 6, 7, 5, 9, 1, 4, 3, 8], [0, 2, 6, 7, 5, 9, 1, 4, 8, 3], [0, 2, 6, 7, 5, 9, 1, 8, 3, 4], [0, 2, 6, 7, 5, 9, 1, 8, 4, 3], [0, 2, 6, 7, 5, 9, 8, 1, 3, 4], [0, 2, 6, 7, 5, 9, 8, 1, 4, 3], [0, 2, 6, 7, 9, 1, 3, 4, 5, 8], [0, 2, 6, 7, 9, 1, 3, 5, 4, 8], [0, 2, 6, 7, 9, 1, 3, 5, 8, 4], [0, 2, 6, 7, 9, 1, 4, 3, 5, 8], [0, 2, 6, 7, 9, 1, 4, 5, 3, 8], [0, 2, 6, 7, 9, 1, 4, 5, 8, 3], [0, 2, 6, 7, 9, 1, 5, 3, 4, 8], [0, 2, 6, 7, 9, 1, 5, 3, 8, 4], [0, 2, 6, 7, 9, 1, 5, 4, 3, 8], [0, 2, 6, 7, 9, 1, 5, 4, 8, 3], [0, 2, 6, 7, 9, 1, 5, 8, 3, 4], [0, 2, 6, 7, 9, 1, 5, 8, 4, 3], [0, 2, 6, 7, 9, 5, 1, 3, 4, 8], [0, 2, 6, 7, 9, 5, 1, 3, 8, 4], [0, 2, 6, 7, 9, 5, 1, 4, 3, 8], [0, 2, 6, 7, 9, 5, 1, 4, 8, 3], [0, 2, 6, 7, 9, 5, 1, 8, 3, 4], [0, 2, 6, 7, 9, 5, 1, 8, 4, 3], [0, 2, 6, 7, 9, 5, 8, 1, 3, 4], [0, 2, 6, 7, 9, 5, 8, 1, 4, 3]])\n    ]\n    for test in tests:\n        test_function2(test[-1], solve, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچه ترتیب توپولوژیک\n  \u003cbr\u003e\n\u003c/p\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    وظیفه اول:\n    \u003cbr\u003e\nچگونه پیشنیازی خود را تربیت کنیم!\n    \u003cbr\u003e\n    سوال:\n    \u003cbr\u003e\nبعد از کش و قوس های فراوان در انتخاب واحد، اکبر بیچاره بالاخره توانست تعداد کمی واحد بردارد که برای یکی از آنها پیشنیازی را رعایت نکرده است و حالا فهمیده است که آموزش در صدد این است که دانشجویانی را که پیشنیازی را رعایت نکرده اند از درس مورد نظر حذف کند.\n    \u003cbr\u003e\n    اکبر که به کل با گراف پیشنیازی دروس(فرض می‌ کنیم همنیازی نداریم) بیگانه است، می خواهد تمام حالاتی که می توان درس ها را گذراند بدون آنکه پیشنیازی را رعایت نکرده باشد را پیدا کند. به او کمک کنید تا به خواسته خود برسد.\n    \u003cbr\u003e\n\n\u003cp dir\u003d\"rtl\"\u003e\n    توضیحات بیشتر: به شما گراف پیشنیازی دروس داده شده است. تمام حالات خواسته شده را چاپ کنید. در هر حالت به ترتیب دروسی که می‌ بایست بگذراند تا پیشنیازی رعایت شود را بدست آورید. در نهایت لیستی از لیست‌ها را خروجی دهید که هر لیست شامل یک ترتیب درست است.\n    \u003cbr\u003e\n\n\u003c/p\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\n        قاعدتا گراف موجود یک\n        DAG\n        است چرا که روابط پیشنیازی هیچگاه باعث بوجود آمدن دور نمی شوند.\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\nهر وقت DAG در جایی دیدید ، آب دستتان بود روی زمین بگذارید و یاد ترتیب توپولوژیکال بیفتید.(بیشتر شبیه نکته های کنکورشد!)\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\n        یک ترتیب درست از دروس، ترتیبی است که هر درسی که پیشنیاز درس دیگری بود قبل از آن درس بیاید. این همان ترتیب توپولوژیکال است!\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\n        حال برای بدست آوردن تمام ترتیب ها چه کار می توانیم بکنیم ؟ در مبحث ترتیب توپولوژیکال راس های با درجه ورودی صفر راس ها مهمی بودند. نه ؟\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    \u003cp dir\u003d\"rtl\"\u003e\n       می دانیم که هر\n        DAG\n        قطعا حداقل یک راس با درجه ورودی صفر دارد. اگر این راس را برداریم و درجه ورودی راس هایی که با راس اولیه مجاورند را کاهش دهیم، احتمالا راس با درجه ورودی صفر جدید بوجود می‌آید.\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q2",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 124,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def isSafe(self, i, j, visited):\n        return (0 \u003c\u003d i \u003c self.ROW and 0 \u003c\u003d j \u003c self.COL and\n                not visited[i][j] and self.graph[i][j])\n\n    def dfs(self, i, j, visited):\n        # These arrays are used to get row and\n        # column numbers of 8 neighbours\n        # of a given cell\n        row_nbr \u003d [-1, -1, -1, 0, 0, 1, 1, 1]\n        col_nbr \u003d [-1, 0, 1, -1, 1, -1, 0, 1]\n        visited[i][j] \u003d True\n        for k in range(8):\n            if self.isSafe(i + row_nbr[k], j + col_nbr[k], visited):\n                self.dfs(i + row_nbr[k], j + col_nbr[k], visited)",
                  "placeholder_text": ""
                },
                {
                  "offset": 163,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "visited \u003d [[False for j in range(self.COL)] for i in range(self.ROW)]\n        count \u003d 0\n        for i in range(self.ROW):\n            for j in range(self.COL):\n                if visited[i][j] \u003d\u003d False and self.graph[i][j] \u003d\u003d 1:\n                    self.dfs(i, j, visited)\n                    count +\u003d 1\n        return count",
                  "placeholder_text": "#Implement the function"
                }
              ],
              "is_visible": true,
              "text": "class Graph:\n    def __init__(self, row, col, g):\n        self.ROW \u003d row\n        self.COL \u003d col\n        self.graph \u003d g\n\n    \n\n    def count_islands(self):\n        #Implement the function\n\n\n# Don\u0027t change this function\ndef solve(graph):\n    return graph.count_islands()\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    graph \u003d [[1, 1, 0, 0, 0],\n             [0, 1, 0, 0, 1],\n             [1, 0, 0, 1, 1],\n             [0, 0, 0, 0, 0],\n             [1, 0, 1, 0, 1]]\n    row \u003d len(graph)\n    col \u003d len(graph[0])\n    g \u003d Graph(row, col, graph)\n\n    graph \u003d [[1, 1],\n             [1, 1]]\n    row \u003d len(graph)\n    col \u003d len(graph[0])\n    g2 \u003d Graph(row, col, graph)\n\n    graph \u003d [[0 for i in range(1000)] for j in range(1000)]\n    row \u003d col \u003d 1000\n    g3 \u003d Graph(row, col, graph)\n\n    graph \u003d [[0 for i in range(1000)] for j in range(1000)]\n    graph[500] \u003d [(1 if i % 2 \u003d\u003d 0 else 0) for i in range(1000)]\n    print(graph[500])\n    row \u003d col \u003d 1000\n    g4 \u003d Graph(row, col, graph)\n\n    tests \u003d [\n        (g, 5),\n        (g2, 1),\n        (g3, 0),\n        (g4, 500),\n    ]\n    for test in tests:\n        my_test_function(test[-1], solve, test[0])\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچهٔ ترتیب توپولوژیک و مولقه‌های قویا همبند\n    \u003cbr\u003e\u003cbr\u003e\n    پیدا کردن جزیره‌ها\n    \u003cbr\u003e\n    سوال:\n    می‌خواهیم الگوریتمی طراحی کنیم که از روی یک نقشه هوایی تعداد جزیره‌های یک منطقه را شناسایی کند. نقشه ورودی را در قالب یک آرایه دوبعدی دریافت می‌کنیم. عدد یک نشان‌دهنده خشکی و صفر نشان‌دهنده آب است. یک جزیره شامل تعدادی یک همجوار است (توجه کنید که هر خانه حداکثر ۸ همسایه دارد.)\n    \u003cbr\u003eبرای مثال در نقشه زیر ۵ جزیره وجود دارد\n    \u003cimg src\u003d\"capture.png\", width\u003d\"30%\"/\u003e\n    خروجی: الگوریتم باید تعداد جزایر روی نقشه را چاپ کند.\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    به مفهوم مولفه‌های قویا همبند فکر کنید. چه تفاوتی میان ورودی این مسئله و گرافی که در آن مولفه‌های قویا همبند را می‌یافتیم وجود دارد؟ چگونه می‌توان مفهوم مولفه‌های قویا همبند را به گراف‌های بدون جهت تعمیم داد؟\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    از جست‌وجوی عمق اول در پیاده‌سازی‌تان استفاده کنید.\n\u003c/div\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n    به جز استفاده از جست‌وجوی عمق اول چه راه دیگری برای حل این مسئله به ذهنتان می‌رسد؟\n\u003c/div\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "Q3",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "placeholders": [
                {
                  "offset": 1,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "def intersect(l1, r1, l2, r2):\n    if l1 \u003c\u003d l2 and r1 \u003e\u003d r2 or l2 \u003c\u003d l1 and r2 \u003e\u003d r1:\n        return False\n    if r2 \u003c\u003d r1 and l1 \u003c\u003d l2 and r2 \u003c\u003d l2:\n        return False\n    if l1 \u003e\u003d r2 and l1 \u003e\u003d l2 or r1 \u003c\u003d l2 and r1 \u003c\u003d r2:\n        return False\n    return True\n\ndef ans(color):\n    return \u0027\u0027.join([\u0027I\u0027 if i \u003d\u003d 0 else \u0027O\u0027 for i in color])\n\n\ndef dfs(v, clr, color, graph):\n    if color[v] !\u003d -1 and color[v] !\u003d clr:\n        return \u0027Impossible\u0027\n    if color[v] !\u003d -1:\n        return\n    color[v] \u003d clr\n    for u in graph[v]:\n        if dfs(u, 1 - clr, color, graph) \u003d\u003d \u0027Impossible\u0027:\n            return \u0027Impossible\u0027",
                  "placeholder_text": ""
                },
                {
                  "offset": 77,
                  "length": 23,
                  "hints": [],
                  "possible_answer": "n, m \u003d input[0]\n    graph \u003d [[] for i in range(m)]\n    vedge \u003d []\n    color \u003d [-1] * m\n    for i in range(m):\n        a, b \u003d map(int, input[i + 1])\n        a, b \u003d min(a, b), max(a, b)\n        for j, v in enumerate(vedge):\n            if intersect(a, b, v[0], v[1]):\n                graph[i].append(j)\n                graph[j].append(i)\n        vedge.append((a, b))\n\n    for i in range(m):\n        if color[i] \u003d\u003d -1:\n            if dfs(i, 0, color, graph):\n                return \u0027Impossible\u0027\n    return ans(color)",
                  "placeholder_text": "#Implement the fucntion"
                }
              ],
              "is_visible": true,
              "text": "\n\n\n# Sample Input:\n# Input \u003d [[4, 2], [1, 3], [2, 4]]\n\ndef solve(input):\n    #Implement the fucntion\n"
            }
          },
          "test_files": {
            "tests.py": "from test_helper import *\nfrom task import *\n\n\ndef intersect(l1, r1, l2, r2):\n    if l1 \u003c\u003d l2 and r1 \u003e\u003d r2 or l2 \u003c\u003d l1 and r2 \u003e\u003d r1:\n        return False\n    if r2 \u003c\u003d r1 and l1 \u003c\u003d l2 and r2 \u003c\u003d l2:\n        return False\n    if l1 \u003e\u003d r2 and l1 \u003e\u003d l2 or r1 \u003c\u003d l2 and r1 \u003c\u003d r2:\n        return False\n    return True\n\n\ndef check_fallacy(l1, r1, l2, r2, ans1, ans2):\n    if intersect(l1, r1, l2, r2):\n        return ans1 \u003d\u003d ans2\n    return False\n\n\ndef dfs(v, clr, color, graph):\n    if color[v] !\u003d -1 and color[v] !\u003d clr:\n        return \u0027Impossible\u0027\n    if color[v] !\u003d -1:\n        return\n    color[v] \u003d clr\n    for u in graph[v]:\n        if dfs(u, 1 - clr, color, graph) \u003d\u003d \u0027Impossible\u0027:\n            return \u0027Impossible\u0027\n\n\ndef my_solve(input):\n    n, m \u003d input[0]\n    graph \u003d [[] for i in range(m)]\n    vedge \u003d []\n    color \u003d [-1] * m\n    for i in range(m):\n        a, b \u003d map(int, input[i + 1])\n        a, b \u003d min(a, b), max(a, b)\n        for j, v in enumerate(vedge):\n            if intersect(a, b, v[0], v[1]):\n                graph[i].append(j)\n                graph[j].append(i)\n        vedge.append((a, b))\n\n    for i in range(m):\n        if color[i] \u003d\u003d -1:\n            if dfs(i, 0, color, graph):\n                return \u0027Impossible\u0027\n    return answer(color)\n\n\ndef answer(color):\n    return str([\u0027I\u0027 if i \u003d\u003d 0 else \u0027O\u0027 for i in color])\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    in1 \u003d [[4, 2], [1, 3], [2, 4]]\n    in2 \u003d [[5, 2], [2, 4], [4, 1]]\n    in3 \u003d [[6, 6], [1, 4], [4, 6], [2, 6], [2, 4], [5, 3], [6, 3]]\n    in4 \u003d [[17, 10], [4, 11], [7, 16], [8, 5], [12, 15], [7, 4], [1, 12], [11, 1], [15, 1], [7, 14], [2, 9]]\n\n    tests \u003d [in1, in2, in3, in4]\n    for test in tests:\n        ans \u003d solve(test)\n        true_ans \u003d my_solve(test)\n        if true_ans \u003d\u003d \u0027Impossible\u0027:\n            if ans \u003d\u003d \u0027Impossible\u0027:\n                continue\n            else:\n                failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format(test, ans, my_solve(test)))\n        for i in range(1, len(test)):\n            for j in range(i + 1, len(test)):\n                if check_fallacy(test[i][0], test[i][1], test[j][0], test[j][1], list(ans)[i - 1], list(ans)[j - 1]):\n                    failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format(test, ans, my_solve(test)))\n                passed()\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp dir\u003d\"rtl\"\u003e\n    پیشنیاز:\n    \u003cbr\u003e\nدفترچهٔ ترتیب توپولوژیک و مولقه‌های قویا همبند\n    \u003cbr\u003e\n     یکی از مهم‌ترین کاربردهای مسئله SCC در حل مسائل satisfiability است. در ادامه به یکی از این مصادیق این مسئله می‌پردازیم. به طور کلی در این مسائل تعدادی متغیر صحیح و غلط داریم که به فرم CNF در آمده‌اند و می‌خواهیم ببینیم آیا مقداردهی‌ای به این متغیرها وجود دارد که جواب نهایی مسئله را صحیح کند یا نه.\n    \u003cbr\u003e\n    \u003cb\u003eسوال:\u003c/b\u003e\n    در کشور پشمکستان، شهر‌ها به صورت دایره‌ای به هم راه دارند. یعنی شهر i ام به شهر‌های i-1 ام و i+1 ام جاده دارد. ( شهر‌ اول و آخر نیز به هم جاده دارند.) همچنین شکل هندسی این جاده‌ها دقیقا به صورت یک دایره است.\u003cbr\u003e\n    پشمک به عنوان وزیر راه و شهرسازی پشمکستان قصد دارد برای کاهش مسافت بین شهر‌ها ، بین تعدادی از شهر‌ها جاده‌ی مستقیم احداث کند. اما برای جلوگیری از ترافیک ، هیچ دو جاده‌ای ( شامل جاده‌های اولیه‌ی دایره‌ای و جاده‌های تازه تاسیس ) نباید جز در شهر‌ها باهم تقاطع داشته باشند. با توجه به این نکته ، بدیهی است هرکدام از جاده‌های جدید به طور کامل داخل دایره‌ی اولیه یا به طور کامل خارج از آن قرار خواهند گرفت. با مشخص کردن این که کدام جاده‌ها داخل و کدام جاده‌ها خارج دایره قرار می‌گیرند ، به پشمک در احداث جاده‌ها کمک کنید.\n    \u003cbr\u003e\n    \u003cb\u003eورودی:\u003c/b\u003e\n    در خط اول ورودی دو عدد ‎‎‎‎‎n و m‎‎‎‏ داده می شود که به ترتیب تعداد شهرهای پشکمستان و تعداد جاده‌های جدید است. در هریک از m خط بعدی دو عدد می‌آیند که شماره‌ی شهر‌هایی هستند که پشمک قصد احداث جاده میان آن‌ها را دارد.\n    \u003cbr\u003e\n    \u003cb\u003eخروجی:\u003c/b\u003e\n    در صورتی که امکان احداث جاده‌های جدید با شرایط ذکر شده وجود نداشت ، در خروجی عبارت Impossible را چاپ کنید. در غیر این صورت رشته‌ای از I و O را چاپ کنید که در آن کاراکتر i ام در صورتی که جاده‌ی i ام بیرون دایره احداث شود O و در صورتی که این جاده درون دایره احداث شود I خواهد بود. ( در صورت وجود جواب‌های مختلف ، یکی را به دلخواه چاپ کنید )\n\u003c/p\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\nهر جاده را بازه‌ای روی محور اعداد در نظر بگیرید. دو جاده چگونه ممکن است با هم تلاقی داشته باشند؟\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\nسعی کنید مسئله را به صورت یک گراف مدل کنید. چگونه این کار را می‌کنید؟ یک ایده آن است که به ازای هر شهر یک رأس و هر جاده یک یال را در نظر بگیریم؛ چه راه دیگری به ذهنتان می‌رسد.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\nسعی کنید مسئله را به صورت یک گراف مدل کنید. چگونه این کار را می‌کنید؟ یک ایده آن است که به ازای هر شهر یک رأس و هر جاده یک یال را در نظر بگیریم؛ چه راه دیگری به ذهنتان می‌رسد.\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"hint\"\u003e\n    حال به راه‌هایی مثل تبدیل کردن گراف به مسئلهٔ پیدا کردن مولفه‌ّهای همبندی یا رنگ‌آمیزی فکر کنید و با استفاده از الگوریتم پیمایش عمق اول مسئله راه حل کنید.\n\u003c/div\u003e\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 3:30:00 AM",
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "task_files": {},
          "test_files": {},
          "description_format": "html",
          "additional_files": {
            "test_helper.py": {
              "is_visible": false,
              "text": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\ndef test_function(answer, func, *f_args):\n    output \u003d func(*f_args)\n    if output !\u003d answer:\n        failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format(f_args, output, answer))\n\ndef test_function2(answer, func, *f_args):\n    output \u003d func(*f_args)\n    for i in answer:\n        if i not in output:\n            failed(\"Wrong Answer! Input: {}, your output: {}, answer: {}\".format(f_args, output, answer))\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n"
            }
          },
          "update_date": "Jan 1, 1970 3:30:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    }
  ],
  "version": 8
}